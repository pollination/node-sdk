/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: info@pollination.solutions
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { DAG } from './dag';
// May contain unused imports in some cases
// @ts-ignore
import type { DAGInputsInner } from './daginputs-inner';
// May contain unused imports in some cases
// @ts-ignore
import type { DAGOutputsInner } from './dagoutputs-inner';
// May contain unused imports in some cases
// @ts-ignore
import type { DAGTask } from './dagtask';
// May contain unused imports in some cases
// @ts-ignore
import type { PluginConfig } from './plugin-config';
// May contain unused imports in some cases
// @ts-ignore
import type { ScriptingLanguages } from './scripting-languages';
// May contain unused imports in some cases
// @ts-ignore
import type { TemplateFunction } from './template-function';

/**
 * 
 * @export
 * @interface BakedRecipeTemplatesInner
 */
export interface BakedRecipeTemplatesInner {
    /**
     * An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.
     * @type {{ [key: string]: string; }}
     * @memberof BakedRecipeTemplatesInner
     */
    'annotations'?: { [key: string]: string; };
    /**
     * Full shell command for this function. Each function accepts only one command. The command will be executed as a shell command in plugin. For running several commands after each other use && between the commands or pipe data from one to another using |
     * @type {string}
     * @memberof BakedRecipeTemplatesInner
     */
    'command'?: string;
    /**
     * The plugin config to use for this function
     * @type {PluginConfig}
     * @memberof BakedRecipeTemplatesInner
     */
    'config': PluginConfig;
    /**
     * Function description. A short human readable description for this function.
     * @type {string}
     * @memberof BakedRecipeTemplatesInner
     */
    'description'?: string;
    /**
     * Inputs for the DAG.
     * @type {Array<DAGInputsInner>}
     * @memberof BakedRecipeTemplatesInner
     */
    'inputs'?: Array<DAGInputsInner>;
    /**
     * Programming language of the script. Currently only Python is supported.
     * @type {ScriptingLanguages}
     * @memberof BakedRecipeTemplatesInner
     */
    'language'?: ScriptingLanguages;
    /**
     * A unique name for this dag.
     * @type {string}
     * @memberof BakedRecipeTemplatesInner
     */
    'name': string;
    /**
     * Outputs of the DAG that can be used by other DAGs.
     * @type {Array<DAGOutputsInner>}
     * @memberof BakedRecipeTemplatesInner
     */
    'outputs'?: Array<DAGOutputsInner>;
    /**
     * Source contains the source code of the script to execute.
     * @type {string}
     * @memberof BakedRecipeTemplatesInner
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof BakedRecipeTemplatesInner
     */
    'type'?: string;
    /**
     * Stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Default is True.
     * @type {boolean}
     * @memberof BakedRecipeTemplatesInner
     */
    'fail_fast'?: boolean;
    /**
     * Tasks are a list of DAG steps
     * @type {Array<DAGTask>}
     * @memberof BakedRecipeTemplatesInner
     */
    'tasks': Array<DAGTask>;
}



