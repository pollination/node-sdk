/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: info@pollination.solutions
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreatedContent } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { NewPluginPackage } from '../models';
// @ts-ignore
import type { PackageSortKey } from '../models';
// @ts-ignore
import type { PluginPackage } from '../models';
// @ts-ignore
import type { PluginPackageList } from '../models';
// @ts-ignore
import type { Repository } from '../models';
// @ts-ignore
import type { RepositoryAccessPolicy } from '../models';
// @ts-ignore
import type { RepositoryAccessPolicyList } from '../models';
// @ts-ignore
import type { RepositoryCreate } from '../models';
// @ts-ignore
import type { RepositoryList } from '../models';
// @ts-ignore
import type { RepositoryPolicySubject } from '../models';
// @ts-ignore
import type { RepositorySortKey } from '../models';
// @ts-ignore
import type { RepositoryUpdate } from '../models';
// @ts-ignore
import type { SortEnum } from '../models';
// @ts-ignore
import type { UpdateAccepted } from '../models';
/**
 * PluginsApi - axios parameter creator
 * @export
 */
export const PluginsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new plugin.
         * @summary Create a Plugin
         * @param {string} owner 
         * @param {RepositoryCreate} repositoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlugin: async (owner: string, repositoryCreate: RepositoryCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('createPlugin', 'owner', owner)
            // verify required parameter 'repositoryCreate' is not null or undefined
            assertParamExists('createPlugin', 'repositoryCreate', repositoryCreate)
            const localVarPath = `/plugins/{owner}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(repositoryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new plugin package version
         * @summary Create a new Plugin package
         * @param {string} owner 
         * @param {string} name 
         * @param {NewPluginPackage} newPluginPackage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPluginPackage: async (owner: string, name: string, newPluginPackage: NewPluginPackage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('createPluginPackage', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createPluginPackage', 'name', name)
            // verify required parameter 'newPluginPackage' is not null or undefined
            assertParamExists('createPluginPackage', 'newPluginPackage', newPluginPackage)
            const localVarPath = `/plugins/{owner}/{name}/tags`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPluginPackage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a plugin (must have `admin` permission)
         * @summary Delete a Plugin
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlugin: async (owner: string, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('deletePlugin', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deletePlugin', 'name', name)
            const localVarPath = `/plugins/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a plugin\'s access policy (must have `admin` permission)
         * @summary Remove a Repository permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryPolicySubject} repositoryPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePluginOrgPermission: async (owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('deletePluginOrgPermission', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deletePluginOrgPermission', 'name', name)
            // verify required parameter 'repositoryPolicySubject' is not null or undefined
            assertParamExists('deletePluginOrgPermission', 'repositoryPolicySubject', repositoryPolicySubject)
            const localVarPath = `/plugins/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(repositoryPolicySubject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a plugin by name
         * @summary Get a plugin
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlugin: async (owner: string, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getPlugin', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPlugin', 'name', name)
            const localVarPath = `/plugins/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a plugin\'s access permissions (must have `write` permission)
         * @summary Get plugin access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginAccessPermissions: async (owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getPluginAccessPermissions', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPluginAccessPermissions', 'name', name)
            const localVarPath = `/plugins/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (subjectType) {
                localVarQueryParameter['subject_type'] = subjectType;
            }

            if (permission) {
                localVarQueryParameter['permission'] = permission;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a plugin tag by name and tag
         * @summary Get a plugin tag
         * @param {string} owner 
         * @param {string} name 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginByTag: async (owner: string, name: string, tag: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getPluginByTag', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPluginByTag', 'name', name)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('getPluginByTag', 'tag', tag)
            const localVarPath = `/plugins/{owner}/{name}/tags/{tag}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a plugin by name
         * @summary Get a plugin tags
         * @param {string} owner 
         * @param {string} name 
         * @param {PackageSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPluginTags: async (owner: string, name: string, sortBy?: PackageSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('listPluginTags', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('listPluginTags', 'name', name)
            const localVarPath = `/plugins/{owner}/{name}/tags`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List plugins
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [keyword] A keyword to index the repository by
         * @param {Array<string>} [permission] Filter by permission on given resource
         * @param {RepositorySortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlugins: async (search?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, sortBy?: RepositorySortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plugins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (search) {
                localVarQueryParameter['search'] = search;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (owner) {
                localVarQueryParameter['owner'] = owner;
            }

            if (_public !== undefined) {
                localVarQueryParameter['public'] = _public;
            }

            if (keyword) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (permission) {
                localVarQueryParameter['permission'] = permission;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a plugin (must have `contribute` permission)
         * @summary Update a Plugin
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryUpdate} repositoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlugin: async (owner: string, name: string, repositoryUpdate: RepositoryUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('updatePlugin', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updatePlugin', 'name', name)
            // verify required parameter 'repositoryUpdate' is not null or undefined
            assertParamExists('updatePlugin', 'repositoryUpdate', repositoryUpdate)
            const localVarPath = `/plugins/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(repositoryUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upsert a plugin\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a plugin
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertPluginPermission: async (owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('upsertPluginPermission', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('upsertPluginPermission', 'name', name)
            // verify required parameter 'repositoryAccessPolicy' is not null or undefined
            assertParamExists('upsertPluginPermission', 'repositoryAccessPolicy', repositoryAccessPolicy)
            const localVarPath = `/plugins/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(repositoryAccessPolicy, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PluginsApi - functional programming interface
 * @export
 */
export const PluginsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PluginsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new plugin.
         * @summary Create a Plugin
         * @param {string} owner 
         * @param {RepositoryCreate} repositoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlugin(owner: string, repositoryCreate: RepositoryCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlugin(owner, repositoryCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.createPlugin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new plugin package version
         * @summary Create a new Plugin package
         * @param {string} owner 
         * @param {string} name 
         * @param {NewPluginPackage} newPluginPackage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPluginPackage(owner: string, name: string, newPluginPackage: NewPluginPackage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPluginPackage(owner, name, newPluginPackage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.createPluginPackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a plugin (must have `admin` permission)
         * @summary Delete a Plugin
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlugin(owner: string, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlugin(owner, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.deletePlugin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a plugin\'s access policy (must have `admin` permission)
         * @summary Remove a Repository permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryPolicySubject} repositoryPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePluginOrgPermission(owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePluginOrgPermission(owner, name, repositoryPolicySubject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.deletePluginOrgPermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a plugin by name
         * @summary Get a plugin
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlugin(owner: string, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlugin(owner, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.getPlugin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a plugin\'s access permissions (must have `write` permission)
         * @summary Get plugin access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPluginAccessPermissions(owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryAccessPolicyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPluginAccessPermissions(owner, name, page, perPage, subjectType, permission, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.getPluginAccessPermissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a plugin tag by name and tag
         * @summary Get a plugin tag
         * @param {string} owner 
         * @param {string} name 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPluginByTag(owner: string, name: string, tag: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginPackage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPluginByTag(owner, name, tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.getPluginByTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a plugin by name
         * @summary Get a plugin tags
         * @param {string} owner 
         * @param {string} name 
         * @param {PackageSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPluginTags(owner: string, name: string, sortBy?: PackageSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginPackageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPluginTags(owner, name, sortBy, sortOrder, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.listPluginTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List plugins
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [keyword] A keyword to index the repository by
         * @param {Array<string>} [permission] Filter by permission on given resource
         * @param {RepositorySortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlugins(search?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, sortBy?: RepositorySortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlugins(search, name, owner, _public, keyword, permission, sortBy, sortOrder, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.listPlugins']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a plugin (must have `contribute` permission)
         * @summary Update a Plugin
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryUpdate} repositoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlugin(owner: string, name: string, repositoryUpdate: RepositoryUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlugin(owner, name, repositoryUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.updatePlugin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upsert a plugin\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a plugin
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertPluginPermission(owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertPluginPermission(owner, name, repositoryAccessPolicy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.upsertPluginPermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PluginsApi - factory interface
 * @export
 */
export const PluginsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PluginsApiFp(configuration)
    return {
        /**
         * Create a new plugin.
         * @summary Create a Plugin
         * @param {PluginsApiCreatePluginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlugin(requestParameters: PluginsApiCreatePluginRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedContent> {
            return localVarFp.createPlugin(requestParameters.owner, requestParameters.repositoryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new plugin package version
         * @summary Create a new Plugin package
         * @param {PluginsApiCreatePluginPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPluginPackage(requestParameters: PluginsApiCreatePluginPackageRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedContent> {
            return localVarFp.createPluginPackage(requestParameters.owner, requestParameters.name, requestParameters.newPluginPackage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a plugin (must have `admin` permission)
         * @summary Delete a Plugin
         * @param {PluginsApiDeletePluginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlugin(requestParameters: PluginsApiDeletePluginRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePlugin(requestParameters.owner, requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a plugin\'s access policy (must have `admin` permission)
         * @summary Remove a Repository permissions
         * @param {PluginsApiDeletePluginOrgPermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePluginOrgPermission(requestParameters: PluginsApiDeletePluginOrgPermissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePluginOrgPermission(requestParameters.owner, requestParameters.name, requestParameters.repositoryPolicySubject, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a plugin by name
         * @summary Get a plugin
         * @param {PluginsApiGetPluginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlugin(requestParameters: PluginsApiGetPluginRequest, options?: RawAxiosRequestConfig): AxiosPromise<Repository> {
            return localVarFp.getPlugin(requestParameters.owner, requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a plugin\'s access permissions (must have `write` permission)
         * @summary Get plugin access permissions
         * @param {PluginsApiGetPluginAccessPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginAccessPermissions(requestParameters: PluginsApiGetPluginAccessPermissionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<RepositoryAccessPolicyList> {
            return localVarFp.getPluginAccessPermissions(requestParameters.owner, requestParameters.name, requestParameters.page, requestParameters.perPage, requestParameters.subjectType, requestParameters.permission, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a plugin tag by name and tag
         * @summary Get a plugin tag
         * @param {PluginsApiGetPluginByTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginByTag(requestParameters: PluginsApiGetPluginByTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginPackage> {
            return localVarFp.getPluginByTag(requestParameters.owner, requestParameters.name, requestParameters.tag, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a plugin by name
         * @summary Get a plugin tags
         * @param {PluginsApiListPluginTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPluginTags(requestParameters: PluginsApiListPluginTagsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginPackageList> {
            return localVarFp.listPluginTags(requestParameters.owner, requestParameters.name, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List plugins
         * @param {PluginsApiListPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlugins(requestParameters: PluginsApiListPluginsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RepositoryList> {
            return localVarFp.listPlugins(requestParameters.search, requestParameters.name, requestParameters.owner, requestParameters._public, requestParameters.keyword, requestParameters.permission, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a plugin (must have `contribute` permission)
         * @summary Update a Plugin
         * @param {PluginsApiUpdatePluginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlugin(requestParameters: PluginsApiUpdatePluginRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAccepted> {
            return localVarFp.updatePlugin(requestParameters.owner, requestParameters.name, requestParameters.repositoryUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Upsert a plugin\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a plugin
         * @param {PluginsApiUpsertPluginPermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertPluginPermission(requestParameters: PluginsApiUpsertPluginPermissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAccepted> {
            return localVarFp.upsertPluginPermission(requestParameters.owner, requestParameters.name, requestParameters.repositoryAccessPolicy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPlugin operation in PluginsApi.
 * @export
 * @interface PluginsApiCreatePluginRequest
 */
export interface PluginsApiCreatePluginRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiCreatePlugin
     */
    readonly owner: string

    /**
     * 
     * @type {RepositoryCreate}
     * @memberof PluginsApiCreatePlugin
     */
    readonly repositoryCreate: RepositoryCreate
}

/**
 * Request parameters for createPluginPackage operation in PluginsApi.
 * @export
 * @interface PluginsApiCreatePluginPackageRequest
 */
export interface PluginsApiCreatePluginPackageRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiCreatePluginPackage
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiCreatePluginPackage
     */
    readonly name: string

    /**
     * 
     * @type {NewPluginPackage}
     * @memberof PluginsApiCreatePluginPackage
     */
    readonly newPluginPackage: NewPluginPackage
}

/**
 * Request parameters for deletePlugin operation in PluginsApi.
 * @export
 * @interface PluginsApiDeletePluginRequest
 */
export interface PluginsApiDeletePluginRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiDeletePlugin
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiDeletePlugin
     */
    readonly name: string
}

/**
 * Request parameters for deletePluginOrgPermission operation in PluginsApi.
 * @export
 * @interface PluginsApiDeletePluginOrgPermissionRequest
 */
export interface PluginsApiDeletePluginOrgPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiDeletePluginOrgPermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiDeletePluginOrgPermission
     */
    readonly name: string

    /**
     * 
     * @type {RepositoryPolicySubject}
     * @memberof PluginsApiDeletePluginOrgPermission
     */
    readonly repositoryPolicySubject: RepositoryPolicySubject
}

/**
 * Request parameters for getPlugin operation in PluginsApi.
 * @export
 * @interface PluginsApiGetPluginRequest
 */
export interface PluginsApiGetPluginRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiGetPlugin
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiGetPlugin
     */
    readonly name: string
}

/**
 * Request parameters for getPluginAccessPermissions operation in PluginsApi.
 * @export
 * @interface PluginsApiGetPluginAccessPermissionsRequest
 */
export interface PluginsApiGetPluginAccessPermissionsRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiGetPluginAccessPermissions
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiGetPluginAccessPermissions
     */
    readonly name: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof PluginsApiGetPluginAccessPermissions
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof PluginsApiGetPluginAccessPermissions
     */
    readonly perPage?: number

    /**
     * The type of access policy subject
     * @type {Array<string>}
     * @memberof PluginsApiGetPluginAccessPermissions
     */
    readonly subjectType?: Array<string>

    /**
     * An access policy permission string
     * @type {Array<string>}
     * @memberof PluginsApiGetPluginAccessPermissions
     */
    readonly permission?: Array<string>
}

/**
 * Request parameters for getPluginByTag operation in PluginsApi.
 * @export
 * @interface PluginsApiGetPluginByTagRequest
 */
export interface PluginsApiGetPluginByTagRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiGetPluginByTag
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiGetPluginByTag
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiGetPluginByTag
     */
    readonly tag: string
}

/**
 * Request parameters for listPluginTags operation in PluginsApi.
 * @export
 * @interface PluginsApiListPluginTagsRequest
 */
export interface PluginsApiListPluginTagsRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiListPluginTags
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiListPluginTags
     */
    readonly name: string

    /**
     * Key to sort the list by
     * @type {PackageSortKey}
     * @memberof PluginsApiListPluginTags
     */
    readonly sortBy?: PackageSortKey

    /**
     * The order to sort the list
     * @type {SortEnum}
     * @memberof PluginsApiListPluginTags
     */
    readonly sortOrder?: SortEnum

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof PluginsApiListPluginTags
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof PluginsApiListPluginTags
     */
    readonly perPage?: number
}

/**
 * Request parameters for listPlugins operation in PluginsApi.
 * @export
 * @interface PluginsApiListPluginsRequest
 */
export interface PluginsApiListPluginsRequest {
    /**
     * You know, for search
     * @type {Array<string>}
     * @memberof PluginsApiListPlugins
     */
    readonly search?: Array<string>

    /**
     * The account name
     * @type {Array<string>}
     * @memberof PluginsApiListPlugins
     */
    readonly name?: Array<string>

    /**
     * Owner of the project
     * @type {Array<string>}
     * @memberof PluginsApiListPlugins
     */
    readonly owner?: Array<string>

    /**
     * Boolean check for public/private projects
     * @type {boolean}
     * @memberof PluginsApiListPlugins
     */
    readonly _public?: boolean

    /**
     * A keyword to index the repository by
     * @type {Array<string>}
     * @memberof PluginsApiListPlugins
     */
    readonly keyword?: Array<string>

    /**
     * Filter by permission on given resource
     * @type {Array<string>}
     * @memberof PluginsApiListPlugins
     */
    readonly permission?: Array<string>

    /**
     * Key to sort the list by
     * @type {RepositorySortKey}
     * @memberof PluginsApiListPlugins
     */
    readonly sortBy?: RepositorySortKey

    /**
     * The order to sort the list
     * @type {SortEnum}
     * @memberof PluginsApiListPlugins
     */
    readonly sortOrder?: SortEnum

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof PluginsApiListPlugins
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof PluginsApiListPlugins
     */
    readonly perPage?: number
}

/**
 * Request parameters for updatePlugin operation in PluginsApi.
 * @export
 * @interface PluginsApiUpdatePluginRequest
 */
export interface PluginsApiUpdatePluginRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiUpdatePlugin
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiUpdatePlugin
     */
    readonly name: string

    /**
     * 
     * @type {RepositoryUpdate}
     * @memberof PluginsApiUpdatePlugin
     */
    readonly repositoryUpdate: RepositoryUpdate
}

/**
 * Request parameters for upsertPluginPermission operation in PluginsApi.
 * @export
 * @interface PluginsApiUpsertPluginPermissionRequest
 */
export interface PluginsApiUpsertPluginPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiUpsertPluginPermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof PluginsApiUpsertPluginPermission
     */
    readonly name: string

    /**
     * 
     * @type {RepositoryAccessPolicy}
     * @memberof PluginsApiUpsertPluginPermission
     */
    readonly repositoryAccessPolicy: RepositoryAccessPolicy
}

/**
 * PluginsApi - object-oriented interface
 * @export
 * @class PluginsApi
 * @extends {BaseAPI}
 */
export class PluginsApi extends BaseAPI {
    /**
     * Create a new plugin.
     * @summary Create a Plugin
     * @param {PluginsApiCreatePluginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public createPlugin(requestParameters: PluginsApiCreatePluginRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).createPlugin(requestParameters.owner, requestParameters.repositoryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new plugin package version
     * @summary Create a new Plugin package
     * @param {PluginsApiCreatePluginPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public createPluginPackage(requestParameters: PluginsApiCreatePluginPackageRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).createPluginPackage(requestParameters.owner, requestParameters.name, requestParameters.newPluginPackage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a plugin (must have `admin` permission)
     * @summary Delete a Plugin
     * @param {PluginsApiDeletePluginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public deletePlugin(requestParameters: PluginsApiDeletePluginRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).deletePlugin(requestParameters.owner, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a plugin\'s access policy (must have `admin` permission)
     * @summary Remove a Repository permissions
     * @param {PluginsApiDeletePluginOrgPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public deletePluginOrgPermission(requestParameters: PluginsApiDeletePluginOrgPermissionRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).deletePluginOrgPermission(requestParameters.owner, requestParameters.name, requestParameters.repositoryPolicySubject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a plugin by name
     * @summary Get a plugin
     * @param {PluginsApiGetPluginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public getPlugin(requestParameters: PluginsApiGetPluginRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).getPlugin(requestParameters.owner, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a plugin\'s access permissions (must have `write` permission)
     * @summary Get plugin access permissions
     * @param {PluginsApiGetPluginAccessPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public getPluginAccessPermissions(requestParameters: PluginsApiGetPluginAccessPermissionsRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).getPluginAccessPermissions(requestParameters.owner, requestParameters.name, requestParameters.page, requestParameters.perPage, requestParameters.subjectType, requestParameters.permission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a plugin tag by name and tag
     * @summary Get a plugin tag
     * @param {PluginsApiGetPluginByTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public getPluginByTag(requestParameters: PluginsApiGetPluginByTagRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).getPluginByTag(requestParameters.owner, requestParameters.name, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a plugin by name
     * @summary Get a plugin tags
     * @param {PluginsApiListPluginTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public listPluginTags(requestParameters: PluginsApiListPluginTagsRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).listPluginTags(requestParameters.owner, requestParameters.name, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List plugins
     * @param {PluginsApiListPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public listPlugins(requestParameters: PluginsApiListPluginsRequest = {}, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).listPlugins(requestParameters.search, requestParameters.name, requestParameters.owner, requestParameters._public, requestParameters.keyword, requestParameters.permission, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a plugin (must have `contribute` permission)
     * @summary Update a Plugin
     * @param {PluginsApiUpdatePluginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public updatePlugin(requestParameters: PluginsApiUpdatePluginRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).updatePlugin(requestParameters.owner, requestParameters.name, requestParameters.repositoryUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upsert a plugin\'s access policy (must have `admin` permission)
     * @summary Upsert a new permission to a plugin
     * @param {PluginsApiUpsertPluginPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public upsertPluginPermission(requestParameters: PluginsApiUpsertPluginPermissionRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).upsertPluginPermission(requestParameters.owner, requestParameters.name, requestParameters.repositoryAccessPolicy, options).then((request) => request(this.axios, this.basePath));
    }
}

