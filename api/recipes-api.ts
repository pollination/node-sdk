/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.24.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { NewRecipePackage } from '../models';
// @ts-ignore
import { PackageSortKey } from '../models';
// @ts-ignore
import { RecipePackage } from '../models';
// @ts-ignore
import { RecipePackageList } from '../models';
// @ts-ignore
import { Repository } from '../models';
// @ts-ignore
import { RepositoryAccessPolicy } from '../models';
// @ts-ignore
import { RepositoryAccessPolicyList } from '../models';
// @ts-ignore
import { RepositoryCreate } from '../models';
// @ts-ignore
import { RepositoryList } from '../models';
// @ts-ignore
import { RepositoryPolicySubject } from '../models';
// @ts-ignore
import { RepositorySortKey } from '../models';
// @ts-ignore
import { RepositoryUpdate } from '../models';
// @ts-ignore
import { SortEnum } from '../models';
// @ts-ignore
import { UpdateAccepted } from '../models';
/**
 * RecipesApi - axios parameter creator
 * @export
 */
export const RecipesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new recipe.
         * @summary Create a Recipe
         * @param {string} owner 
         * @param {RepositoryCreate} repositoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipe: async (owner: string, repositoryCreate: RepositoryCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createRecipe.');
            }
            // verify required parameter 'repositoryCreate' is not null or undefined
            if (repositoryCreate === null || repositoryCreate === undefined) {
                throw new RequiredError('repositoryCreate','Required parameter repositoryCreate was null or undefined when calling createRecipe.');
            }
            const localVarPath = `/recipes/{owner}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof repositoryCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(repositoryCreate !== undefined ? repositoryCreate : {}) : (repositoryCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new recipe package version
         * @summary Create a new Recipe package
         * @param {string} owner 
         * @param {string} name 
         * @param {NewRecipePackage} newRecipePackage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipePackage: async (owner: string, name: string, newRecipePackage: NewRecipePackage, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createRecipePackage.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createRecipePackage.');
            }
            // verify required parameter 'newRecipePackage' is not null or undefined
            if (newRecipePackage === null || newRecipePackage === undefined) {
                throw new RequiredError('newRecipePackage','Required parameter newRecipePackage was null or undefined when calling createRecipePackage.');
            }
            const localVarPath = `/recipes/{owner}/{name}/tags`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newRecipePackage !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newRecipePackage !== undefined ? newRecipePackage : {}) : (newRecipePackage || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a recipe (must have `admin` permission)
         * @summary Delete a Recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipe: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteRecipe.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteRecipe.');
            }
            const localVarPath = `/recipes/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a recipe\'s access policy (must have `admin` permission)
         * @summary Remove a Repository permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryPolicySubject} repositoryPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipeOrgPermission: async (owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteRecipeOrgPermission.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteRecipeOrgPermission.');
            }
            // verify required parameter 'repositoryPolicySubject' is not null or undefined
            if (repositoryPolicySubject === null || repositoryPolicySubject === undefined) {
                throw new RequiredError('repositoryPolicySubject','Required parameter repositoryPolicySubject was null or undefined when calling deleteRecipeOrgPermission.');
            }
            const localVarPath = `/recipes/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof repositoryPolicySubject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(repositoryPolicySubject !== undefined ? repositoryPolicySubject : {}) : (repositoryPolicySubject || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a recipe by name
         * @summary Get a recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipe: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getRecipe.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getRecipe.');
            }
            const localVarPath = `/recipes/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a recipe\'s access permissions (must have `write` permission)
         * @summary Get recipe access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeAccessPermissions: async (owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getRecipeAccessPermissions.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getRecipeAccessPermissions.');
            }
            const localVarPath = `/recipes/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (subjectType) {
                localVarQueryParameter['subject_type'] = subjectType;
            }

            if (permission) {
                localVarQueryParameter['permission'] = permission;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a recipe tag by name and tag
         * @summary Get a recipe tag
         * @param {string} owner 
         * @param {string} name 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeByTag: async (owner: string, name: string, tag: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getRecipeByTag.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getRecipeByTag.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag','Required parameter tag was null or undefined when calling getRecipeByTag.');
            }
            const localVarPath = `/recipes/{owner}/{name}/tags/{tag}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a recipe by name
         * @summary Get a recipe tags
         * @param {string} owner 
         * @param {string} name 
         * @param {PackageSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecipeTags: async (owner: string, name: string, sortBy?: PackageSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listRecipeTags.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listRecipeTags.');
            }
            const localVarPath = `/recipes/{owner}/{name}/tags`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List recipes
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [keyword] A keyword to index the repository by
         * @param {Array<string>} [permission] Filter by permission on given resource
         * @param {RepositorySortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecipes: async (search?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, sortBy?: RepositorySortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (search) {
                localVarQueryParameter['search'] = search;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (owner) {
                localVarQueryParameter['owner'] = owner;
            }

            if (_public !== undefined) {
                localVarQueryParameter['public'] = _public;
            }

            if (keyword) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (permission) {
                localVarQueryParameter['permission'] = permission;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a recipe (must have `contribute` permission)
         * @summary Update a Recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryUpdate} repositoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipe: async (owner: string, name: string, repositoryUpdate: RepositoryUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateRecipe.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateRecipe.');
            }
            // verify required parameter 'repositoryUpdate' is not null or undefined
            if (repositoryUpdate === null || repositoryUpdate === undefined) {
                throw new RequiredError('repositoryUpdate','Required parameter repositoryUpdate was null or undefined when calling updateRecipe.');
            }
            const localVarPath = `/recipes/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof repositoryUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(repositoryUpdate !== undefined ? repositoryUpdate : {}) : (repositoryUpdate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upsert a recipe\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertRecipePermission: async (owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling upsertRecipePermission.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling upsertRecipePermission.');
            }
            // verify required parameter 'repositoryAccessPolicy' is not null or undefined
            if (repositoryAccessPolicy === null || repositoryAccessPolicy === undefined) {
                throw new RequiredError('repositoryAccessPolicy','Required parameter repositoryAccessPolicy was null or undefined when calling upsertRecipePermission.');
            }
            const localVarPath = `/recipes/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof repositoryAccessPolicy !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(repositoryAccessPolicy !== undefined ? repositoryAccessPolicy : {}) : (repositoryAccessPolicy || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipesApi - functional programming interface
 * @export
 */
export const RecipesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new recipe.
         * @summary Create a Recipe
         * @param {string} owner 
         * @param {RepositoryCreate} repositoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecipe(owner: string, repositoryCreate: RepositoryCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).createRecipe(owner, repositoryCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new recipe package version
         * @summary Create a new Recipe package
         * @param {string} owner 
         * @param {string} name 
         * @param {NewRecipePackage} newRecipePackage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecipePackage(owner: string, name: string, newRecipePackage: NewRecipePackage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).createRecipePackage(owner, name, newRecipePackage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a recipe (must have `admin` permission)
         * @summary Delete a Recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipe(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).deleteRecipe(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a recipe\'s access policy (must have `admin` permission)
         * @summary Remove a Repository permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryPolicySubject} repositoryPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipeOrgPermission(owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).deleteRecipeOrgPermission(owner, name, repositoryPolicySubject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a recipe by name
         * @summary Get a recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipe(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).getRecipe(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a recipe\'s access permissions (must have `write` permission)
         * @summary Get recipe access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeAccessPermissions(owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryAccessPolicyList>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).getRecipeAccessPermissions(owner, name, page, perPage, subjectType, permission, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a recipe tag by name and tag
         * @summary Get a recipe tag
         * @param {string} owner 
         * @param {string} name 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeByTag(owner: string, name: string, tag: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipePackage>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).getRecipeByTag(owner, name, tag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a recipe by name
         * @summary Get a recipe tags
         * @param {string} owner 
         * @param {string} name 
         * @param {PackageSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRecipeTags(owner: string, name: string, sortBy?: PackageSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipePackageList>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).listRecipeTags(owner, name, sortBy, sortOrder, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List recipes
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [keyword] A keyword to index the repository by
         * @param {Array<string>} [permission] Filter by permission on given resource
         * @param {RepositorySortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRecipes(search?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, sortBy?: RepositorySortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).listRecipes(search, name, owner, _public, keyword, permission, sortBy, sortOrder, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a recipe (must have `contribute` permission)
         * @summary Update a Recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryUpdate} repositoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecipe(owner: string, name: string, repositoryUpdate: RepositoryUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).updateRecipe(owner, name, repositoryUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upsert a recipe\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertRecipePermission(owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await RecipesApiAxiosParamCreator(configuration).upsertRecipePermission(owner, name, repositoryAccessPolicy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RecipesApi - factory interface
 * @export
 */
export const RecipesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new recipe.
         * @summary Create a Recipe
         * @param {string} owner 
         * @param {RepositoryCreate} repositoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipe(owner: string, repositoryCreate: RepositoryCreate, options?: any): AxiosPromise<CreatedContent> {
            return RecipesApiFp(configuration).createRecipe(owner, repositoryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new recipe package version
         * @summary Create a new Recipe package
         * @param {string} owner 
         * @param {string} name 
         * @param {NewRecipePackage} newRecipePackage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipePackage(owner: string, name: string, newRecipePackage: NewRecipePackage, options?: any): AxiosPromise<CreatedContent> {
            return RecipesApiFp(configuration).createRecipePackage(owner, name, newRecipePackage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a recipe (must have `admin` permission)
         * @summary Delete a Recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipe(owner: string, name: string, options?: any): AxiosPromise<void> {
            return RecipesApiFp(configuration).deleteRecipe(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a recipe\'s access policy (must have `admin` permission)
         * @summary Remove a Repository permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryPolicySubject} repositoryPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipeOrgPermission(owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options?: any): AxiosPromise<void> {
            return RecipesApiFp(configuration).deleteRecipeOrgPermission(owner, name, repositoryPolicySubject, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a recipe by name
         * @summary Get a recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipe(owner: string, name: string, options?: any): AxiosPromise<Repository> {
            return RecipesApiFp(configuration).getRecipe(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a recipe\'s access permissions (must have `write` permission)
         * @summary Get recipe access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeAccessPermissions(owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any): AxiosPromise<RepositoryAccessPolicyList> {
            return RecipesApiFp(configuration).getRecipeAccessPermissions(owner, name, page, perPage, subjectType, permission, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a recipe tag by name and tag
         * @summary Get a recipe tag
         * @param {string} owner 
         * @param {string} name 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeByTag(owner: string, name: string, tag: string, options?: any): AxiosPromise<RecipePackage> {
            return RecipesApiFp(configuration).getRecipeByTag(owner, name, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a recipe by name
         * @summary Get a recipe tags
         * @param {string} owner 
         * @param {string} name 
         * @param {PackageSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecipeTags(owner: string, name: string, sortBy?: PackageSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: any): AxiosPromise<RecipePackageList> {
            return RecipesApiFp(configuration).listRecipeTags(owner, name, sortBy, sortOrder, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List recipes
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [keyword] A keyword to index the repository by
         * @param {Array<string>} [permission] Filter by permission on given resource
         * @param {RepositorySortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecipes(search?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, sortBy?: RepositorySortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: any): AxiosPromise<RepositoryList> {
            return RecipesApiFp(configuration).listRecipes(search, name, owner, _public, keyword, permission, sortBy, sortOrder, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a recipe (must have `contribute` permission)
         * @summary Update a Recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryUpdate} repositoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipe(owner: string, name: string, repositoryUpdate: RepositoryUpdate, options?: any): AxiosPromise<UpdateAccepted> {
            return RecipesApiFp(configuration).updateRecipe(owner, name, repositoryUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Upsert a recipe\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a recipe
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertRecipePermission(owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options?: any): AxiosPromise<UpdateAccepted> {
            return RecipesApiFp(configuration).upsertRecipePermission(owner, name, repositoryAccessPolicy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRecipe operation in RecipesApi.
 * @export
 * @interface RecipesApiCreateRecipeRequest
 */
export interface RecipesApiCreateRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiCreateRecipe
     */
    readonly owner: string

    /**
     * 
     * @type {RepositoryCreate}
     * @memberof RecipesApiCreateRecipe
     */
    readonly repositoryCreate: RepositoryCreate
}

/**
 * Request parameters for createRecipePackage operation in RecipesApi.
 * @export
 * @interface RecipesApiCreateRecipePackageRequest
 */
export interface RecipesApiCreateRecipePackageRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiCreateRecipePackage
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiCreateRecipePackage
     */
    readonly name: string

    /**
     * 
     * @type {NewRecipePackage}
     * @memberof RecipesApiCreateRecipePackage
     */
    readonly newRecipePackage: NewRecipePackage
}

/**
 * Request parameters for deleteRecipe operation in RecipesApi.
 * @export
 * @interface RecipesApiDeleteRecipeRequest
 */
export interface RecipesApiDeleteRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiDeleteRecipe
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiDeleteRecipe
     */
    readonly name: string
}

/**
 * Request parameters for deleteRecipeOrgPermission operation in RecipesApi.
 * @export
 * @interface RecipesApiDeleteRecipeOrgPermissionRequest
 */
export interface RecipesApiDeleteRecipeOrgPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiDeleteRecipeOrgPermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiDeleteRecipeOrgPermission
     */
    readonly name: string

    /**
     * 
     * @type {RepositoryPolicySubject}
     * @memberof RecipesApiDeleteRecipeOrgPermission
     */
    readonly repositoryPolicySubject: RepositoryPolicySubject
}

/**
 * Request parameters for getRecipe operation in RecipesApi.
 * @export
 * @interface RecipesApiGetRecipeRequest
 */
export interface RecipesApiGetRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiGetRecipe
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiGetRecipe
     */
    readonly name: string
}

/**
 * Request parameters for getRecipeAccessPermissions operation in RecipesApi.
 * @export
 * @interface RecipesApiGetRecipeAccessPermissionsRequest
 */
export interface RecipesApiGetRecipeAccessPermissionsRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiGetRecipeAccessPermissions
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiGetRecipeAccessPermissions
     */
    readonly name: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof RecipesApiGetRecipeAccessPermissions
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof RecipesApiGetRecipeAccessPermissions
     */
    readonly perPage?: number

    /**
     * The type of access policy subject
     * @type {Array<string>}
     * @memberof RecipesApiGetRecipeAccessPermissions
     */
    readonly subjectType?: Array<string>

    /**
     * An access policy permission string
     * @type {Array<string>}
     * @memberof RecipesApiGetRecipeAccessPermissions
     */
    readonly permission?: Array<string>
}

/**
 * Request parameters for getRecipeByTag operation in RecipesApi.
 * @export
 * @interface RecipesApiGetRecipeByTagRequest
 */
export interface RecipesApiGetRecipeByTagRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiGetRecipeByTag
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiGetRecipeByTag
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiGetRecipeByTag
     */
    readonly tag: string
}

/**
 * Request parameters for listRecipeTags operation in RecipesApi.
 * @export
 * @interface RecipesApiListRecipeTagsRequest
 */
export interface RecipesApiListRecipeTagsRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiListRecipeTags
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiListRecipeTags
     */
    readonly name: string

    /**
     * Key to sort the list by
     * @type {PackageSortKey}
     * @memberof RecipesApiListRecipeTags
     */
    readonly sortBy?: PackageSortKey

    /**
     * The order to sort the list
     * @type {SortEnum}
     * @memberof RecipesApiListRecipeTags
     */
    readonly sortOrder?: SortEnum

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof RecipesApiListRecipeTags
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof RecipesApiListRecipeTags
     */
    readonly perPage?: number
}

/**
 * Request parameters for listRecipes operation in RecipesApi.
 * @export
 * @interface RecipesApiListRecipesRequest
 */
export interface RecipesApiListRecipesRequest {
    /**
     * You know, for search
     * @type {Array<string>}
     * @memberof RecipesApiListRecipes
     */
    readonly search?: Array<string>

    /**
     * The account name
     * @type {Array<string>}
     * @memberof RecipesApiListRecipes
     */
    readonly name?: Array<string>

    /**
     * Owner of the project
     * @type {Array<string>}
     * @memberof RecipesApiListRecipes
     */
    readonly owner?: Array<string>

    /**
     * Boolean check for public/private projects
     * @type {boolean}
     * @memberof RecipesApiListRecipes
     */
    readonly _public?: boolean

    /**
     * A keyword to index the repository by
     * @type {Array<string>}
     * @memberof RecipesApiListRecipes
     */
    readonly keyword?: Array<string>

    /**
     * Filter by permission on given resource
     * @type {Array<string>}
     * @memberof RecipesApiListRecipes
     */
    readonly permission?: Array<string>

    /**
     * Key to sort the list by
     * @type {RepositorySortKey}
     * @memberof RecipesApiListRecipes
     */
    readonly sortBy?: RepositorySortKey

    /**
     * The order to sort the list
     * @type {SortEnum}
     * @memberof RecipesApiListRecipes
     */
    readonly sortOrder?: SortEnum

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof RecipesApiListRecipes
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof RecipesApiListRecipes
     */
    readonly perPage?: number
}

/**
 * Request parameters for updateRecipe operation in RecipesApi.
 * @export
 * @interface RecipesApiUpdateRecipeRequest
 */
export interface RecipesApiUpdateRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiUpdateRecipe
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiUpdateRecipe
     */
    readonly name: string

    /**
     * 
     * @type {RepositoryUpdate}
     * @memberof RecipesApiUpdateRecipe
     */
    readonly repositoryUpdate: RepositoryUpdate
}

/**
 * Request parameters for upsertRecipePermission operation in RecipesApi.
 * @export
 * @interface RecipesApiUpsertRecipePermissionRequest
 */
export interface RecipesApiUpsertRecipePermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipesApiUpsertRecipePermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RecipesApiUpsertRecipePermission
     */
    readonly name: string

    /**
     * 
     * @type {RepositoryAccessPolicy}
     * @memberof RecipesApiUpsertRecipePermission
     */
    readonly repositoryAccessPolicy: RepositoryAccessPolicy
}

/**
 * RecipesApi - object-oriented interface
 * @export
 * @class RecipesApi
 * @extends {BaseAPI}
 */
export class RecipesApi extends BaseAPI {
    /**
     * Create a new recipe.
     * @summary Create a Recipe
     * @param {RecipesApiCreateRecipeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public createRecipe(requestParameters: RecipesApiCreateRecipeRequest, options?: any) {
        return RecipesApiFp(this.configuration).createRecipe(requestParameters.owner, requestParameters.repositoryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new recipe package version
     * @summary Create a new Recipe package
     * @param {RecipesApiCreateRecipePackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public createRecipePackage(requestParameters: RecipesApiCreateRecipePackageRequest, options?: any) {
        return RecipesApiFp(this.configuration).createRecipePackage(requestParameters.owner, requestParameters.name, requestParameters.newRecipePackage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a recipe (must have `admin` permission)
     * @summary Delete a Recipe
     * @param {RecipesApiDeleteRecipeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public deleteRecipe(requestParameters: RecipesApiDeleteRecipeRequest, options?: any) {
        return RecipesApiFp(this.configuration).deleteRecipe(requestParameters.owner, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a recipe\'s access policy (must have `admin` permission)
     * @summary Remove a Repository permissions
     * @param {RecipesApiDeleteRecipeOrgPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public deleteRecipeOrgPermission(requestParameters: RecipesApiDeleteRecipeOrgPermissionRequest, options?: any) {
        return RecipesApiFp(this.configuration).deleteRecipeOrgPermission(requestParameters.owner, requestParameters.name, requestParameters.repositoryPolicySubject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a recipe by name
     * @summary Get a recipe
     * @param {RecipesApiGetRecipeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getRecipe(requestParameters: RecipesApiGetRecipeRequest, options?: any) {
        return RecipesApiFp(this.configuration).getRecipe(requestParameters.owner, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a recipe\'s access permissions (must have `write` permission)
     * @summary Get recipe access permissions
     * @param {RecipesApiGetRecipeAccessPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getRecipeAccessPermissions(requestParameters: RecipesApiGetRecipeAccessPermissionsRequest, options?: any) {
        return RecipesApiFp(this.configuration).getRecipeAccessPermissions(requestParameters.owner, requestParameters.name, requestParameters.page, requestParameters.perPage, requestParameters.subjectType, requestParameters.permission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a recipe tag by name and tag
     * @summary Get a recipe tag
     * @param {RecipesApiGetRecipeByTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getRecipeByTag(requestParameters: RecipesApiGetRecipeByTagRequest, options?: any) {
        return RecipesApiFp(this.configuration).getRecipeByTag(requestParameters.owner, requestParameters.name, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a recipe by name
     * @summary Get a recipe tags
     * @param {RecipesApiListRecipeTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public listRecipeTags(requestParameters: RecipesApiListRecipeTagsRequest, options?: any) {
        return RecipesApiFp(this.configuration).listRecipeTags(requestParameters.owner, requestParameters.name, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List recipes
     * @param {RecipesApiListRecipesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public listRecipes(requestParameters: RecipesApiListRecipesRequest = {}, options?: any) {
        return RecipesApiFp(this.configuration).listRecipes(requestParameters.search, requestParameters.name, requestParameters.owner, requestParameters._public, requestParameters.keyword, requestParameters.permission, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a recipe (must have `contribute` permission)
     * @summary Update a Recipe
     * @param {RecipesApiUpdateRecipeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public updateRecipe(requestParameters: RecipesApiUpdateRecipeRequest, options?: any) {
        return RecipesApiFp(this.configuration).updateRecipe(requestParameters.owner, requestParameters.name, requestParameters.repositoryUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upsert a recipe\'s access policy (must have `admin` permission)
     * @summary Upsert a new permission to a recipe
     * @param {RecipesApiUpsertRecipePermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public upsertRecipePermission(requestParameters: RecipesApiUpsertRecipePermissionRequest, options?: any) {
        return RecipesApiFp(this.configuration).upsertRecipePermission(requestParameters.owner, requestParameters.name, requestParameters.repositoryAccessPolicy, options).then((request) => request(this.axios, this.basePath));
    }
}
