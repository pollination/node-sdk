/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.21.2
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActivationList } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LicensePoolAccessPolicy } from '../models';
// @ts-ignore
import { LicensePoolList } from '../models';
// @ts-ignore
import { LicensePoolPolicySubject } from '../models';
// @ts-ignore
import { LicensePoolPublic } from '../models';
// @ts-ignore
import { LicensePoolUpdate } from '../models';
// @ts-ignore
import { LicensePublic } from '../models';
/**
 * LicensesApi - axios parameter creator
 * @export
 */
export const LicensesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get license pools available to authenticated user
         * @summary Get Available Pools
         * @param {Array<string>} [owner] Owner of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailablePools: async (owner?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/licenses/pools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (owner) {
                localVarQueryParameter['owner'] = owner;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the activations for the license
         * @summary Get Activations
         * @param {string} poolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenseActivations: async (poolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolId' is not null or undefined
            if (poolId === null || poolId === undefined) {
                throw new RequiredError('poolId','Required parameter poolId was null or undefined when calling getLicenseActivations.');
            }
            const localVarPath = `/licenses/pools/{pool_id}/activations`
                .replace(`{${"pool_id"}}`, encodeURIComponent(String(poolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the license associated with a pool
         * @summary Get Pool License
         * @param {string} poolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolLicense: async (poolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolId' is not null or undefined
            if (poolId === null || poolId === undefined) {
                throw new RequiredError('poolId','Required parameter poolId was null or undefined when calling getPoolLicense.');
            }
            const localVarPath = `/licenses/pools/{pool_id}/license`
                .replace(`{${"pool_id"}}`, encodeURIComponent(String(poolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Grant access to the license pool
         * @summary Grant Pool Access
         * @param {string} poolId 
         * @param {LicensePoolAccessPolicy} licensePoolAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToPool: async (poolId: string, licensePoolAccessPolicy: LicensePoolAccessPolicy, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolId' is not null or undefined
            if (poolId === null || poolId === undefined) {
                throw new RequiredError('poolId','Required parameter poolId was null or undefined when calling grantAccessToPool.');
            }
            // verify required parameter 'licensePoolAccessPolicy' is not null or undefined
            if (licensePoolAccessPolicy === null || licensePoolAccessPolicy === undefined) {
                throw new RequiredError('licensePoolAccessPolicy','Required parameter licensePoolAccessPolicy was null or undefined when calling grantAccessToPool.');
            }
            const localVarPath = `/licenses/pools/{pool_id}/permissions`
                .replace(`{${"pool_id"}}`, encodeURIComponent(String(poolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof licensePoolAccessPolicy !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(licensePoolAccessPolicy !== undefined ? licensePoolAccessPolicy : {}) : (licensePoolAccessPolicy || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke access to the license pool
         * @summary Delete Pool Access
         * @param {string} poolId 
         * @param {LicensePoolPolicySubject} licensePoolPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccessToPool: async (poolId: string, licensePoolPolicySubject: LicensePoolPolicySubject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolId' is not null or undefined
            if (poolId === null || poolId === undefined) {
                throw new RequiredError('poolId','Required parameter poolId was null or undefined when calling revokeAccessToPool.');
            }
            // verify required parameter 'licensePoolPolicySubject' is not null or undefined
            if (licensePoolPolicySubject === null || licensePoolPolicySubject === undefined) {
                throw new RequiredError('licensePoolPolicySubject','Required parameter licensePoolPolicySubject was null or undefined when calling revokeAccessToPool.');
            }
            const localVarPath = `/licenses/pools/{pool_id}/permissions`
                .replace(`{${"pool_id"}}`, encodeURIComponent(String(poolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof licensePoolPolicySubject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(licensePoolPolicySubject !== undefined ? licensePoolPolicySubject : {}) : (licensePoolPolicySubject || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the license pool
         * @summary Update Pool
         * @param {string} poolId 
         * @param {LicensePoolUpdate} licensePoolUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLicensePool: async (poolId: string, licensePoolUpdate: LicensePoolUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolId' is not null or undefined
            if (poolId === null || poolId === undefined) {
                throw new RequiredError('poolId','Required parameter poolId was null or undefined when calling updateLicensePool.');
            }
            // verify required parameter 'licensePoolUpdate' is not null or undefined
            if (licensePoolUpdate === null || licensePoolUpdate === undefined) {
                throw new RequiredError('licensePoolUpdate','Required parameter licensePoolUpdate was null or undefined when calling updateLicensePool.');
            }
            const localVarPath = `/licenses/pools/{pool_id}`
                .replace(`{${"pool_id"}}`, encodeURIComponent(String(poolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof licensePoolUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(licensePoolUpdate !== undefined ? licensePoolUpdate : {}) : (licensePoolUpdate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LicensesApi - functional programming interface
 * @export
 */
export const LicensesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get license pools available to authenticated user
         * @summary Get Available Pools
         * @param {Array<string>} [owner] Owner of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailablePools(owner?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicensePoolList>> {
            const localVarAxiosArgs = await LicensesApiAxiosParamCreator(configuration).getAvailablePools(owner, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the activations for the license
         * @summary Get Activations
         * @param {string} poolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLicenseActivations(poolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivationList>> {
            const localVarAxiosArgs = await LicensesApiAxiosParamCreator(configuration).getLicenseActivations(poolId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the license associated with a pool
         * @summary Get Pool License
         * @param {string} poolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPoolLicense(poolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicensePublic>> {
            const localVarAxiosArgs = await LicensesApiAxiosParamCreator(configuration).getPoolLicense(poolId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Grant access to the license pool
         * @summary Grant Pool Access
         * @param {string} poolId 
         * @param {LicensePoolAccessPolicy} licensePoolAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantAccessToPool(poolId: string, licensePoolAccessPolicy: LicensePoolAccessPolicy, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicensePoolPublic>> {
            const localVarAxiosArgs = await LicensesApiAxiosParamCreator(configuration).grantAccessToPool(poolId, licensePoolAccessPolicy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Revoke access to the license pool
         * @summary Delete Pool Access
         * @param {string} poolId 
         * @param {LicensePoolPolicySubject} licensePoolPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeAccessToPool(poolId: string, licensePoolPolicySubject: LicensePoolPolicySubject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicensePoolPublic>> {
            const localVarAxiosArgs = await LicensesApiAxiosParamCreator(configuration).revokeAccessToPool(poolId, licensePoolPolicySubject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the license pool
         * @summary Update Pool
         * @param {string} poolId 
         * @param {LicensePoolUpdate} licensePoolUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLicensePool(poolId: string, licensePoolUpdate: LicensePoolUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await LicensesApiAxiosParamCreator(configuration).updateLicensePool(poolId, licensePoolUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LicensesApi - factory interface
 * @export
 */
export const LicensesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get license pools available to authenticated user
         * @summary Get Available Pools
         * @param {Array<string>} [owner] Owner of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailablePools(owner?: Array<string>, options?: any): AxiosPromise<LicensePoolList> {
            return LicensesApiFp(configuration).getAvailablePools(owner, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the activations for the license
         * @summary Get Activations
         * @param {string} poolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenseActivations(poolId: string, options?: any): AxiosPromise<ActivationList> {
            return LicensesApiFp(configuration).getLicenseActivations(poolId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the license associated with a pool
         * @summary Get Pool License
         * @param {string} poolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolLicense(poolId: string, options?: any): AxiosPromise<LicensePublic> {
            return LicensesApiFp(configuration).getPoolLicense(poolId, options).then((request) => request(axios, basePath));
        },
        /**
         * Grant access to the license pool
         * @summary Grant Pool Access
         * @param {string} poolId 
         * @param {LicensePoolAccessPolicy} licensePoolAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToPool(poolId: string, licensePoolAccessPolicy: LicensePoolAccessPolicy, options?: any): AxiosPromise<LicensePoolPublic> {
            return LicensesApiFp(configuration).grantAccessToPool(poolId, licensePoolAccessPolicy, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke access to the license pool
         * @summary Delete Pool Access
         * @param {string} poolId 
         * @param {LicensePoolPolicySubject} licensePoolPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccessToPool(poolId: string, licensePoolPolicySubject: LicensePoolPolicySubject, options?: any): AxiosPromise<LicensePoolPublic> {
            return LicensesApiFp(configuration).revokeAccessToPool(poolId, licensePoolPolicySubject, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the license pool
         * @summary Update Pool
         * @param {string} poolId 
         * @param {LicensePoolUpdate} licensePoolUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLicensePool(poolId: string, licensePoolUpdate: LicensePoolUpdate, options?: any): AxiosPromise<any> {
            return LicensesApiFp(configuration).updateLicensePool(poolId, licensePoolUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAvailablePools operation in LicensesApi.
 * @export
 * @interface LicensesApiGetAvailablePoolsRequest
 */
export interface LicensesApiGetAvailablePoolsRequest {
    /**
     * Owner of the project
     * @type {Array<string>}
     * @memberof LicensesApiGetAvailablePools
     */
    readonly owner?: Array<string>
}

/**
 * Request parameters for getLicenseActivations operation in LicensesApi.
 * @export
 * @interface LicensesApiGetLicenseActivationsRequest
 */
export interface LicensesApiGetLicenseActivationsRequest {
    /**
     * 
     * @type {string}
     * @memberof LicensesApiGetLicenseActivations
     */
    readonly poolId: string
}

/**
 * Request parameters for getPoolLicense operation in LicensesApi.
 * @export
 * @interface LicensesApiGetPoolLicenseRequest
 */
export interface LicensesApiGetPoolLicenseRequest {
    /**
     * 
     * @type {string}
     * @memberof LicensesApiGetPoolLicense
     */
    readonly poolId: string
}

/**
 * Request parameters for grantAccessToPool operation in LicensesApi.
 * @export
 * @interface LicensesApiGrantAccessToPoolRequest
 */
export interface LicensesApiGrantAccessToPoolRequest {
    /**
     * 
     * @type {string}
     * @memberof LicensesApiGrantAccessToPool
     */
    readonly poolId: string

    /**
     * 
     * @type {LicensePoolAccessPolicy}
     * @memberof LicensesApiGrantAccessToPool
     */
    readonly licensePoolAccessPolicy: LicensePoolAccessPolicy
}

/**
 * Request parameters for revokeAccessToPool operation in LicensesApi.
 * @export
 * @interface LicensesApiRevokeAccessToPoolRequest
 */
export interface LicensesApiRevokeAccessToPoolRequest {
    /**
     * 
     * @type {string}
     * @memberof LicensesApiRevokeAccessToPool
     */
    readonly poolId: string

    /**
     * 
     * @type {LicensePoolPolicySubject}
     * @memberof LicensesApiRevokeAccessToPool
     */
    readonly licensePoolPolicySubject: LicensePoolPolicySubject
}

/**
 * Request parameters for updateLicensePool operation in LicensesApi.
 * @export
 * @interface LicensesApiUpdateLicensePoolRequest
 */
export interface LicensesApiUpdateLicensePoolRequest {
    /**
     * 
     * @type {string}
     * @memberof LicensesApiUpdateLicensePool
     */
    readonly poolId: string

    /**
     * 
     * @type {LicensePoolUpdate}
     * @memberof LicensesApiUpdateLicensePool
     */
    readonly licensePoolUpdate: LicensePoolUpdate
}

/**
 * LicensesApi - object-oriented interface
 * @export
 * @class LicensesApi
 * @extends {BaseAPI}
 */
export class LicensesApi extends BaseAPI {
    /**
     * Get license pools available to authenticated user
     * @summary Get Available Pools
     * @param {LicensesApiGetAvailablePoolsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensesApi
     */
    public getAvailablePools(requestParameters: LicensesApiGetAvailablePoolsRequest = {}, options?: any) {
        return LicensesApiFp(this.configuration).getAvailablePools(requestParameters.owner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the activations for the license
     * @summary Get Activations
     * @param {LicensesApiGetLicenseActivationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensesApi
     */
    public getLicenseActivations(requestParameters: LicensesApiGetLicenseActivationsRequest, options?: any) {
        return LicensesApiFp(this.configuration).getLicenseActivations(requestParameters.poolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the license associated with a pool
     * @summary Get Pool License
     * @param {LicensesApiGetPoolLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensesApi
     */
    public getPoolLicense(requestParameters: LicensesApiGetPoolLicenseRequest, options?: any) {
        return LicensesApiFp(this.configuration).getPoolLicense(requestParameters.poolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Grant access to the license pool
     * @summary Grant Pool Access
     * @param {LicensesApiGrantAccessToPoolRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensesApi
     */
    public grantAccessToPool(requestParameters: LicensesApiGrantAccessToPoolRequest, options?: any) {
        return LicensesApiFp(this.configuration).grantAccessToPool(requestParameters.poolId, requestParameters.licensePoolAccessPolicy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke access to the license pool
     * @summary Delete Pool Access
     * @param {LicensesApiRevokeAccessToPoolRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensesApi
     */
    public revokeAccessToPool(requestParameters: LicensesApiRevokeAccessToPoolRequest, options?: any) {
        return LicensesApiFp(this.configuration).revokeAccessToPool(requestParameters.poolId, requestParameters.licensePoolPolicySubject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the license pool
     * @summary Update Pool
     * @param {LicensesApiUpdateLicensePoolRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensesApi
     */
    public updateLicensePool(requestParameters: LicensesApiUpdateLicensePoolRequest, options?: any) {
        return LicensesApiFp(this.configuration).updateLicensePool(requestParameters.poolId, requestParameters.licensePoolUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
