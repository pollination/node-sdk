/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.17.0-staging
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Inventory } from '../models';
// @ts-ignore
import { PaymentCreate } from '../models';
// @ts-ignore
import { PaymentMethodList } from '../models';
// @ts-ignore
import { PaymentSetup } from '../models';
// @ts-ignore
import { Subscription } from '../models';
// @ts-ignore
import { SubscriptionCreate } from '../models';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Payment Method
         * @param {string} accountName 
         * @param {PaymentCreate} paymentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentMethodPaymentsAccountNameMethodsPost: async (accountName: string, paymentCreate: PaymentCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountName' is not null or undefined
            if (accountName === null || accountName === undefined) {
                throw new RequiredError('accountName','Required parameter accountName was null or undefined when calling addPaymentMethodPaymentsAccountNameMethodsPost.');
            }
            // verify required parameter 'paymentCreate' is not null or undefined
            if (paymentCreate === null || paymentCreate === undefined) {
                throw new RequiredError('paymentCreate','Required parameter paymentCreate was null or undefined when calling addPaymentMethodPaymentsAccountNameMethodsPost.');
            }
            const localVarPath = `/payments/{account_name}/methods`
                .replace(`{${"account_name"}}`, encodeURIComponent(String(accountName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof paymentCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(paymentCreate !== undefined ? paymentCreate : {}) : (paymentCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Subscription
         * @param {string} accountName 
         * @param {SubscriptionCreate} subscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptionPaymentsAccountNameSubscriptionPost: async (accountName: string, subscriptionCreate: SubscriptionCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountName' is not null or undefined
            if (accountName === null || accountName === undefined) {
                throw new RequiredError('accountName','Required parameter accountName was null or undefined when calling createSubscriptionPaymentsAccountNameSubscriptionPost.');
            }
            // verify required parameter 'subscriptionCreate' is not null or undefined
            if (subscriptionCreate === null || subscriptionCreate === undefined) {
                throw new RequiredError('subscriptionCreate','Required parameter subscriptionCreate was null or undefined when calling createSubscriptionPaymentsAccountNameSubscriptionPost.');
            }
            const localVarPath = `/payments/{account_name}/subscription`
                .replace(`{${"account_name"}}`, encodeURIComponent(String(accountName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof subscriptionCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(subscriptionCreate !== undefined ? subscriptionCreate : {}) : (subscriptionCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventoryPaymentsInventoryGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Payment Methods
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsPaymentsAccountNameMethodsGet: async (accountName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountName' is not null or undefined
            if (accountName === null || accountName === undefined) {
                throw new RequiredError('accountName','Required parameter accountName was null or undefined when calling getPaymentMethodsPaymentsAccountNameMethodsGet.');
            }
            const localVarPath = `/payments/{account_name}/methods`
                .replace(`{${"account_name"}}`, encodeURIComponent(String(accountName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subscription
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionPaymentsAccountNameSubscriptionGet: async (accountName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountName' is not null or undefined
            if (accountName === null || accountName === undefined) {
                throw new RequiredError('accountName','Required parameter accountName was null or undefined when calling getSubscriptionPaymentsAccountNameSubscriptionGet.');
            }
            const localVarPath = `/payments/{account_name}/subscription`
                .replace(`{${"account_name"}}`, encodeURIComponent(String(accountName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Payment Method
         * @param {string} accountName 
         * @param {PaymentCreate} paymentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPaymentMethodPaymentsAccountNameMethodsPost(accountName: string, paymentCreate: PaymentCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentSetup>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).addPaymentMethodPaymentsAccountNameMethodsPost(accountName, paymentCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Subscription
         * @param {string} accountName 
         * @param {SubscriptionCreate} subscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscriptionPaymentsAccountNameSubscriptionPost(accountName: string, subscriptionCreate: SubscriptionCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).createSubscriptionPaymentsAccountNameSubscriptionPost(accountName, subscriptionCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInventoryPaymentsInventoryGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inventory>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).getInventoryPaymentsInventoryGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Payment Methods
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethodsPaymentsAccountNameMethodsGet(accountName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethodList>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).getPaymentMethodsPaymentsAccountNameMethodsGet(accountName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Subscription
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionPaymentsAccountNameSubscriptionGet(accountName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).getSubscriptionPaymentsAccountNameSubscriptionGet(accountName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add Payment Method
         * @param {string} accountName 
         * @param {PaymentCreate} paymentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentMethodPaymentsAccountNameMethodsPost(accountName: string, paymentCreate: PaymentCreate, options?: any): AxiosPromise<PaymentSetup> {
            return PaymentsApiFp(configuration).addPaymentMethodPaymentsAccountNameMethodsPost(accountName, paymentCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Subscription
         * @param {string} accountName 
         * @param {SubscriptionCreate} subscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptionPaymentsAccountNameSubscriptionPost(accountName: string, subscriptionCreate: SubscriptionCreate, options?: any): AxiosPromise<CreatedContent> {
            return PaymentsApiFp(configuration).createSubscriptionPaymentsAccountNameSubscriptionPost(accountName, subscriptionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventoryPaymentsInventoryGet(options?: any): AxiosPromise<Inventory> {
            return PaymentsApiFp(configuration).getInventoryPaymentsInventoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Payment Methods
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsPaymentsAccountNameMethodsGet(accountName: string, options?: any): AxiosPromise<PaymentMethodList> {
            return PaymentsApiFp(configuration).getPaymentMethodsPaymentsAccountNameMethodsGet(accountName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subscription
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionPaymentsAccountNameSubscriptionGet(accountName: string, options?: any): AxiosPromise<Subscription> {
            return PaymentsApiFp(configuration).getSubscriptionPaymentsAccountNameSubscriptionGet(accountName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPaymentMethodPaymentsAccountNameMethodsPost operation in PaymentsApi.
 * @export
 * @interface PaymentsApiAddPaymentMethodPaymentsAccountNameMethodsPostRequest
 */
export interface PaymentsApiAddPaymentMethodPaymentsAccountNameMethodsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiAddPaymentMethodPaymentsAccountNameMethodsPost
     */
    readonly accountName: string

    /**
     * 
     * @type {PaymentCreate}
     * @memberof PaymentsApiAddPaymentMethodPaymentsAccountNameMethodsPost
     */
    readonly paymentCreate: PaymentCreate
}

/**
 * Request parameters for createSubscriptionPaymentsAccountNameSubscriptionPost operation in PaymentsApi.
 * @export
 * @interface PaymentsApiCreateSubscriptionPaymentsAccountNameSubscriptionPostRequest
 */
export interface PaymentsApiCreateSubscriptionPaymentsAccountNameSubscriptionPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiCreateSubscriptionPaymentsAccountNameSubscriptionPost
     */
    readonly accountName: string

    /**
     * 
     * @type {SubscriptionCreate}
     * @memberof PaymentsApiCreateSubscriptionPaymentsAccountNameSubscriptionPost
     */
    readonly subscriptionCreate: SubscriptionCreate
}

/**
 * Request parameters for getPaymentMethodsPaymentsAccountNameMethodsGet operation in PaymentsApi.
 * @export
 * @interface PaymentsApiGetPaymentMethodsPaymentsAccountNameMethodsGetRequest
 */
export interface PaymentsApiGetPaymentMethodsPaymentsAccountNameMethodsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiGetPaymentMethodsPaymentsAccountNameMethodsGet
     */
    readonly accountName: string
}

/**
 * Request parameters for getSubscriptionPaymentsAccountNameSubscriptionGet operation in PaymentsApi.
 * @export
 * @interface PaymentsApiGetSubscriptionPaymentsAccountNameSubscriptionGetRequest
 */
export interface PaymentsApiGetSubscriptionPaymentsAccountNameSubscriptionGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiGetSubscriptionPaymentsAccountNameSubscriptionGet
     */
    readonly accountName: string
}

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * 
     * @summary Add Payment Method
     * @param {PaymentsApiAddPaymentMethodPaymentsAccountNameMethodsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public addPaymentMethodPaymentsAccountNameMethodsPost(requestParameters: PaymentsApiAddPaymentMethodPaymentsAccountNameMethodsPostRequest, options?: any) {
        return PaymentsApiFp(this.configuration).addPaymentMethodPaymentsAccountNameMethodsPost(requestParameters.accountName, requestParameters.paymentCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Subscription
     * @param {PaymentsApiCreateSubscriptionPaymentsAccountNameSubscriptionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public createSubscriptionPaymentsAccountNameSubscriptionPost(requestParameters: PaymentsApiCreateSubscriptionPaymentsAccountNameSubscriptionPostRequest, options?: any) {
        return PaymentsApiFp(this.configuration).createSubscriptionPaymentsAccountNameSubscriptionPost(requestParameters.accountName, requestParameters.subscriptionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Inventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public getInventoryPaymentsInventoryGet(options?: any) {
        return PaymentsApiFp(this.configuration).getInventoryPaymentsInventoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Payment Methods
     * @param {PaymentsApiGetPaymentMethodsPaymentsAccountNameMethodsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public getPaymentMethodsPaymentsAccountNameMethodsGet(requestParameters: PaymentsApiGetPaymentMethodsPaymentsAccountNameMethodsGetRequest, options?: any) {
        return PaymentsApiFp(this.configuration).getPaymentMethodsPaymentsAccountNameMethodsGet(requestParameters.accountName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subscription
     * @param {PaymentsApiGetSubscriptionPaymentsAccountNameSubscriptionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public getSubscriptionPaymentsAccountNameSubscriptionGet(requestParameters: PaymentsApiGetSubscriptionPaymentsAccountNameSubscriptionGetRequest, options?: any) {
        return PaymentsApiFp(this.configuration).getSubscriptionPaymentsAccountNameSubscriptionGet(requestParameters.accountName, options).then((request) => request(this.axios, this.basePath));
    }
}
