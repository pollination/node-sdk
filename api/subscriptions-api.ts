/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.8.8
 * Contact: info@pollination.solutions
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AppServerRestSubscriptionsDtoPayLink } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { Payment } from '../models';
// @ts-ignore
import type { Quota } from '../models';
// @ts-ignore
import type { Subscription } from '../models';
// @ts-ignore
import type { SubscriptionCreate } from '../models';
// @ts-ignore
import type { SubscriptionUpdate } from '../models';
// @ts-ignore
import type { SubscriptionUpdateDryRun } from '../models';
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export const SubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel a subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: async (subscriptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('cancelSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Subscribe account to subscritpion plan
         * @param {SubscriptionCreate} subscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: async (subscriptionCreate: SubscriptionCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionCreate' is not null or undefined
            assertParamExists('createSubscription', 'subscriptionCreate', subscriptionCreate)
            const localVarPath = `/subscriptions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a subscription by ID
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (subscriptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Subscriptions
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPollinationSubscriptions: async (account?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Payment for a Subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionPayments: async (subscriptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('listSubscriptionPayments', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}/payments`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List the quotas for a given subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionQuotas: async (subscriptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('listSubscriptionQuotas', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}/quotas`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a subscription
         * @param {string} subscriptionId 
         * @param {SubscriptionUpdate} subscriptionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: async (subscriptionId: string, subscriptionUpdate: SubscriptionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('updateSubscription', 'subscriptionId', subscriptionId)
            // verify required parameter 'subscriptionUpdate' is not null or undefined
            assertParamExists('updateSubscription', 'subscriptionUpdate', subscriptionUpdate)
            const localVarPath = `/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Preview the effect of a subscription update
         * @param {string} subscriptionId 
         * @param {SubscriptionUpdate} subscriptionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionPreivew: async (subscriptionId: string, subscriptionUpdate: SubscriptionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('updateSubscriptionPreivew', 'subscriptionId', subscriptionId)
            // verify required parameter 'subscriptionUpdate' is not null or undefined
            assertParamExists('updateSubscriptionPreivew', 'subscriptionUpdate', subscriptionUpdate)
            const localVarPath = `/subscriptions/{subscription_id}/preview`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export const SubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancel a subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSubscription(subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSubscription(subscriptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionsApi.cancelSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Subscribe account to subscritpion plan
         * @param {SubscriptionCreate} subscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(subscriptionCreate: SubscriptionCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppServerRestSubscriptionsDtoPayLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscription(subscriptionCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionsApi.createSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a subscription by ID
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscription(subscriptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionsApi.getSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Subscriptions
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPollinationSubscriptions(account?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPollinationSubscriptions(account, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionsApi.listPollinationSubscriptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Payment for a Subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionPayments(subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionPayments(subscriptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionsApi.listSubscriptionPayments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List the quotas for a given subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionQuotas(subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Quota>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionQuotas(subscriptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionsApi.listSubscriptionQuotas']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a subscription
         * @param {string} subscriptionId 
         * @param {SubscriptionUpdate} subscriptionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscription(subscriptionId: string, subscriptionUpdate: SubscriptionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscription(subscriptionId, subscriptionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionsApi.updateSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Preview the effect of a subscription update
         * @param {string} subscriptionId 
         * @param {SubscriptionUpdate} subscriptionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscriptionPreivew(subscriptionId: string, subscriptionUpdate: SubscriptionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionUpdateDryRun>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscriptionPreivew(subscriptionId, subscriptionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionsApi.updateSubscriptionPreivew']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubscriptionsApi - factory interface
 * @export
 */
export const SubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancel a subscription
         * @param {SubscriptionsApiCancelSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription(requestParameters: SubscriptionsApiCancelSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.cancelSubscription(requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Subscribe account to subscritpion plan
         * @param {SubscriptionsApiCreateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(requestParameters: SubscriptionsApiCreateSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppServerRestSubscriptionsDtoPayLink> {
            return localVarFp.createSubscription(requestParameters.subscriptionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a subscription by ID
         * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(requestParameters: SubscriptionsApiGetSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.getSubscription(requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Subscriptions
         * @param {SubscriptionsApiListPollinationSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPollinationSubscriptions(requestParameters: SubscriptionsApiListPollinationSubscriptionsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Subscription>> {
            return localVarFp.listPollinationSubscriptions(requestParameters.account, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Payment for a Subscription
         * @param {SubscriptionsApiListSubscriptionPaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionPayments(requestParameters: SubscriptionsApiListSubscriptionPaymentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Payment>> {
            return localVarFp.listSubscriptionPayments(requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List the quotas for a given subscription
         * @param {SubscriptionsApiListSubscriptionQuotasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionQuotas(requestParameters: SubscriptionsApiListSubscriptionQuotasRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Quota>> {
            return localVarFp.listSubscriptionQuotas(requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a subscription
         * @param {SubscriptionsApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(requestParameters: SubscriptionsApiUpdateSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.updateSubscription(requestParameters.subscriptionId, requestParameters.subscriptionUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Preview the effect of a subscription update
         * @param {SubscriptionsApiUpdateSubscriptionPreivewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionPreivew(requestParameters: SubscriptionsApiUpdateSubscriptionPreivewRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionUpdateDryRun> {
            return localVarFp.updateSubscriptionPreivew(requestParameters.subscriptionId, requestParameters.subscriptionUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiCancelSubscriptionRequest
 */
export interface SubscriptionsApiCancelSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiCancelSubscription
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for createSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiCreateSubscriptionRequest
 */
export interface SubscriptionsApiCreateSubscriptionRequest {
    /**
     * 
     * @type {SubscriptionCreate}
     * @memberof SubscriptionsApiCreateSubscription
     */
    readonly subscriptionCreate: SubscriptionCreate
}

/**
 * Request parameters for getSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetSubscriptionRequest
 */
export interface SubscriptionsApiGetSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiGetSubscription
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for listPollinationSubscriptions operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiListPollinationSubscriptionsRequest
 */
export interface SubscriptionsApiListPollinationSubscriptionsRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiListPollinationSubscriptions
     */
    readonly account?: string
}

/**
 * Request parameters for listSubscriptionPayments operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiListSubscriptionPaymentsRequest
 */
export interface SubscriptionsApiListSubscriptionPaymentsRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptionPayments
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for listSubscriptionQuotas operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiListSubscriptionQuotasRequest
 */
export interface SubscriptionsApiListSubscriptionQuotasRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptionQuotas
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for updateSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiUpdateSubscriptionRequest
 */
export interface SubscriptionsApiUpdateSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiUpdateSubscription
     */
    readonly subscriptionId: string

    /**
     * 
     * @type {SubscriptionUpdate}
     * @memberof SubscriptionsApiUpdateSubscription
     */
    readonly subscriptionUpdate: SubscriptionUpdate
}

/**
 * Request parameters for updateSubscriptionPreivew operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiUpdateSubscriptionPreivewRequest
 */
export interface SubscriptionsApiUpdateSubscriptionPreivewRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiUpdateSubscriptionPreivew
     */
    readonly subscriptionId: string

    /**
     * 
     * @type {SubscriptionUpdate}
     * @memberof SubscriptionsApiUpdateSubscriptionPreivew
     */
    readonly subscriptionUpdate: SubscriptionUpdate
}

/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export class SubscriptionsApi extends BaseAPI {
    /**
     * 
     * @summary Cancel a subscription
     * @param {SubscriptionsApiCancelSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public cancelSubscription(requestParameters: SubscriptionsApiCancelSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).cancelSubscription(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Subscribe account to subscritpion plan
     * @param {SubscriptionsApiCreateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public createSubscription(requestParameters: SubscriptionsApiCreateSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).createSubscription(requestParameters.subscriptionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a subscription by ID
     * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public getSubscription(requestParameters: SubscriptionsApiGetSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getSubscription(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Subscriptions
     * @param {SubscriptionsApiListPollinationSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public listPollinationSubscriptions(requestParameters: SubscriptionsApiListPollinationSubscriptionsRequest = {}, options?: RawAxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).listPollinationSubscriptions(requestParameters.account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Payment for a Subscription
     * @param {SubscriptionsApiListSubscriptionPaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public listSubscriptionPayments(requestParameters: SubscriptionsApiListSubscriptionPaymentsRequest, options?: RawAxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).listSubscriptionPayments(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List the quotas for a given subscription
     * @param {SubscriptionsApiListSubscriptionQuotasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public listSubscriptionQuotas(requestParameters: SubscriptionsApiListSubscriptionQuotasRequest, options?: RawAxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).listSubscriptionQuotas(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a subscription
     * @param {SubscriptionsApiUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public updateSubscription(requestParameters: SubscriptionsApiUpdateSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).updateSubscription(requestParameters.subscriptionId, requestParameters.subscriptionUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Preview the effect of a subscription update
     * @param {SubscriptionsApiUpdateSubscriptionPreivewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public updateSubscriptionPreivew(requestParameters: SubscriptionsApiUpdateSubscriptionPreivewRequest, options?: RawAxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).updateSubscriptionPreivew(requestParameters.subscriptionId, requestParameters.subscriptionUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

