/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.8.6
 * Contact: info@pollination.solutions
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { RepositoryIndex } from '../models';
// @ts-ignore
import type { ResponseGetPackageJson } from '../models';
/**
 * RegistriesApi - axios parameter creator
 * @export
 */
export const RegistriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Package
         * @param {string} owner 
         * @param {string} type 
         * @param {string} name 
         * @param {string} digest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackage: async (owner: string, type: string, name: string, digest: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getPackage', 'owner', owner)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getPackage', 'type', type)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPackage', 'name', name)
            // verify required parameter 'digest' is not null or undefined
            assertParamExists('getPackage', 'digest', digest)
            const localVarPath = `/registries/{owner}/{type}/{name}/{digest}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"digest"}}`, encodeURIComponent(String(digest)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Package in JSON format
         * @param {string} owner 
         * @param {string} type 
         * @param {string} name 
         * @param {string} digest 
         * @param {boolean} [baked] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackageJson: async (owner: string, type: string, name: string, digest: string, baked?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getPackageJson', 'owner', owner)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getPackageJson', 'type', type)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPackageJson', 'name', name)
            // verify required parameter 'digest' is not null or undefined
            assertParamExists('getPackageJson', 'digest', digest)
            const localVarPath = `/registries/{owner}/{type}/{name}/{digest}/json`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"digest"}}`, encodeURIComponent(String(digest)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (baked !== undefined) {
                localVarQueryParameter['baked'] = baked;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Registry Index
         * @param {string} owner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistryIndex: async (owner: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getRegistryIndex', 'owner', owner)
            const localVarPath = `/registries/{owner}/index.json`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Push a plugin to the registry
         * @param {string} owner 
         * @param {File} _package 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlugin: async (owner: string, _package: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('postPlugin', 'owner', owner)
            // verify required parameter '_package' is not null or undefined
            assertParamExists('postPlugin', '_package', _package)
            const localVarPath = `/registries/{owner}/plugins`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


            if (_package !== undefined) { 
                localVarFormParams.append('package', _package as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Push an Recipe to the registry
         * @param {string} owner 
         * @param {File} _package 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipe: async (owner: string, _package: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('postRecipe', 'owner', owner)
            // verify required parameter '_package' is not null or undefined
            assertParamExists('postRecipe', '_package', _package)
            const localVarPath = `/registries/{owner}/recipes`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


            if (_package !== undefined) { 
                localVarFormParams.append('package', _package as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistriesApi - functional programming interface
 * @export
 */
export const RegistriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Package
         * @param {string} owner 
         * @param {string} type 
         * @param {string} name 
         * @param {string} digest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackage(owner: string, type: string, name: string, digest: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPackage(owner, type, name, digest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistriesApi.getPackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Package in JSON format
         * @param {string} owner 
         * @param {string} type 
         * @param {string} name 
         * @param {string} digest 
         * @param {boolean} [baked] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackageJson(owner: string, type: string, name: string, digest: string, baked?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetPackageJson>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPackageJson(owner, type, name, digest, baked, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistriesApi.getPackageJson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Registry Index
         * @param {string} owner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegistryIndex(owner: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryIndex>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistryIndex(owner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistriesApi.getRegistryIndex']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Push a plugin to the registry
         * @param {string} owner 
         * @param {File} _package 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlugin(owner: string, _package: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPlugin(owner, _package, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistriesApi.postPlugin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Push an Recipe to the registry
         * @param {string} owner 
         * @param {File} _package 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRecipe(owner: string, _package: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRecipe(owner, _package, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistriesApi.postRecipe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RegistriesApi - factory interface
 * @export
 */
export const RegistriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Package
         * @param {RegistriesApiGetPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackage(requestParameters: RegistriesApiGetPackageRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getPackage(requestParameters.owner, requestParameters.type, requestParameters.name, requestParameters.digest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Package in JSON format
         * @param {RegistriesApiGetPackageJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackageJson(requestParameters: RegistriesApiGetPackageJsonRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseGetPackageJson> {
            return localVarFp.getPackageJson(requestParameters.owner, requestParameters.type, requestParameters.name, requestParameters.digest, requestParameters.baked, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Registry Index
         * @param {RegistriesApiGetRegistryIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistryIndex(requestParameters: RegistriesApiGetRegistryIndexRequest, options?: RawAxiosRequestConfig): AxiosPromise<RepositoryIndex> {
            return localVarFp.getRegistryIndex(requestParameters.owner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Push a plugin to the registry
         * @param {RegistriesApiPostPluginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlugin(requestParameters: RegistriesApiPostPluginRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.postPlugin(requestParameters.owner, requestParameters._package, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Push an Recipe to the registry
         * @param {RegistriesApiPostRecipeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipe(requestParameters: RegistriesApiPostRecipeRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.postRecipe(requestParameters.owner, requestParameters._package, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPackage operation in RegistriesApi.
 * @export
 * @interface RegistriesApiGetPackageRequest
 */
export interface RegistriesApiGetPackageRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistriesApiGetPackage
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RegistriesApiGetPackage
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof RegistriesApiGetPackage
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RegistriesApiGetPackage
     */
    readonly digest: string
}

/**
 * Request parameters for getPackageJson operation in RegistriesApi.
 * @export
 * @interface RegistriesApiGetPackageJsonRequest
 */
export interface RegistriesApiGetPackageJsonRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistriesApiGetPackageJson
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RegistriesApiGetPackageJson
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof RegistriesApiGetPackageJson
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RegistriesApiGetPackageJson
     */
    readonly digest: string

    /**
     * 
     * @type {boolean}
     * @memberof RegistriesApiGetPackageJson
     */
    readonly baked?: boolean
}

/**
 * Request parameters for getRegistryIndex operation in RegistriesApi.
 * @export
 * @interface RegistriesApiGetRegistryIndexRequest
 */
export interface RegistriesApiGetRegistryIndexRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistriesApiGetRegistryIndex
     */
    readonly owner: string
}

/**
 * Request parameters for postPlugin operation in RegistriesApi.
 * @export
 * @interface RegistriesApiPostPluginRequest
 */
export interface RegistriesApiPostPluginRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistriesApiPostPlugin
     */
    readonly owner: string

    /**
     * 
     * @type {File}
     * @memberof RegistriesApiPostPlugin
     */
    readonly _package: File
}

/**
 * Request parameters for postRecipe operation in RegistriesApi.
 * @export
 * @interface RegistriesApiPostRecipeRequest
 */
export interface RegistriesApiPostRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistriesApiPostRecipe
     */
    readonly owner: string

    /**
     * 
     * @type {File}
     * @memberof RegistriesApiPostRecipe
     */
    readonly _package: File
}

/**
 * RegistriesApi - object-oriented interface
 * @export
 * @class RegistriesApi
 * @extends {BaseAPI}
 */
export class RegistriesApi extends BaseAPI {
    /**
     * 
     * @summary Get Package
     * @param {RegistriesApiGetPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApi
     */
    public getPackage(requestParameters: RegistriesApiGetPackageRequest, options?: RawAxiosRequestConfig) {
        return RegistriesApiFp(this.configuration).getPackage(requestParameters.owner, requestParameters.type, requestParameters.name, requestParameters.digest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Package in JSON format
     * @param {RegistriesApiGetPackageJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApi
     */
    public getPackageJson(requestParameters: RegistriesApiGetPackageJsonRequest, options?: RawAxiosRequestConfig) {
        return RegistriesApiFp(this.configuration).getPackageJson(requestParameters.owner, requestParameters.type, requestParameters.name, requestParameters.digest, requestParameters.baked, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Registry Index
     * @param {RegistriesApiGetRegistryIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApi
     */
    public getRegistryIndex(requestParameters: RegistriesApiGetRegistryIndexRequest, options?: RawAxiosRequestConfig) {
        return RegistriesApiFp(this.configuration).getRegistryIndex(requestParameters.owner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Push a plugin to the registry
     * @param {RegistriesApiPostPluginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApi
     */
    public postPlugin(requestParameters: RegistriesApiPostPluginRequest, options?: RawAxiosRequestConfig) {
        return RegistriesApiFp(this.configuration).postPlugin(requestParameters.owner, requestParameters._package, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Push an Recipe to the registry
     * @param {RegistriesApiPostRecipeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApi
     */
    public postRecipe(requestParameters: RegistriesApiPostRecipeRequest, options?: RawAxiosRequestConfig) {
        return RegistriesApiFp(this.configuration).postRecipe(requestParameters.owner, requestParameters._package, options).then((request) => request(this.axios, this.basePath));
    }
}

