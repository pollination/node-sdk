/* tslint:disable */
/* eslint-disable */
/**
 * Pollination Server
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: v0.9.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { NewOperatorPackage } from '../models';
// @ts-ignore
import { OperatorPackage } from '../models';
// @ts-ignore
import { Repository } from '../models';
// @ts-ignore
import { RepositoryAccessPolicy } from '../models';
// @ts-ignore
import { RepositoryAccessPolicyList } from '../models';
// @ts-ignore
import { RepositoryCreate } from '../models';
// @ts-ignore
import { RepositoryList } from '../models';
// @ts-ignore
import { RepositoryPackageList } from '../models';
// @ts-ignore
import { RepositoryPolicySubject } from '../models';
// @ts-ignore
import { RepositoryUpdate } from '../models';
// @ts-ignore
import { UpdateAccepted } from '../models';
/**
 * OperatorsApi - axios parameter creator
 * @export
 */
export const OperatorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new operator.
         * @summary Create an Operator
         * @param {string} owner 
         * @param {RepositoryCreate} repositoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperator: async (owner: string, repositoryCreate: RepositoryCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createOperator.');
            }
            // verify required parameter 'repositoryCreate' is not null or undefined
            if (repositoryCreate === null || repositoryCreate === undefined) {
                throw new RequiredError('repositoryCreate','Required parameter repositoryCreate was null or undefined when calling createOperator.');
            }
            const localVarPath = `/operators/{owner}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof repositoryCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(repositoryCreate !== undefined ? repositoryCreate : {}) : (repositoryCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new operator package version
         * @summary Create a new Operator package
         * @param {string} owner 
         * @param {string} name 
         * @param {NewOperatorPackage} newOperatorPackage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperatorPackage: async (owner: string, name: string, newOperatorPackage: NewOperatorPackage, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createOperatorPackage.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createOperatorPackage.');
            }
            // verify required parameter 'newOperatorPackage' is not null or undefined
            if (newOperatorPackage === null || newOperatorPackage === undefined) {
                throw new RequiredError('newOperatorPackage','Required parameter newOperatorPackage was null or undefined when calling createOperatorPackage.');
            }
            const localVarPath = `/operators/{owner}/{name}/tags`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newOperatorPackage !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newOperatorPackage !== undefined ? newOperatorPackage : {}) : (newOperatorPackage || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an operator (must have `admin` permission)
         * @summary Delete an Operator
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperator: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteOperator.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteOperator.');
            }
            const localVarPath = `/operators/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a operator\'s access policy (must have `admin` permission)
         * @summary Remove a Repository permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryPolicySubject} repositoryPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorOrgPermission: async (owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteOperatorOrgPermission.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteOperatorOrgPermission.');
            }
            // verify required parameter 'repositoryPolicySubject' is not null or undefined
            if (repositoryPolicySubject === null || repositoryPolicySubject === undefined) {
                throw new RequiredError('repositoryPolicySubject','Required parameter repositoryPolicySubject was null or undefined when calling deleteOperatorOrgPermission.');
            }
            const localVarPath = `/operators/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof repositoryPolicySubject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(repositoryPolicySubject !== undefined ? repositoryPolicySubject : {}) : (repositoryPolicySubject || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an operator by name
         * @summary Get an operator
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperator: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getOperator.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getOperator.');
            }
            const localVarPath = `/operators/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a operator\'s access permissions (must have `contribute` permission)
         * @summary Get an operator\'s access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorAccessPermissions: async (owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getOperatorAccessPermissions.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getOperatorAccessPermissions.');
            }
            const localVarPath = `/operators/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (subjectType) {
                localVarQueryParameter['subject_type'] = subjectType;
            }

            if (permission) {
                localVarQueryParameter['permission'] = permission;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an operator tag by name and tag
         * @summary Get an operator tag
         * @param {string} owner 
         * @param {string} name 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorByTag: async (owner: string, name: string, tag: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getOperatorByTag.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getOperatorByTag.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag','Required parameter tag was null or undefined when calling getOperatorByTag.');
            }
            const localVarPath = `/operators/{owner}/{name}/tags/{tag}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an operator by name
         * @summary Get an operator tags
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOperatorTags: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listOperatorTags.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listOperatorTags.');
            }
            const localVarPath = `/operators/{owner}/{name}/tags`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List operators
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [keyword] A keyword to index the repository by
         * @param {Array<string>} [permission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOperators: async (page?: number, perPage?: number, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/operators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (owner) {
                localVarQueryParameter['owner'] = owner;
            }

            if (_public !== undefined) {
                localVarQueryParameter['public'] = _public;
            }

            if (keyword) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (permission) {
                localVarQueryParameter['permission'] = permission;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an operator (must have `contribute` permission)
         * @summary Update an Operator
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryUpdate} repositoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOperator: async (owner: string, name: string, repositoryUpdate: RepositoryUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateOperator.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateOperator.');
            }
            // verify required parameter 'repositoryUpdate' is not null or undefined
            if (repositoryUpdate === null || repositoryUpdate === undefined) {
                throw new RequiredError('repositoryUpdate','Required parameter repositoryUpdate was null or undefined when calling updateOperator.');
            }
            const localVarPath = `/operators/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof repositoryUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(repositoryUpdate !== undefined ? repositoryUpdate : {}) : (repositoryUpdate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upsert a operator\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a operator
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOperatorPermission: async (owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling upsertOperatorPermission.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling upsertOperatorPermission.');
            }
            // verify required parameter 'repositoryAccessPolicy' is not null or undefined
            if (repositoryAccessPolicy === null || repositoryAccessPolicy === undefined) {
                throw new RequiredError('repositoryAccessPolicy','Required parameter repositoryAccessPolicy was null or undefined when calling upsertOperatorPermission.');
            }
            const localVarPath = `/operators/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof repositoryAccessPolicy !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(repositoryAccessPolicy !== undefined ? repositoryAccessPolicy : {}) : (repositoryAccessPolicy || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperatorsApi - functional programming interface
 * @export
 */
export const OperatorsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new operator.
         * @summary Create an Operator
         * @param {string} owner 
         * @param {RepositoryCreate} repositoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOperator(owner: string, repositoryCreate: RepositoryCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).createOperator(owner, repositoryCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new operator package version
         * @summary Create a new Operator package
         * @param {string} owner 
         * @param {string} name 
         * @param {NewOperatorPackage} newOperatorPackage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOperatorPackage(owner: string, name: string, newOperatorPackage: NewOperatorPackage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).createOperatorPackage(owner, name, newOperatorPackage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an operator (must have `admin` permission)
         * @summary Delete an Operator
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOperator(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).deleteOperator(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a operator\'s access policy (must have `admin` permission)
         * @summary Remove a Repository permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryPolicySubject} repositoryPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOperatorOrgPermission(owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).deleteOperatorOrgPermission(owner, name, repositoryPolicySubject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve an operator by name
         * @summary Get an operator
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperator(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).getOperator(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a operator\'s access permissions (must have `contribute` permission)
         * @summary Get an operator\'s access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperatorAccessPermissions(owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryAccessPolicyList>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).getOperatorAccessPermissions(owner, name, page, perPage, subjectType, permission, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve an operator tag by name and tag
         * @summary Get an operator tag
         * @param {string} owner 
         * @param {string} name 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperatorByTag(owner: string, name: string, tag: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperatorPackage>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).getOperatorByTag(owner, name, tag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve an operator by name
         * @summary Get an operator tags
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOperatorTags(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryPackageList>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).listOperatorTags(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List operators
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [keyword] A keyword to index the repository by
         * @param {Array<string>} [permission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOperators(page?: number, perPage?: number, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).listOperators(page, perPage, name, owner, _public, keyword, permission, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an operator (must have `contribute` permission)
         * @summary Update an Operator
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryUpdate} repositoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOperator(owner: string, name: string, repositoryUpdate: RepositoryUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).updateOperator(owner, name, repositoryUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upsert a operator\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a operator
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertOperatorPermission(owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(configuration).upsertOperatorPermission(owner, name, repositoryAccessPolicy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OperatorsApi - factory interface
 * @export
 */
export const OperatorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new operator.
         * @summary Create an Operator
         * @param {string} owner 
         * @param {RepositoryCreate} repositoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperator(owner: string, repositoryCreate: RepositoryCreate, options?: any): AxiosPromise<CreatedContent> {
            return OperatorsApiFp(configuration).createOperator(owner, repositoryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new operator package version
         * @summary Create a new Operator package
         * @param {string} owner 
         * @param {string} name 
         * @param {NewOperatorPackage} newOperatorPackage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperatorPackage(owner: string, name: string, newOperatorPackage: NewOperatorPackage, options?: any): AxiosPromise<CreatedContent> {
            return OperatorsApiFp(configuration).createOperatorPackage(owner, name, newOperatorPackage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an operator (must have `admin` permission)
         * @summary Delete an Operator
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperator(owner: string, name: string, options?: any): AxiosPromise<void> {
            return OperatorsApiFp(configuration).deleteOperator(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a operator\'s access policy (must have `admin` permission)
         * @summary Remove a Repository permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryPolicySubject} repositoryPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorOrgPermission(owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options?: any): AxiosPromise<void> {
            return OperatorsApiFp(configuration).deleteOperatorOrgPermission(owner, name, repositoryPolicySubject, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an operator by name
         * @summary Get an operator
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperator(owner: string, name: string, options?: any): AxiosPromise<Repository> {
            return OperatorsApiFp(configuration).getOperator(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a operator\'s access permissions (must have `contribute` permission)
         * @summary Get an operator\'s access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorAccessPermissions(owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any): AxiosPromise<RepositoryAccessPolicyList> {
            return OperatorsApiFp(configuration).getOperatorAccessPermissions(owner, name, page, perPage, subjectType, permission, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an operator tag by name and tag
         * @summary Get an operator tag
         * @param {string} owner 
         * @param {string} name 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorByTag(owner: string, name: string, tag: string, options?: any): AxiosPromise<OperatorPackage> {
            return OperatorsApiFp(configuration).getOperatorByTag(owner, name, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an operator by name
         * @summary Get an operator tags
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOperatorTags(owner: string, name: string, options?: any): AxiosPromise<RepositoryPackageList> {
            return OperatorsApiFp(configuration).listOperatorTags(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List operators
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [keyword] A keyword to index the repository by
         * @param {Array<string>} [permission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOperators(page?: number, perPage?: number, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, options?: any): AxiosPromise<RepositoryList> {
            return OperatorsApiFp(configuration).listOperators(page, perPage, name, owner, _public, keyword, permission, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an operator (must have `contribute` permission)
         * @summary Update an Operator
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryUpdate} repositoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOperator(owner: string, name: string, repositoryUpdate: RepositoryUpdate, options?: any): AxiosPromise<UpdateAccepted> {
            return OperatorsApiFp(configuration).updateOperator(owner, name, repositoryUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Upsert a operator\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a operator
         * @param {string} owner 
         * @param {string} name 
         * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOperatorPermission(owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options?: any): AxiosPromise<UpdateAccepted> {
            return OperatorsApiFp(configuration).upsertOperatorPermission(owner, name, repositoryAccessPolicy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OperatorsApi - interface
 * @export
 * @interface OperatorsApi
 */
export interface OperatorsApiInterface {
    /**
     * Create a new operator.
     * @summary Create an Operator
     * @param {string} owner 
     * @param {RepositoryCreate} repositoryCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    createOperator(owner: string, repositoryCreate: RepositoryCreate, options?: any): AxiosPromise<CreatedContent>;

    /**
     * Create a new operator package version
     * @summary Create a new Operator package
     * @param {string} owner 
     * @param {string} name 
     * @param {NewOperatorPackage} newOperatorPackage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    createOperatorPackage(owner: string, name: string, newOperatorPackage: NewOperatorPackage, options?: any): AxiosPromise<CreatedContent>;

    /**
     * Delete an operator (must have `admin` permission)
     * @summary Delete an Operator
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    deleteOperator(owner: string, name: string, options?: any): AxiosPromise<void>;

    /**
     * Delete a operator\'s access policy (must have `admin` permission)
     * @summary Remove a Repository permissions
     * @param {string} owner 
     * @param {string} name 
     * @param {RepositoryPolicySubject} repositoryPolicySubject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    deleteOperatorOrgPermission(owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options?: any): AxiosPromise<void>;

    /**
     * Retrieve an operator by name
     * @summary Get an operator
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    getOperator(owner: string, name: string, options?: any): AxiosPromise<Repository>;

    /**
     * Retrieve a operator\'s access permissions (must have `contribute` permission)
     * @summary Get an operator\'s access permissions
     * @param {string} owner 
     * @param {string} name 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [subjectType] The type of access policy subject
     * @param {Array<string>} [permission] An access policy permission string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    getOperatorAccessPermissions(owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any): AxiosPromise<RepositoryAccessPolicyList>;

    /**
     * Retrieve an operator tag by name and tag
     * @summary Get an operator tag
     * @param {string} owner 
     * @param {string} name 
     * @param {string} tag 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    getOperatorByTag(owner: string, name: string, tag: string, options?: any): AxiosPromise<OperatorPackage>;

    /**
     * Retrieve an operator by name
     * @summary Get an operator tags
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    listOperatorTags(owner: string, name: string, options?: any): AxiosPromise<RepositoryPackageList>;

    /**
     * 
     * @summary List operators
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [name] The account name
     * @param {Array<string>} [owner] Owner of the project
     * @param {boolean} [_public] Boolean check for public/private projects
     * @param {Array<string>} [keyword] A keyword to index the repository by
     * @param {Array<string>} [permission] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    listOperators(page?: number, perPage?: number, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, options?: any): AxiosPromise<RepositoryList>;

    /**
     * Update an operator (must have `contribute` permission)
     * @summary Update an Operator
     * @param {string} owner 
     * @param {string} name 
     * @param {RepositoryUpdate} repositoryUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    updateOperator(owner: string, name: string, repositoryUpdate: RepositoryUpdate, options?: any): AxiosPromise<UpdateAccepted>;

    /**
     * Upsert a operator\'s access policy (must have `admin` permission)
     * @summary Upsert a new permission to a operator
     * @param {string} owner 
     * @param {string} name 
     * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApiInterface
     */
    upsertOperatorPermission(owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options?: any): AxiosPromise<UpdateAccepted>;

}

/**
 * OperatorsApi - object-oriented interface
 * @export
 * @class OperatorsApi
 * @extends {BaseAPI}
 */
export class OperatorsApi extends BaseAPI implements OperatorsApiInterface {
    /**
     * Create a new operator.
     * @summary Create an Operator
     * @param {string} owner 
     * @param {RepositoryCreate} repositoryCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public createOperator(owner: string, repositoryCreate: RepositoryCreate, options?: any) {
        return OperatorsApiFp(this.configuration).createOperator(owner, repositoryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new operator package version
     * @summary Create a new Operator package
     * @param {string} owner 
     * @param {string} name 
     * @param {NewOperatorPackage} newOperatorPackage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public createOperatorPackage(owner: string, name: string, newOperatorPackage: NewOperatorPackage, options?: any) {
        return OperatorsApiFp(this.configuration).createOperatorPackage(owner, name, newOperatorPackage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an operator (must have `admin` permission)
     * @summary Delete an Operator
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public deleteOperator(owner: string, name: string, options?: any) {
        return OperatorsApiFp(this.configuration).deleteOperator(owner, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a operator\'s access policy (must have `admin` permission)
     * @summary Remove a Repository permissions
     * @param {string} owner 
     * @param {string} name 
     * @param {RepositoryPolicySubject} repositoryPolicySubject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public deleteOperatorOrgPermission(owner: string, name: string, repositoryPolicySubject: RepositoryPolicySubject, options?: any) {
        return OperatorsApiFp(this.configuration).deleteOperatorOrgPermission(owner, name, repositoryPolicySubject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an operator by name
     * @summary Get an operator
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public getOperator(owner: string, name: string, options?: any) {
        return OperatorsApiFp(this.configuration).getOperator(owner, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a operator\'s access permissions (must have `contribute` permission)
     * @summary Get an operator\'s access permissions
     * @param {string} owner 
     * @param {string} name 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [subjectType] The type of access policy subject
     * @param {Array<string>} [permission] An access policy permission string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public getOperatorAccessPermissions(owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any) {
        return OperatorsApiFp(this.configuration).getOperatorAccessPermissions(owner, name, page, perPage, subjectType, permission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an operator tag by name and tag
     * @summary Get an operator tag
     * @param {string} owner 
     * @param {string} name 
     * @param {string} tag 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public getOperatorByTag(owner: string, name: string, tag: string, options?: any) {
        return OperatorsApiFp(this.configuration).getOperatorByTag(owner, name, tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an operator by name
     * @summary Get an operator tags
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public listOperatorTags(owner: string, name: string, options?: any) {
        return OperatorsApiFp(this.configuration).listOperatorTags(owner, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List operators
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [name] The account name
     * @param {Array<string>} [owner] Owner of the project
     * @param {boolean} [_public] Boolean check for public/private projects
     * @param {Array<string>} [keyword] A keyword to index the repository by
     * @param {Array<string>} [permission] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public listOperators(page?: number, perPage?: number, name?: Array<string>, owner?: Array<string>, _public?: boolean, keyword?: Array<string>, permission?: Array<string>, options?: any) {
        return OperatorsApiFp(this.configuration).listOperators(page, perPage, name, owner, _public, keyword, permission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an operator (must have `contribute` permission)
     * @summary Update an Operator
     * @param {string} owner 
     * @param {string} name 
     * @param {RepositoryUpdate} repositoryUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public updateOperator(owner: string, name: string, repositoryUpdate: RepositoryUpdate, options?: any) {
        return OperatorsApiFp(this.configuration).updateOperator(owner, name, repositoryUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upsert a operator\'s access policy (must have `admin` permission)
     * @summary Upsert a new permission to a operator
     * @param {string} owner 
     * @param {string} name 
     * @param {RepositoryAccessPolicy} repositoryAccessPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsApi
     */
    public upsertOperatorPermission(owner: string, name: string, repositoryAccessPolicy: RepositoryAccessPolicy, options?: any) {
        return OperatorsApiFp(this.configuration).upsertOperatorPermission(owner, name, repositoryAccessPolicy, options).then((request) => request(this.axios, this.basePath));
    }
}
