/* tslint:disable */
/* eslint-disable */
/**
 * Pollination Server
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { PatchProjectDto } from '../models';
// @ts-ignore
import { ProjectAccessPolicyDto } from '../models';
// @ts-ignore
import { ProjectDto } from '../models';
// @ts-ignore
import { ProjectPolicySubjectDto } from '../models';
// @ts-ignore
import { UpdateAccepted } from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new project.
         * @summary Create a Project
         * @param {string} owner 
         * @param {PatchProjectDto} patchProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (owner: string, patchProjectDto: PatchProjectDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createProject.');
            }
            // verify required parameter 'patchProjectDto' is not null or undefined
            if (patchProjectDto === null || patchProjectDto === undefined) {
                throw new RequiredError('patchProjectDto','Required parameter patchProjectDto was null or undefined when calling createProject.');
            }
            const localVarPath = `/projects/{owner}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchProjectDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchProjectDto !== undefined ? patchProjectDto : {}) : (patchProjectDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a project (must have `admin` permission)
         * @summary Delete a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteProject.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteProject.');
            }
            const localVarPath = `/projects/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a project\'s access policy (must have `admin` permission)
         * @summary Remove a Project permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectPolicySubjectDto} projectPolicySubjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectOrgPermission: async (owner: string, name: string, projectPolicySubjectDto: ProjectPolicySubjectDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteProjectOrgPermission.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteProjectOrgPermission.');
            }
            // verify required parameter 'projectPolicySubjectDto' is not null or undefined
            if (projectPolicySubjectDto === null || projectPolicySubjectDto === undefined) {
                throw new RequiredError('projectPolicySubjectDto','Required parameter projectPolicySubjectDto was null or undefined when calling deleteProjectOrgPermission.');
            }
            const localVarPath = `/projects/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectPolicySubjectDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectPolicySubjectDto !== undefined ? projectPolicySubjectDto : {}) : (projectPolicySubjectDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a project by name
         * @summary Get a project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getProject.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getProject.');
            }
            const localVarPath = `/projects/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a project\'s access permissions (must have `contribute` permission)
         * @summary Get a project\'s access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectAccessPermissions: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getProjectAccessPermissions.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getProjectAccessPermissions.');
            }
            const localVarPath = `/projects/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * search for projects using query parameters
         * @summary List Projects
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [id] The ID of a project to search for
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [operator] Name of an operator to search workflows by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (page?: number, perPage?: number, id?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, operator?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (owner) {
                localVarQueryParameter['owner'] = owner;
            }

            if (_public !== undefined) {
                localVarQueryParameter['public'] = _public;
            }

            if (operator) {
                localVarQueryParameter['operator'] = operator;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a project (must have `contribute` permission)
         * @summary Update a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {PatchProjectDto} patchProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (owner: string, name: string, patchProjectDto: PatchProjectDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling update.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling update.');
            }
            // verify required parameter 'patchProjectDto' is not null or undefined
            if (patchProjectDto === null || patchProjectDto === undefined) {
                throw new RequiredError('patchProjectDto','Required parameter patchProjectDto was null or undefined when calling update.');
            }
            const localVarPath = `/projects/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchProjectDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchProjectDto !== undefined ? patchProjectDto : {}) : (patchProjectDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upsert a project\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectAccessPolicyDto} projectAccessPolicyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProjectPermission: async (owner: string, name: string, projectAccessPolicyDto: ProjectAccessPolicyDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling upsertProjectPermission.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling upsertProjectPermission.');
            }
            // verify required parameter 'projectAccessPolicyDto' is not null or undefined
            if (projectAccessPolicyDto === null || projectAccessPolicyDto === undefined) {
                throw new RequiredError('projectAccessPolicyDto','Required parameter projectAccessPolicyDto was null or undefined when calling upsertProjectPermission.');
            }
            const localVarPath = `/projects/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectAccessPolicyDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectAccessPolicyDto !== undefined ? projectAccessPolicyDto : {}) : (projectAccessPolicyDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new project.
         * @summary Create a Project
         * @param {string} owner 
         * @param {PatchProjectDto} patchProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(owner: string, patchProjectDto: PatchProjectDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).createProject(owner, patchProjectDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a project (must have `admin` permission)
         * @summary Delete a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).deleteProject(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a project\'s access policy (must have `admin` permission)
         * @summary Remove a Project permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectPolicySubjectDto} projectPolicySubjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectOrgPermission(owner: string, name: string, projectPolicySubjectDto: ProjectPolicySubjectDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).deleteProjectOrgPermission(owner, name, projectPolicySubjectDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a project by name
         * @summary Get a project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProject(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a project\'s access permissions (must have `contribute` permission)
         * @summary Get a project\'s access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectAccessPermissions(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectAccessPolicyDto>>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProjectAccessPermissions(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * search for projects using query parameters
         * @summary List Projects
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [id] The ID of a project to search for
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [operator] Name of an operator to search workflows by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(page?: number, perPage?: number, id?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, operator?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectDto>>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).listProjects(page, perPage, id, name, owner, _public, operator, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a project (must have `contribute` permission)
         * @summary Update a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {PatchProjectDto} patchProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(owner: string, name: string, patchProjectDto: PatchProjectDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).update(owner, name, patchProjectDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upsert a project\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectAccessPolicyDto} projectAccessPolicyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertProjectPermission(owner: string, name: string, projectAccessPolicyDto: ProjectAccessPolicyDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).upsertProjectPermission(owner, name, projectAccessPolicyDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new project.
         * @summary Create a Project
         * @param {string} owner 
         * @param {PatchProjectDto} patchProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(owner: string, patchProjectDto: PatchProjectDto, options?: any): AxiosPromise<CreatedContent> {
            return ProjectsApiFp(configuration).createProject(owner, patchProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a project (must have `admin` permission)
         * @summary Delete a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(owner: string, name: string, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).deleteProject(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a project\'s access policy (must have `admin` permission)
         * @summary Remove a Project permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectPolicySubjectDto} projectPolicySubjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectOrgPermission(owner: string, name: string, projectPolicySubjectDto: ProjectPolicySubjectDto, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).deleteProjectOrgPermission(owner, name, projectPolicySubjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a project by name
         * @summary Get a project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(owner: string, name: string, options?: any): AxiosPromise<ProjectDto> {
            return ProjectsApiFp(configuration).getProject(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a project\'s access permissions (must have `contribute` permission)
         * @summary Get a project\'s access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectAccessPermissions(owner: string, name: string, options?: any): AxiosPromise<Array<ProjectAccessPolicyDto>> {
            return ProjectsApiFp(configuration).getProjectAccessPermissions(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * search for projects using query parameters
         * @summary List Projects
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [id] The ID of a project to search for
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [operator] Name of an operator to search workflows by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(page?: number, perPage?: number, id?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, operator?: Array<string>, options?: any): AxiosPromise<Array<ProjectDto>> {
            return ProjectsApiFp(configuration).listProjects(page, perPage, id, name, owner, _public, operator, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a project (must have `contribute` permission)
         * @summary Update a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {PatchProjectDto} patchProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(owner: string, name: string, patchProjectDto: PatchProjectDto, options?: any): AxiosPromise<UpdateAccepted> {
            return ProjectsApiFp(configuration).update(owner, name, patchProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Upsert a project\'s access policy (must have `admin` permission)
         * @summary Upsert a new permission to a project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectAccessPolicyDto} projectAccessPolicyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProjectPermission(owner: string, name: string, projectAccessPolicyDto: ProjectAccessPolicyDto, options?: any): AxiosPromise<UpdateAccepted> {
            return ProjectsApiFp(configuration).upsertProjectPermission(owner, name, projectAccessPolicyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - interface
 * @export
 * @interface ProjectsApi
 */
export interface ProjectsApiInterface {
    /**
     * Create a new project.
     * @summary Create a Project
     * @param {string} owner 
     * @param {PatchProjectDto} patchProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createProject(owner: string, patchProjectDto: PatchProjectDto, options?: any): AxiosPromise<CreatedContent>;

    /**
     * Delete a project (must have `admin` permission)
     * @summary Delete a Project
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteProject(owner: string, name: string, options?: any): AxiosPromise<void>;

    /**
     * Delete a project\'s access policy (must have `admin` permission)
     * @summary Remove a Project permissions
     * @param {string} owner 
     * @param {string} name 
     * @param {ProjectPolicySubjectDto} projectPolicySubjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteProjectOrgPermission(owner: string, name: string, projectPolicySubjectDto: ProjectPolicySubjectDto, options?: any): AxiosPromise<void>;

    /**
     * Retrieve a project by name
     * @summary Get a project
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProject(owner: string, name: string, options?: any): AxiosPromise<ProjectDto>;

    /**
     * Retrieve a project\'s access permissions (must have `contribute` permission)
     * @summary Get a project\'s access permissions
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectAccessPermissions(owner: string, name: string, options?: any): AxiosPromise<Array<ProjectAccessPolicyDto>>;

    /**
     * search for projects using query parameters
     * @summary List Projects
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [id] The ID of a project to search for
     * @param {Array<string>} [name] The account name
     * @param {Array<string>} [owner] Owner of the project
     * @param {boolean} [_public] Boolean check for public/private projects
     * @param {Array<string>} [operator] Name of an operator to search workflows by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    listProjects(page?: number, perPage?: number, id?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, operator?: Array<string>, options?: any): AxiosPromise<Array<ProjectDto>>;

    /**
     * Update a project (must have `contribute` permission)
     * @summary Update a Project
     * @param {string} owner 
     * @param {string} name 
     * @param {PatchProjectDto} patchProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    update(owner: string, name: string, patchProjectDto: PatchProjectDto, options?: any): AxiosPromise<UpdateAccepted>;

    /**
     * Upsert a project\'s access policy (must have `admin` permission)
     * @summary Upsert a new permission to a project
     * @param {string} owner 
     * @param {string} name 
     * @param {ProjectAccessPolicyDto} projectAccessPolicyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    upsertProjectPermission(owner: string, name: string, projectAccessPolicyDto: ProjectAccessPolicyDto, options?: any): AxiosPromise<UpdateAccepted>;

}

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI implements ProjectsApiInterface {
    /**
     * Create a new project.
     * @summary Create a Project
     * @param {string} owner 
     * @param {PatchProjectDto} patchProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createProject(owner: string, patchProjectDto: PatchProjectDto, options?: any) {
        return ProjectsApiFp(this.configuration).createProject(owner, patchProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a project (must have `admin` permission)
     * @summary Delete a Project
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProject(owner: string, name: string, options?: any) {
        return ProjectsApiFp(this.configuration).deleteProject(owner, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a project\'s access policy (must have `admin` permission)
     * @summary Remove a Project permissions
     * @param {string} owner 
     * @param {string} name 
     * @param {ProjectPolicySubjectDto} projectPolicySubjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProjectOrgPermission(owner: string, name: string, projectPolicySubjectDto: ProjectPolicySubjectDto, options?: any) {
        return ProjectsApiFp(this.configuration).deleteProjectOrgPermission(owner, name, projectPolicySubjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a project by name
     * @summary Get a project
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProject(owner: string, name: string, options?: any) {
        return ProjectsApiFp(this.configuration).getProject(owner, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a project\'s access permissions (must have `contribute` permission)
     * @summary Get a project\'s access permissions
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectAccessPermissions(owner: string, name: string, options?: any) {
        return ProjectsApiFp(this.configuration).getProjectAccessPermissions(owner, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * search for projects using query parameters
     * @summary List Projects
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [id] The ID of a project to search for
     * @param {Array<string>} [name] The account name
     * @param {Array<string>} [owner] Owner of the project
     * @param {boolean} [_public] Boolean check for public/private projects
     * @param {Array<string>} [operator] Name of an operator to search workflows by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public listProjects(page?: number, perPage?: number, id?: Array<string>, name?: Array<string>, owner?: Array<string>, _public?: boolean, operator?: Array<string>, options?: any) {
        return ProjectsApiFp(this.configuration).listProjects(page, perPage, id, name, owner, _public, operator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a project (must have `contribute` permission)
     * @summary Update a Project
     * @param {string} owner 
     * @param {string} name 
     * @param {PatchProjectDto} patchProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public update(owner: string, name: string, patchProjectDto: PatchProjectDto, options?: any) {
        return ProjectsApiFp(this.configuration).update(owner, name, patchProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upsert a project\'s access policy (must have `admin` permission)
     * @summary Upsert a new permission to a project
     * @param {string} owner 
     * @param {string} name 
     * @param {ProjectAccessPolicyDto} projectAccessPolicyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public upsertProjectPermission(owner: string, name: string, projectAccessPolicyDto: ProjectAccessPolicyDto, options?: any) {
        return ProjectsApiFp(this.configuration).upsertProjectPermission(owner, name, projectAccessPolicyDto, options).then((request) => request(this.axios, this.basePath));
    }
}
