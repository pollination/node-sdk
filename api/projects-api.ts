/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.23.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Project } from '../models';
// @ts-ignore
import { ProjectAccessPolicy } from '../models';
// @ts-ignore
import { ProjectAccessPolicyList } from '../models';
// @ts-ignore
import { ProjectCreate } from '../models';
// @ts-ignore
import { ProjectList } from '../models';
// @ts-ignore
import { ProjectPolicySubject } from '../models';
// @ts-ignore
import { ProjectRecipeFilter } from '../models';
// @ts-ignore
import { ProjectRecipeFilterList } from '../models';
// @ts-ignore
import { ProjectSortKey } from '../models';
// @ts-ignore
import { ProjectUpdate } from '../models';
// @ts-ignore
import { RecipeInterfaceList } from '../models';
// @ts-ignore
import { SortEnum } from '../models';
// @ts-ignore
import { UpdateAccepted } from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Project
         * @param {string} owner 
         * @param {ProjectCreate} projectCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (owner: string, projectCreate: ProjectCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createProject.');
            }
            // verify required parameter 'projectCreate' is not null or undefined
            if (projectCreate === null || projectCreate === undefined) {
                throw new RequiredError('projectCreate','Required parameter projectCreate was null or undefined when calling createProject.');
            }
            const localVarPath = `/projects/{owner}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectCreate !== undefined ? projectCreate : {}) : (projectCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert a recipe filter to a project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectRecipeFilter} projectRecipeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectRecipeFilter: async (owner: string, name: string, projectRecipeFilter: ProjectRecipeFilter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createProjectRecipeFilter.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createProjectRecipeFilter.');
            }
            // verify required parameter 'projectRecipeFilter' is not null or undefined
            if (projectRecipeFilter === null || projectRecipeFilter === undefined) {
                throw new RequiredError('projectRecipeFilter','Required parameter projectRecipeFilter was null or undefined when calling createProjectRecipeFilter.');
            }
            const localVarPath = `/projects/{owner}/{name}/recipes/filters`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectRecipeFilter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectRecipeFilter !== undefined ? projectRecipeFilter : {}) : (projectRecipeFilter || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteProject.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteProject.');
            }
            const localVarPath = `/projects/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a Project permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectPolicySubject} projectPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectOrgPermission: async (owner: string, name: string, projectPolicySubject: ProjectPolicySubject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteProjectOrgPermission.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteProjectOrgPermission.');
            }
            // verify required parameter 'projectPolicySubject' is not null or undefined
            if (projectPolicySubject === null || projectPolicySubject === undefined) {
                throw new RequiredError('projectPolicySubject','Required parameter projectPolicySubject was null or undefined when calling deleteProjectOrgPermission.');
            }
            const localVarPath = `/projects/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectPolicySubject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectPolicySubject !== undefined ? projectPolicySubject : {}) : (projectPolicySubject || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a Project recipe filter
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectRecipeFilter} projectRecipeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectRecipeFilter: async (owner: string, name: string, projectRecipeFilter: ProjectRecipeFilter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteProjectRecipeFilter.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteProjectRecipeFilter.');
            }
            // verify required parameter 'projectRecipeFilter' is not null or undefined
            if (projectRecipeFilter === null || projectRecipeFilter === undefined) {
                throw new RequiredError('projectRecipeFilter','Required parameter projectRecipeFilter was null or undefined when calling deleteProjectRecipeFilter.');
            }
            const localVarPath = `/projects/{owner}/{name}/recipes/filters`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectRecipeFilter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectRecipeFilter !== undefined ? projectRecipeFilter : {}) : (projectRecipeFilter || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (owner: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getProject.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getProject.');
            }
            const localVarPath = `/projects/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectAccessPermissions: async (owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getProjectAccessPermissions.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getProjectAccessPermissions.');
            }
            const localVarPath = `/projects/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (subjectType) {
                localVarQueryParameter['subject_type'] = subjectType;
            }

            if (permission) {
                localVarQueryParameter['permission'] = permission;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project recipe filters
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectRecipeFilters: async (owner: string, name: string, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getProjectRecipeFilters.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getProjectRecipeFilters.');
            }
            const localVarPath = `/projects/{owner}/{name}/recipes/filters`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project recipes
         * @param {string} owner 
         * @param {string} name 
         * @param {string} [search] Search string to find recipes
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectRecipes: async (owner: string, name: string, search?: string, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getProjectRecipes.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getProjectRecipes.');
            }
            const localVarPath = `/projects/{owner}/{name}/recipes`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Projects
         * @param {string} [search] Search string to find projects
         * @param {Array<string>} [ids] The ID of a project to search for
         * @param {Array<string>} [names] The name of the project
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [permissions] Filter by permission on given resource
         * @param {ProjectSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (search?: string, ids?: Array<string>, names?: Array<string>, owner?: Array<string>, _public?: boolean, permissions?: Array<string>, sortBy?: ProjectSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (names) {
                localVarQueryParameter['names'] = names;
            }

            if (owner) {
                localVarQueryParameter['owner'] = owner;
            }

            if (_public !== undefined) {
                localVarQueryParameter['public'] = _public;
            }

            if (permissions) {
                localVarQueryParameter['permissions'] = permissions;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectUpdate} projectUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (owner: string, name: string, projectUpdate: ProjectUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling update.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling update.');
            }
            // verify required parameter 'projectUpdate' is not null or undefined
            if (projectUpdate === null || projectUpdate === undefined) {
                throw new RequiredError('projectUpdate','Required parameter projectUpdate was null or undefined when calling update.');
            }
            const localVarPath = `/projects/{owner}/{name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectUpdate !== undefined ? projectUpdate : {}) : (projectUpdate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert a new permission to a project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectAccessPolicy} projectAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProjectPermission: async (owner: string, name: string, projectAccessPolicy: ProjectAccessPolicy, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling upsertProjectPermission.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling upsertProjectPermission.');
            }
            // verify required parameter 'projectAccessPolicy' is not null or undefined
            if (projectAccessPolicy === null || projectAccessPolicy === undefined) {
                throw new RequiredError('projectAccessPolicy','Required parameter projectAccessPolicy was null or undefined when calling upsertProjectPermission.');
            }
            const localVarPath = `/projects/{owner}/{name}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectAccessPolicy !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectAccessPolicy !== undefined ? projectAccessPolicy : {}) : (projectAccessPolicy || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Project
         * @param {string} owner 
         * @param {ProjectCreate} projectCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(owner: string, projectCreate: ProjectCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).createProject(owner, projectCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upsert a recipe filter to a project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectRecipeFilter} projectRecipeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectRecipeFilter(owner: string, name: string, projectRecipeFilter: ProjectRecipeFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRecipeFilter>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).createProjectRecipeFilter(owner, name, projectRecipeFilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).deleteProject(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove a Project permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectPolicySubject} projectPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectOrgPermission(owner: string, name: string, projectPolicySubject: ProjectPolicySubject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).deleteProjectOrgPermission(owner, name, projectPolicySubject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove a Project recipe filter
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectRecipeFilter} projectRecipeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectRecipeFilter(owner: string, name: string, projectRecipeFilter: ProjectRecipeFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).deleteProjectRecipeFilter(owner, name, projectRecipeFilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(owner: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProject(owner, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get project access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectAccessPermissions(owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAccessPolicyList>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProjectAccessPermissions(owner, name, page, perPage, subjectType, permission, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get project recipe filters
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectRecipeFilters(owner: string, name: string, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRecipeFilterList>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProjectRecipeFilters(owner, name, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get project recipes
         * @param {string} owner 
         * @param {string} name 
         * @param {string} [search] Search string to find recipes
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectRecipes(owner: string, name: string, search?: string, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeInterfaceList>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProjectRecipes(owner, name, search, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List Projects
         * @param {string} [search] Search string to find projects
         * @param {Array<string>} [ids] The ID of a project to search for
         * @param {Array<string>} [names] The name of the project
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [permissions] Filter by permission on given resource
         * @param {ProjectSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(search?: string, ids?: Array<string>, names?: Array<string>, owner?: Array<string>, _public?: boolean, permissions?: Array<string>, sortBy?: ProjectSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectList>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).listProjects(search, ids, names, owner, _public, permissions, sortBy, sortOrder, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectUpdate} projectUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(owner: string, name: string, projectUpdate: ProjectUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).update(owner, name, projectUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upsert a new permission to a project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectAccessPolicy} projectAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertProjectPermission(owner: string, name: string, projectAccessPolicy: ProjectAccessPolicy, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).upsertProjectPermission(owner, name, projectAccessPolicy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a Project
         * @param {string} owner 
         * @param {ProjectCreate} projectCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(owner: string, projectCreate: ProjectCreate, options?: any): AxiosPromise<CreatedContent> {
            return ProjectsApiFp(configuration).createProject(owner, projectCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert a recipe filter to a project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectRecipeFilter} projectRecipeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectRecipeFilter(owner: string, name: string, projectRecipeFilter: ProjectRecipeFilter, options?: any): AxiosPromise<ProjectRecipeFilter> {
            return ProjectsApiFp(configuration).createProjectRecipeFilter(owner, name, projectRecipeFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(owner: string, name: string, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).deleteProject(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a Project permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectPolicySubject} projectPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectOrgPermission(owner: string, name: string, projectPolicySubject: ProjectPolicySubject, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).deleteProjectOrgPermission(owner, name, projectPolicySubject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a Project recipe filter
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectRecipeFilter} projectRecipeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectRecipeFilter(owner: string, name: string, projectRecipeFilter: ProjectRecipeFilter, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).deleteProjectRecipeFilter(owner, name, projectRecipeFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a project
         * @param {string} owner 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(owner: string, name: string, options?: any): AxiosPromise<Project> {
            return ProjectsApiFp(configuration).getProject(owner, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project access permissions
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectAccessPermissions(owner: string, name: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any): AxiosPromise<ProjectAccessPolicyList> {
            return ProjectsApiFp(configuration).getProjectAccessPermissions(owner, name, page, perPage, subjectType, permission, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project recipe filters
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectRecipeFilters(owner: string, name: string, page?: number, perPage?: number, options?: any): AxiosPromise<ProjectRecipeFilterList> {
            return ProjectsApiFp(configuration).getProjectRecipeFilters(owner, name, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project recipes
         * @param {string} owner 
         * @param {string} name 
         * @param {string} [search] Search string to find recipes
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectRecipes(owner: string, name: string, search?: string, page?: number, perPage?: number, options?: any): AxiosPromise<RecipeInterfaceList> {
            return ProjectsApiFp(configuration).getProjectRecipes(owner, name, search, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Projects
         * @param {string} [search] Search string to find projects
         * @param {Array<string>} [ids] The ID of a project to search for
         * @param {Array<string>} [names] The name of the project
         * @param {Array<string>} [owner] Owner of the project
         * @param {boolean} [_public] Boolean check for public/private projects
         * @param {Array<string>} [permissions] Filter by permission on given resource
         * @param {ProjectSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(search?: string, ids?: Array<string>, names?: Array<string>, owner?: Array<string>, _public?: boolean, permissions?: Array<string>, sortBy?: ProjectSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: any): AxiosPromise<ProjectList> {
            return ProjectsApiFp(configuration).listProjects(search, ids, names, owner, _public, permissions, sortBy, sortOrder, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectUpdate} projectUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(owner: string, name: string, projectUpdate: ProjectUpdate, options?: any): AxiosPromise<UpdateAccepted> {
            return ProjectsApiFp(configuration).update(owner, name, projectUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert a new permission to a project
         * @param {string} owner 
         * @param {string} name 
         * @param {ProjectAccessPolicy} projectAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProjectPermission(owner: string, name: string, projectAccessPolicy: ProjectAccessPolicy, options?: any): AxiosPromise<UpdateAccepted> {
            return ProjectsApiFp(configuration).upsertProjectPermission(owner, name, projectAccessPolicy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateProjectRequest
 */
export interface ProjectsApiCreateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiCreateProject
     */
    readonly owner: string

    /**
     * 
     * @type {ProjectCreate}
     * @memberof ProjectsApiCreateProject
     */
    readonly projectCreate: ProjectCreate
}

/**
 * Request parameters for createProjectRecipeFilter operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateProjectRecipeFilterRequest
 */
export interface ProjectsApiCreateProjectRecipeFilterRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiCreateProjectRecipeFilter
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiCreateProjectRecipeFilter
     */
    readonly name: string

    /**
     * 
     * @type {ProjectRecipeFilter}
     * @memberof ProjectsApiCreateProjectRecipeFilter
     */
    readonly projectRecipeFilter: ProjectRecipeFilter
}

/**
 * Request parameters for deleteProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteProjectRequest
 */
export interface ProjectsApiDeleteProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiDeleteProject
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiDeleteProject
     */
    readonly name: string
}

/**
 * Request parameters for deleteProjectOrgPermission operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteProjectOrgPermissionRequest
 */
export interface ProjectsApiDeleteProjectOrgPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiDeleteProjectOrgPermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiDeleteProjectOrgPermission
     */
    readonly name: string

    /**
     * 
     * @type {ProjectPolicySubject}
     * @memberof ProjectsApiDeleteProjectOrgPermission
     */
    readonly projectPolicySubject: ProjectPolicySubject
}

/**
 * Request parameters for deleteProjectRecipeFilter operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteProjectRecipeFilterRequest
 */
export interface ProjectsApiDeleteProjectRecipeFilterRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiDeleteProjectRecipeFilter
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiDeleteProjectRecipeFilter
     */
    readonly name: string

    /**
     * 
     * @type {ProjectRecipeFilter}
     * @memberof ProjectsApiDeleteProjectRecipeFilter
     */
    readonly projectRecipeFilter: ProjectRecipeFilter
}

/**
 * Request parameters for getProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectRequest
 */
export interface ProjectsApiGetProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiGetProject
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiGetProject
     */
    readonly name: string
}

/**
 * Request parameters for getProjectAccessPermissions operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectAccessPermissionsRequest
 */
export interface ProjectsApiGetProjectAccessPermissionsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiGetProjectAccessPermissions
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiGetProjectAccessPermissions
     */
    readonly name: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ProjectsApiGetProjectAccessPermissions
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ProjectsApiGetProjectAccessPermissions
     */
    readonly perPage?: number

    /**
     * The type of access policy subject
     * @type {Array<string>}
     * @memberof ProjectsApiGetProjectAccessPermissions
     */
    readonly subjectType?: Array<string>

    /**
     * An access policy permission string
     * @type {Array<string>}
     * @memberof ProjectsApiGetProjectAccessPermissions
     */
    readonly permission?: Array<string>
}

/**
 * Request parameters for getProjectRecipeFilters operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectRecipeFiltersRequest
 */
export interface ProjectsApiGetProjectRecipeFiltersRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiGetProjectRecipeFilters
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiGetProjectRecipeFilters
     */
    readonly name: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ProjectsApiGetProjectRecipeFilters
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ProjectsApiGetProjectRecipeFilters
     */
    readonly perPage?: number
}

/**
 * Request parameters for getProjectRecipes operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectRecipesRequest
 */
export interface ProjectsApiGetProjectRecipesRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiGetProjectRecipes
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiGetProjectRecipes
     */
    readonly name: string

    /**
     * Search string to find recipes
     * @type {string}
     * @memberof ProjectsApiGetProjectRecipes
     */
    readonly search?: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ProjectsApiGetProjectRecipes
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ProjectsApiGetProjectRecipes
     */
    readonly perPage?: number
}

/**
 * Request parameters for listProjects operation in ProjectsApi.
 * @export
 * @interface ProjectsApiListProjectsRequest
 */
export interface ProjectsApiListProjectsRequest {
    /**
     * Search string to find projects
     * @type {string}
     * @memberof ProjectsApiListProjects
     */
    readonly search?: string

    /**
     * The ID of a project to search for
     * @type {Array<string>}
     * @memberof ProjectsApiListProjects
     */
    readonly ids?: Array<string>

    /**
     * The name of the project
     * @type {Array<string>}
     * @memberof ProjectsApiListProjects
     */
    readonly names?: Array<string>

    /**
     * Owner of the project
     * @type {Array<string>}
     * @memberof ProjectsApiListProjects
     */
    readonly owner?: Array<string>

    /**
     * Boolean check for public/private projects
     * @type {boolean}
     * @memberof ProjectsApiListProjects
     */
    readonly _public?: boolean

    /**
     * Filter by permission on given resource
     * @type {Array<string>}
     * @memberof ProjectsApiListProjects
     */
    readonly permissions?: Array<string>

    /**
     * Key to sort the list by
     * @type {ProjectSortKey}
     * @memberof ProjectsApiListProjects
     */
    readonly sortBy?: ProjectSortKey

    /**
     * The order to sort the list
     * @type {SortEnum}
     * @memberof ProjectsApiListProjects
     */
    readonly sortOrder?: SortEnum

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ProjectsApiListProjects
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ProjectsApiListProjects
     */
    readonly perPage?: number
}

/**
 * Request parameters for update operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateRequest
 */
export interface ProjectsApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiUpdate
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiUpdate
     */
    readonly name: string

    /**
     * 
     * @type {ProjectUpdate}
     * @memberof ProjectsApiUpdate
     */
    readonly projectUpdate: ProjectUpdate
}

/**
 * Request parameters for upsertProjectPermission operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpsertProjectPermissionRequest
 */
export interface ProjectsApiUpsertProjectPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectsApiUpsertProjectPermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ProjectsApiUpsertProjectPermission
     */
    readonly name: string

    /**
     * 
     * @type {ProjectAccessPolicy}
     * @memberof ProjectsApiUpsertProjectPermission
     */
    readonly projectAccessPolicy: ProjectAccessPolicy
}

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @summary Create a Project
     * @param {ProjectsApiCreateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createProject(requestParameters: ProjectsApiCreateProjectRequest, options?: any) {
        return ProjectsApiFp(this.configuration).createProject(requestParameters.owner, requestParameters.projectCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert a recipe filter to a project
     * @param {ProjectsApiCreateProjectRecipeFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createProjectRecipeFilter(requestParameters: ProjectsApiCreateProjectRecipeFilterRequest, options?: any) {
        return ProjectsApiFp(this.configuration).createProjectRecipeFilter(requestParameters.owner, requestParameters.name, requestParameters.projectRecipeFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Project
     * @param {ProjectsApiDeleteProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProject(requestParameters: ProjectsApiDeleteProjectRequest, options?: any) {
        return ProjectsApiFp(this.configuration).deleteProject(requestParameters.owner, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a Project permissions
     * @param {ProjectsApiDeleteProjectOrgPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProjectOrgPermission(requestParameters: ProjectsApiDeleteProjectOrgPermissionRequest, options?: any) {
        return ProjectsApiFp(this.configuration).deleteProjectOrgPermission(requestParameters.owner, requestParameters.name, requestParameters.projectPolicySubject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a Project recipe filter
     * @param {ProjectsApiDeleteProjectRecipeFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProjectRecipeFilter(requestParameters: ProjectsApiDeleteProjectRecipeFilterRequest, options?: any) {
        return ProjectsApiFp(this.configuration).deleteProjectRecipeFilter(requestParameters.owner, requestParameters.name, requestParameters.projectRecipeFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a project
     * @param {ProjectsApiGetProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProject(requestParameters: ProjectsApiGetProjectRequest, options?: any) {
        return ProjectsApiFp(this.configuration).getProject(requestParameters.owner, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project access permissions
     * @param {ProjectsApiGetProjectAccessPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectAccessPermissions(requestParameters: ProjectsApiGetProjectAccessPermissionsRequest, options?: any) {
        return ProjectsApiFp(this.configuration).getProjectAccessPermissions(requestParameters.owner, requestParameters.name, requestParameters.page, requestParameters.perPage, requestParameters.subjectType, requestParameters.permission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project recipe filters
     * @param {ProjectsApiGetProjectRecipeFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectRecipeFilters(requestParameters: ProjectsApiGetProjectRecipeFiltersRequest, options?: any) {
        return ProjectsApiFp(this.configuration).getProjectRecipeFilters(requestParameters.owner, requestParameters.name, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project recipes
     * @param {ProjectsApiGetProjectRecipesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectRecipes(requestParameters: ProjectsApiGetProjectRecipesRequest, options?: any) {
        return ProjectsApiFp(this.configuration).getProjectRecipes(requestParameters.owner, requestParameters.name, requestParameters.search, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Projects
     * @param {ProjectsApiListProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public listProjects(requestParameters: ProjectsApiListProjectsRequest = {}, options?: any) {
        return ProjectsApiFp(this.configuration).listProjects(requestParameters.search, requestParameters.ids, requestParameters.names, requestParameters.owner, requestParameters._public, requestParameters.permissions, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Project
     * @param {ProjectsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public update(requestParameters: ProjectsApiUpdateRequest, options?: any) {
        return ProjectsApiFp(this.configuration).update(requestParameters.owner, requestParameters.name, requestParameters.projectUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert a new permission to a project
     * @param {ProjectsApiUpsertProjectPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public upsertProjectPermission(requestParameters: ProjectsApiUpsertProjectPermissionRequest, options?: any) {
        return ProjectsApiFp(this.configuration).upsertProjectPermission(requestParameters.owner, requestParameters.name, requestParameters.projectAccessPolicy, options).then((request) => request(this.axios, this.basePath));
    }
}
