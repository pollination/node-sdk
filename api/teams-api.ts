/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.45.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Team } from '../models';
// @ts-ignore
import { TeamCreate } from '../models';
// @ts-ignore
import { TeamList } from '../models';
// @ts-ignore
import { TeamMemberList } from '../models';
// @ts-ignore
import { TeamRoleEnum } from '../models';
// @ts-ignore
import { TeamUpdate } from '../models';
// @ts-ignore
import { UpdateAccepted } from '../models';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new team (must be parent org member)
         * @summary Create a Team
         * @param {string} orgName 
         * @param {TeamCreate} teamCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam: async (orgName: string, teamCreate: TeamCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling createTeam.');
            }
            // verify required parameter 'teamCreate' is not null or undefined
            if (teamCreate === null || teamCreate === undefined) {
                throw new RequiredError('teamCreate','Required parameter teamCreate was null or undefined when calling createTeam.');
            }
            const localVarPath = `/orgs/{org_name}/teams`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamCreate !== undefined ? teamCreate : {}) : (teamCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove a team member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgTeamMember: async (orgName: string, teamSlug: string, username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling deleteOrgTeamMember.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling deleteOrgTeamMember.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling deleteOrgTeamMember.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}/members/{username}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a team (must have team or org `owner` role)
         * @summary Delete a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: async (orgName: string, teamSlug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling deleteTeam.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling deleteTeam.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a tean\'s members
         * @summary List team members
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgTeamMembers: async (orgName: string, teamSlug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling getOrgTeamMembers.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling getOrgTeamMembers.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}/members`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a team by name
         * @summary Get a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: async (orgName: string, teamSlug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling getTeam.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling getTeam.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * search for orgs using query parameters
         * @summary List Teams
         * @param {string} orgName 
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The ID of a user
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgTeams: async (orgName: string, search?: Array<string>, name?: Array<string>, member?: Array<string>, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling listOrgTeams.');
            }
            const localVarPath = `/orgs/{org_name}/teams`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search) {
                localVarQueryParameter['search'] = search;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (member) {
                localVarQueryParameter['member'] = member;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a team (must have team or org `owner` role)
         * @summary Update a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {TeamUpdate} teamUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: async (orgName: string, teamSlug: string, teamUpdate: TeamUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling updateTeam.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling updateTeam.');
            }
            // verify required parameter 'teamUpdate' is not null or undefined
            if (teamUpdate === null || teamUpdate === undefined) {
                throw new RequiredError('teamUpdate','Required parameter teamUpdate was null or undefined when calling updateTeam.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamUpdate !== undefined ? teamUpdate : {}) : (teamUpdate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upsert a member role to the team (must have org or team `owner` role)
         * @summary Add or update the role of an Team Member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {TeamRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOrgTeamMember: async (orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling upsertOrgTeamMember.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling upsertOrgTeamMember.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling upsertOrgTeamMember.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling upsertOrgTeamMember.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}/members/{username}/{role}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new team (must be parent org member)
         * @summary Create a Team
         * @param {string} orgName 
         * @param {TeamCreate} teamCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeam(orgName: string, teamCreate: TeamCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).createTeam(orgName, teamCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove a team member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrgTeamMember(orgName: string, teamSlug: string, username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).deleteOrgTeamMember(orgName, teamSlug, username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a team (must have team or org `owner` role)
         * @summary Delete a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeam(orgName: string, teamSlug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).deleteTeam(orgName, teamSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a tean\'s members
         * @summary List team members
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgTeamMembers(orgName: string, teamSlug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamMemberList>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).getOrgTeamMembers(orgName, teamSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a team by name
         * @summary Get a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeam(orgName: string, teamSlug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).getTeam(orgName, teamSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * search for orgs using query parameters
         * @summary List Teams
         * @param {string} orgName 
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The ID of a user
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrgTeams(orgName: string, search?: Array<string>, name?: Array<string>, member?: Array<string>, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamList>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).listOrgTeams(orgName, search, name, member, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a team (must have team or org `owner` role)
         * @summary Update a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {TeamUpdate} teamUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeam(orgName: string, teamSlug: string, teamUpdate: TeamUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).updateTeam(orgName, teamSlug, teamUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upsert a member role to the team (must have org or team `owner` role)
         * @summary Add or update the role of an Team Member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {TeamRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertOrgTeamMember(orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).upsertOrgTeamMember(orgName, teamSlug, username, role, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new team (must be parent org member)
         * @summary Create a Team
         * @param {string} orgName 
         * @param {TeamCreate} teamCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam(orgName: string, teamCreate: TeamCreate, options?: any): AxiosPromise<CreatedContent> {
            return TeamsApiFp(configuration).createTeam(orgName, teamCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove a team member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgTeamMember(orgName: string, teamSlug: string, username: string, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).deleteOrgTeamMember(orgName, teamSlug, username, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a team (must have team or org `owner` role)
         * @summary Delete a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(orgName: string, teamSlug: string, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).deleteTeam(orgName, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a tean\'s members
         * @summary List team members
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgTeamMembers(orgName: string, teamSlug: string, options?: any): AxiosPromise<TeamMemberList> {
            return TeamsApiFp(configuration).getOrgTeamMembers(orgName, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a team by name
         * @summary Get a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(orgName: string, teamSlug: string, options?: any): AxiosPromise<Team> {
            return TeamsApiFp(configuration).getTeam(orgName, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * search for orgs using query parameters
         * @summary List Teams
         * @param {string} orgName 
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The ID of a user
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgTeams(orgName: string, search?: Array<string>, name?: Array<string>, member?: Array<string>, page?: number, perPage?: number, options?: any): AxiosPromise<TeamList> {
            return TeamsApiFp(configuration).listOrgTeams(orgName, search, name, member, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a team (must have team or org `owner` role)
         * @summary Update a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {TeamUpdate} teamUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(orgName: string, teamSlug: string, teamUpdate: TeamUpdate, options?: any): AxiosPromise<UpdateAccepted> {
            return TeamsApiFp(configuration).updateTeam(orgName, teamSlug, teamUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Upsert a member role to the team (must have org or team `owner` role)
         * @summary Add or update the role of an Team Member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {TeamRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOrgTeamMember(orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options?: any): AxiosPromise<UpdateAccepted> {
            return TeamsApiFp(configuration).upsertOrgTeamMember(orgName, teamSlug, username, role, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateTeamRequest
 */
export interface TeamsApiCreateTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateTeam
     */
    readonly orgName: string

    /**
     * 
     * @type {TeamCreate}
     * @memberof TeamsApiCreateTeam
     */
    readonly teamCreate: TeamCreate
}

/**
 * Request parameters for deleteOrgTeamMember operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteOrgTeamMemberRequest
 */
export interface TeamsApiDeleteOrgTeamMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteOrgTeamMember
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteOrgTeamMember
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteOrgTeamMember
     */
    readonly username: string
}

/**
 * Request parameters for deleteTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteTeamRequest
 */
export interface TeamsApiDeleteTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteTeam
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteTeam
     */
    readonly teamSlug: string
}

/**
 * Request parameters for getOrgTeamMembers operation in TeamsApi.
 * @export
 * @interface TeamsApiGetOrgTeamMembersRequest
 */
export interface TeamsApiGetOrgTeamMembersRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetOrgTeamMembers
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetOrgTeamMembers
     */
    readonly teamSlug: string
}

/**
 * Request parameters for getTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiGetTeamRequest
 */
export interface TeamsApiGetTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTeam
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTeam
     */
    readonly teamSlug: string
}

/**
 * Request parameters for listOrgTeams operation in TeamsApi.
 * @export
 * @interface TeamsApiListOrgTeamsRequest
 */
export interface TeamsApiListOrgTeamsRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListOrgTeams
     */
    readonly orgName: string

    /**
     * You know, for search
     * @type {Array<string>}
     * @memberof TeamsApiListOrgTeams
     */
    readonly search?: Array<string>

    /**
     * The account name
     * @type {Array<string>}
     * @memberof TeamsApiListOrgTeams
     */
    readonly name?: Array<string>

    /**
     * The ID of a user
     * @type {Array<string>}
     * @memberof TeamsApiListOrgTeams
     */
    readonly member?: Array<string>

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof TeamsApiListOrgTeams
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof TeamsApiListOrgTeams
     */
    readonly perPage?: number
}

/**
 * Request parameters for updateTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateTeamRequest
 */
export interface TeamsApiUpdateTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateTeam
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateTeam
     */
    readonly teamSlug: string

    /**
     * 
     * @type {TeamUpdate}
     * @memberof TeamsApiUpdateTeam
     */
    readonly teamUpdate: TeamUpdate
}

/**
 * Request parameters for upsertOrgTeamMember operation in TeamsApi.
 * @export
 * @interface TeamsApiUpsertOrgTeamMemberRequest
 */
export interface TeamsApiUpsertOrgTeamMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpsertOrgTeamMember
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpsertOrgTeamMember
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpsertOrgTeamMember
     */
    readonly username: string

    /**
     * 
     * @type {TeamRoleEnum}
     * @memberof TeamsApiUpsertOrgTeamMember
     */
    readonly role: TeamRoleEnum
}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * Create a new team (must be parent org member)
     * @summary Create a Team
     * @param {TeamsApiCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createTeam(requestParameters: TeamsApiCreateTeamRequest, options?: any) {
        return TeamsApiFp(this.configuration).createTeam(requestParameters.orgName, requestParameters.teamCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a member from the org (must have org `owner` role)
     * @summary Remove a team member
     * @param {TeamsApiDeleteOrgTeamMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteOrgTeamMember(requestParameters: TeamsApiDeleteOrgTeamMemberRequest, options?: any) {
        return TeamsApiFp(this.configuration).deleteOrgTeamMember(requestParameters.orgName, requestParameters.teamSlug, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a team (must have team or org `owner` role)
     * @summary Delete a Team
     * @param {TeamsApiDeleteTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteTeam(requestParameters: TeamsApiDeleteTeamRequest, options?: any) {
        return TeamsApiFp(this.configuration).deleteTeam(requestParameters.orgName, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a tean\'s members
     * @summary List team members
     * @param {TeamsApiGetOrgTeamMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getOrgTeamMembers(requestParameters: TeamsApiGetOrgTeamMembersRequest, options?: any) {
        return TeamsApiFp(this.configuration).getOrgTeamMembers(requestParameters.orgName, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a team by name
     * @summary Get a Team
     * @param {TeamsApiGetTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(requestParameters: TeamsApiGetTeamRequest, options?: any) {
        return TeamsApiFp(this.configuration).getTeam(requestParameters.orgName, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * search for orgs using query parameters
     * @summary List Teams
     * @param {TeamsApiListOrgTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listOrgTeams(requestParameters: TeamsApiListOrgTeamsRequest, options?: any) {
        return TeamsApiFp(this.configuration).listOrgTeams(requestParameters.orgName, requestParameters.search, requestParameters.name, requestParameters.member, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a team (must have team or org `owner` role)
     * @summary Update a Team
     * @param {TeamsApiUpdateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateTeam(requestParameters: TeamsApiUpdateTeamRequest, options?: any) {
        return TeamsApiFp(this.configuration).updateTeam(requestParameters.orgName, requestParameters.teamSlug, requestParameters.teamUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upsert a member role to the team (must have org or team `owner` role)
     * @summary Add or update the role of an Team Member
     * @param {TeamsApiUpsertOrgTeamMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public upsertOrgTeamMember(requestParameters: TeamsApiUpsertOrgTeamMemberRequest, options?: any) {
        return TeamsApiFp(this.configuration).upsertOrgTeamMember(requestParameters.orgName, requestParameters.teamSlug, requestParameters.username, requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }
}
