/* tslint:disable */
/* eslint-disable */
/**
 * Pollination Server
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { PatchTeamDto } from '../models';
// @ts-ignore
import { TeamDto } from '../models';
// @ts-ignore
import { TeamMemberDto } from '../models';
// @ts-ignore
import { TeamRoleEnum } from '../models';
// @ts-ignore
import { UpdateAccepted } from '../models';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new team (must be parent org member)
         * @summary Create a Team
         * @param {string} orgName 
         * @param {PatchTeamDto} patchTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam: async (orgName: string, patchTeamDto: PatchTeamDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling createTeam.');
            }
            // verify required parameter 'patchTeamDto' is not null or undefined
            if (patchTeamDto === null || patchTeamDto === undefined) {
                throw new RequiredError('patchTeamDto','Required parameter patchTeamDto was null or undefined when calling createTeam.');
            }
            const localVarPath = `/orgs/{org_name}/teams`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchTeamDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchTeamDto !== undefined ? patchTeamDto : {}) : (patchTeamDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove a team member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgTeamMember: async (orgName: string, teamSlug: string, username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling deleteOrgTeamMember.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling deleteOrgTeamMember.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling deleteOrgTeamMember.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}/members/{username}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a team (must have team or org `owner` role)
         * @summary Delete a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: async (orgName: string, teamSlug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling deleteTeam.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling deleteTeam.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a tean\'s members
         * @summary List a team\'s members
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgTeamMembers: async (orgName: string, teamSlug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling getOrgTeamMembers.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling getOrgTeamMembers.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}/members`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a team by name
         * @summary Get a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: async (orgName: string, teamSlug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling getTeam.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling getTeam.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * search for orgs using query parameters
         * @summary List Teams
         * @param {string} orgName 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The ID of a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgTeams: async (orgName: string, page?: number, perPage?: number, name?: Array<string>, member?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling listOrgTeams.');
            }
            const localVarPath = `/orgs/{org_name}/teams`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (member) {
                localVarQueryParameter['member'] = member;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a team (must have team or org `owner` role)
         * @summary Update a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {PatchTeamDto} patchTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: async (orgName: string, teamSlug: string, patchTeamDto: PatchTeamDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling updateTeam.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling updateTeam.');
            }
            // verify required parameter 'patchTeamDto' is not null or undefined
            if (patchTeamDto === null || patchTeamDto === undefined) {
                throw new RequiredError('patchTeamDto','Required parameter patchTeamDto was null or undefined when calling updateTeam.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchTeamDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchTeamDto !== undefined ? patchTeamDto : {}) : (patchTeamDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upsert a member role to the team (must have org or team `owner` role)
         * @summary Add or update the role of an Org Member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {TeamRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOrgTeamMember: async (orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            if (orgName === null || orgName === undefined) {
                throw new RequiredError('orgName','Required parameter orgName was null or undefined when calling upsertOrgTeamMember.');
            }
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling upsertOrgTeamMember.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling upsertOrgTeamMember.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling upsertOrgTeamMember.');
            }
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}/members/{username}/{role}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new team (must be parent org member)
         * @summary Create a Team
         * @param {string} orgName 
         * @param {PatchTeamDto} patchTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeam(orgName: string, patchTeamDto: PatchTeamDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).createTeam(orgName, patchTeamDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove a team member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrgTeamMember(orgName: string, teamSlug: string, username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).deleteOrgTeamMember(orgName, teamSlug, username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a team (must have team or org `owner` role)
         * @summary Delete a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeam(orgName: string, teamSlug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).deleteTeam(orgName, teamSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a tean\'s members
         * @summary List a team\'s members
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgTeamMembers(orgName: string, teamSlug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamMemberDto>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).getOrgTeamMembers(orgName, teamSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a team by name
         * @summary Get a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeam(orgName: string, teamSlug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamDto>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).getTeam(orgName, teamSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * search for orgs using query parameters
         * @summary List Teams
         * @param {string} orgName 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The ID of a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrgTeams(orgName: string, page?: number, perPage?: number, name?: Array<string>, member?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamDto>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).listOrgTeams(orgName, page, perPage, name, member, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a team (must have team or org `owner` role)
         * @summary Update a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {PatchTeamDto} patchTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeam(orgName: string, teamSlug: string, patchTeamDto: PatchTeamDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).updateTeam(orgName, teamSlug, patchTeamDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upsert a member role to the team (must have org or team `owner` role)
         * @summary Add or update the role of an Org Member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {TeamRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertOrgTeamMember(orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).upsertOrgTeamMember(orgName, teamSlug, username, role, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new team (must be parent org member)
         * @summary Create a Team
         * @param {string} orgName 
         * @param {PatchTeamDto} patchTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam(orgName: string, patchTeamDto: PatchTeamDto, options?: any): AxiosPromise<CreatedContent> {
            return TeamsApiFp(configuration).createTeam(orgName, patchTeamDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove a team member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgTeamMember(orgName: string, teamSlug: string, username: string, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).deleteOrgTeamMember(orgName, teamSlug, username, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a team (must have team or org `owner` role)
         * @summary Delete a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(orgName: string, teamSlug: string, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).deleteTeam(orgName, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a tean\'s members
         * @summary List a team\'s members
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgTeamMembers(orgName: string, teamSlug: string, options?: any): AxiosPromise<Array<TeamMemberDto>> {
            return TeamsApiFp(configuration).getOrgTeamMembers(orgName, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a team by name
         * @summary Get a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(orgName: string, teamSlug: string, options?: any): AxiosPromise<TeamDto> {
            return TeamsApiFp(configuration).getTeam(orgName, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * search for orgs using query parameters
         * @summary List Teams
         * @param {string} orgName 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The ID of a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgTeams(orgName: string, page?: number, perPage?: number, name?: Array<string>, member?: Array<string>, options?: any): AxiosPromise<Array<TeamDto>> {
            return TeamsApiFp(configuration).listOrgTeams(orgName, page, perPage, name, member, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a team (must have team or org `owner` role)
         * @summary Update a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {PatchTeamDto} patchTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(orgName: string, teamSlug: string, patchTeamDto: PatchTeamDto, options?: any): AxiosPromise<UpdateAccepted> {
            return TeamsApiFp(configuration).updateTeam(orgName, teamSlug, patchTeamDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Upsert a member role to the team (must have org or team `owner` role)
         * @summary Add or update the role of an Org Member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {TeamRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOrgTeamMember(orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options?: any): AxiosPromise<UpdateAccepted> {
            return TeamsApiFp(configuration).upsertOrgTeamMember(orgName, teamSlug, username, role, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - interface
 * @export
 * @interface TeamsApi
 */
export interface TeamsApiInterface {
    /**
     * Create a new team (must be parent org member)
     * @summary Create a Team
     * @param {string} orgName 
     * @param {PatchTeamDto} patchTeamDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    createTeam(orgName: string, patchTeamDto: PatchTeamDto, options?: any): AxiosPromise<CreatedContent>;

    /**
     * Remove a member from the org (must have org `owner` role)
     * @summary Remove a team member
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteOrgTeamMember(orgName: string, teamSlug: string, username: string, options?: any): AxiosPromise<void>;

    /**
     * Delete a team (must have team or org `owner` role)
     * @summary Delete a Team
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteTeam(orgName: string, teamSlug: string, options?: any): AxiosPromise<void>;

    /**
     * Retrieve a tean\'s members
     * @summary List a team\'s members
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getOrgTeamMembers(orgName: string, teamSlug: string, options?: any): AxiosPromise<Array<TeamMemberDto>>;

    /**
     * Retrieve a team by name
     * @summary Get a Team
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeam(orgName: string, teamSlug: string, options?: any): AxiosPromise<TeamDto>;

    /**
     * search for orgs using query parameters
     * @summary List Teams
     * @param {string} orgName 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [name] The account name
     * @param {Array<string>} [member] The ID of a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    listOrgTeams(orgName: string, page?: number, perPage?: number, name?: Array<string>, member?: Array<string>, options?: any): AxiosPromise<Array<TeamDto>>;

    /**
     * Update a team (must have team or org `owner` role)
     * @summary Update a Team
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {PatchTeamDto} patchTeamDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    updateTeam(orgName: string, teamSlug: string, patchTeamDto: PatchTeamDto, options?: any): AxiosPromise<UpdateAccepted>;

    /**
     * Upsert a member role to the team (must have org or team `owner` role)
     * @summary Add or update the role of an Org Member
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {string} username 
     * @param {TeamRoleEnum} role 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    upsertOrgTeamMember(orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options?: any): AxiosPromise<UpdateAccepted>;

}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI implements TeamsApiInterface {
    /**
     * Create a new team (must be parent org member)
     * @summary Create a Team
     * @param {string} orgName 
     * @param {PatchTeamDto} patchTeamDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createTeam(orgName: string, patchTeamDto: PatchTeamDto, options?: any) {
        return TeamsApiFp(this.configuration).createTeam(orgName, patchTeamDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a member from the org (must have org `owner` role)
     * @summary Remove a team member
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteOrgTeamMember(orgName: string, teamSlug: string, username: string, options?: any) {
        return TeamsApiFp(this.configuration).deleteOrgTeamMember(orgName, teamSlug, username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a team (must have team or org `owner` role)
     * @summary Delete a Team
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteTeam(orgName: string, teamSlug: string, options?: any) {
        return TeamsApiFp(this.configuration).deleteTeam(orgName, teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a tean\'s members
     * @summary List a team\'s members
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getOrgTeamMembers(orgName: string, teamSlug: string, options?: any) {
        return TeamsApiFp(this.configuration).getOrgTeamMembers(orgName, teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a team by name
     * @summary Get a Team
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(orgName: string, teamSlug: string, options?: any) {
        return TeamsApiFp(this.configuration).getTeam(orgName, teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * search for orgs using query parameters
     * @summary List Teams
     * @param {string} orgName 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [name] The account name
     * @param {Array<string>} [member] The ID of a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listOrgTeams(orgName: string, page?: number, perPage?: number, name?: Array<string>, member?: Array<string>, options?: any) {
        return TeamsApiFp(this.configuration).listOrgTeams(orgName, page, perPage, name, member, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a team (must have team or org `owner` role)
     * @summary Update a Team
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {PatchTeamDto} patchTeamDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateTeam(orgName: string, teamSlug: string, patchTeamDto: PatchTeamDto, options?: any) {
        return TeamsApiFp(this.configuration).updateTeam(orgName, teamSlug, patchTeamDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upsert a member role to the team (must have org or team `owner` role)
     * @summary Add or update the role of an Org Member
     * @param {string} orgName 
     * @param {string} teamSlug 
     * @param {string} username 
     * @param {TeamRoleEnum} role 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public upsertOrgTeamMember(orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options?: any) {
        return TeamsApiFp(this.configuration).upsertOrgTeamMember(orgName, teamSlug, username, role, options).then((request) => request(this.axios, this.basePath));
    }
}
