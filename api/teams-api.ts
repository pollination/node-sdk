/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreatedContent } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { Team } from '../models';
// @ts-ignore
import type { TeamCreate } from '../models';
// @ts-ignore
import type { TeamList } from '../models';
// @ts-ignore
import type { TeamMemberList } from '../models';
// @ts-ignore
import type { TeamRoleEnum } from '../models';
// @ts-ignore
import type { TeamUpdate } from '../models';
// @ts-ignore
import type { UpdateAccepted } from '../models';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new team (must be parent org member)
         * @summary Create a Team
         * @param {string} orgName 
         * @param {TeamCreate} teamCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam: async (orgName: string, teamCreate: TeamCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('createTeam', 'orgName', orgName)
            // verify required parameter 'teamCreate' is not null or undefined
            assertParamExists('createTeam', 'teamCreate', teamCreate)
            const localVarPath = `/orgs/{org_name}/teams`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove a team member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgTeamMember: async (orgName: string, teamSlug: string, username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('deleteOrgTeamMember', 'orgName', orgName)
            // verify required parameter 'teamSlug' is not null or undefined
            assertParamExists('deleteOrgTeamMember', 'teamSlug', teamSlug)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('deleteOrgTeamMember', 'username', username)
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}/members/{username}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a team (must have team or org `owner` role)
         * @summary Delete a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: async (orgName: string, teamSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('deleteTeam', 'orgName', orgName)
            // verify required parameter 'teamSlug' is not null or undefined
            assertParamExists('deleteTeam', 'teamSlug', teamSlug)
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a tean\'s members
         * @summary List team members
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgTeamMembers: async (orgName: string, teamSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('getOrgTeamMembers', 'orgName', orgName)
            // verify required parameter 'teamSlug' is not null or undefined
            assertParamExists('getOrgTeamMembers', 'teamSlug', teamSlug)
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}/members`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a team by name
         * @summary Get a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: async (orgName: string, teamSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('getTeam', 'orgName', orgName)
            // verify required parameter 'teamSlug' is not null or undefined
            assertParamExists('getTeam', 'teamSlug', teamSlug)
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * search for orgs using query parameters
         * @summary List Teams
         * @param {string} orgName 
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The ID of a user
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgTeams: async (orgName: string, search?: Array<string>, name?: Array<string>, member?: Array<string>, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('listOrgTeams', 'orgName', orgName)
            const localVarPath = `/orgs/{org_name}/teams`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search) {
                localVarQueryParameter['search'] = search;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (member) {
                localVarQueryParameter['member'] = member;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a team (must have team or org `owner` role)
         * @summary Update a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {TeamUpdate} teamUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: async (orgName: string, teamSlug: string, teamUpdate: TeamUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('updateTeam', 'orgName', orgName)
            // verify required parameter 'teamSlug' is not null or undefined
            assertParamExists('updateTeam', 'teamSlug', teamSlug)
            // verify required parameter 'teamUpdate' is not null or undefined
            assertParamExists('updateTeam', 'teamUpdate', teamUpdate)
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upsert a member role to the team (must have org or team `owner` role)
         * @summary Add or update the role of an Team Member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {TeamRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOrgTeamMember: async (orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('upsertOrgTeamMember', 'orgName', orgName)
            // verify required parameter 'teamSlug' is not null or undefined
            assertParamExists('upsertOrgTeamMember', 'teamSlug', teamSlug)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('upsertOrgTeamMember', 'username', username)
            // verify required parameter 'role' is not null or undefined
            assertParamExists('upsertOrgTeamMember', 'role', role)
            const localVarPath = `/orgs/{org_name}/teams/{team_slug}/members/{username}/{role}`
                .replace(`{${"org_name"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new team (must be parent org member)
         * @summary Create a Team
         * @param {string} orgName 
         * @param {TeamCreate} teamCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeam(orgName: string, teamCreate: TeamCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeam(orgName, teamCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.createTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove a team member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrgTeamMember(orgName: string, teamSlug: string, username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrgTeamMember(orgName, teamSlug, username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.deleteOrgTeamMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a team (must have team or org `owner` role)
         * @summary Delete a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeam(orgName: string, teamSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeam(orgName, teamSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.deleteTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a tean\'s members
         * @summary List team members
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgTeamMembers(orgName: string, teamSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamMemberList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgTeamMembers(orgName, teamSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.getOrgTeamMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a team by name
         * @summary Get a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeam(orgName: string, teamSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeam(orgName, teamSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.getTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * search for orgs using query parameters
         * @summary List Teams
         * @param {string} orgName 
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The ID of a user
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrgTeams(orgName: string, search?: Array<string>, name?: Array<string>, member?: Array<string>, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrgTeams(orgName, search, name, member, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.listOrgTeams']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a team (must have team or org `owner` role)
         * @summary Update a Team
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {TeamUpdate} teamUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeam(orgName: string, teamSlug: string, teamUpdate: TeamUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeam(orgName, teamSlug, teamUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.updateTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upsert a member role to the team (must have org or team `owner` role)
         * @summary Add or update the role of an Team Member
         * @param {string} orgName 
         * @param {string} teamSlug 
         * @param {string} username 
         * @param {TeamRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertOrgTeamMember(orgName: string, teamSlug: string, username: string, role: TeamRoleEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertOrgTeamMember(orgName, teamSlug, username, role, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.upsertOrgTeamMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * Create a new team (must be parent org member)
         * @summary Create a Team
         * @param {TeamsApiCreateTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam(requestParameters: TeamsApiCreateTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedContent> {
            return localVarFp.createTeam(requestParameters.orgName, requestParameters.teamCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove a team member
         * @param {TeamsApiDeleteOrgTeamMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgTeamMember(requestParameters: TeamsApiDeleteOrgTeamMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOrgTeamMember(requestParameters.orgName, requestParameters.teamSlug, requestParameters.username, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a team (must have team or org `owner` role)
         * @summary Delete a Team
         * @param {TeamsApiDeleteTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(requestParameters: TeamsApiDeleteTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTeam(requestParameters.orgName, requestParameters.teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a tean\'s members
         * @summary List team members
         * @param {TeamsApiGetOrgTeamMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgTeamMembers(requestParameters: TeamsApiGetOrgTeamMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<TeamMemberList> {
            return localVarFp.getOrgTeamMembers(requestParameters.orgName, requestParameters.teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a team by name
         * @summary Get a Team
         * @param {TeamsApiGetTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(requestParameters: TeamsApiGetTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<Team> {
            return localVarFp.getTeam(requestParameters.orgName, requestParameters.teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * search for orgs using query parameters
         * @summary List Teams
         * @param {TeamsApiListOrgTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgTeams(requestParameters: TeamsApiListOrgTeamsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TeamList> {
            return localVarFp.listOrgTeams(requestParameters.orgName, requestParameters.search, requestParameters.name, requestParameters.member, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a team (must have team or org `owner` role)
         * @summary Update a Team
         * @param {TeamsApiUpdateTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(requestParameters: TeamsApiUpdateTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAccepted> {
            return localVarFp.updateTeam(requestParameters.orgName, requestParameters.teamSlug, requestParameters.teamUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Upsert a member role to the team (must have org or team `owner` role)
         * @summary Add or update the role of an Team Member
         * @param {TeamsApiUpsertOrgTeamMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOrgTeamMember(requestParameters: TeamsApiUpsertOrgTeamMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAccepted> {
            return localVarFp.upsertOrgTeamMember(requestParameters.orgName, requestParameters.teamSlug, requestParameters.username, requestParameters.role, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateTeamRequest
 */
export interface TeamsApiCreateTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateTeam
     */
    readonly orgName: string

    /**
     * 
     * @type {TeamCreate}
     * @memberof TeamsApiCreateTeam
     */
    readonly teamCreate: TeamCreate
}

/**
 * Request parameters for deleteOrgTeamMember operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteOrgTeamMemberRequest
 */
export interface TeamsApiDeleteOrgTeamMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteOrgTeamMember
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteOrgTeamMember
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteOrgTeamMember
     */
    readonly username: string
}

/**
 * Request parameters for deleteTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteTeamRequest
 */
export interface TeamsApiDeleteTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteTeam
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteTeam
     */
    readonly teamSlug: string
}

/**
 * Request parameters for getOrgTeamMembers operation in TeamsApi.
 * @export
 * @interface TeamsApiGetOrgTeamMembersRequest
 */
export interface TeamsApiGetOrgTeamMembersRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetOrgTeamMembers
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetOrgTeamMembers
     */
    readonly teamSlug: string
}

/**
 * Request parameters for getTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiGetTeamRequest
 */
export interface TeamsApiGetTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTeam
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTeam
     */
    readonly teamSlug: string
}

/**
 * Request parameters for listOrgTeams operation in TeamsApi.
 * @export
 * @interface TeamsApiListOrgTeamsRequest
 */
export interface TeamsApiListOrgTeamsRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListOrgTeams
     */
    readonly orgName: string

    /**
     * You know, for search
     * @type {Array<string>}
     * @memberof TeamsApiListOrgTeams
     */
    readonly search?: Array<string>

    /**
     * The account name
     * @type {Array<string>}
     * @memberof TeamsApiListOrgTeams
     */
    readonly name?: Array<string>

    /**
     * The ID of a user
     * @type {Array<string>}
     * @memberof TeamsApiListOrgTeams
     */
    readonly member?: Array<string>

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof TeamsApiListOrgTeams
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof TeamsApiListOrgTeams
     */
    readonly perPage?: number
}

/**
 * Request parameters for updateTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateTeamRequest
 */
export interface TeamsApiUpdateTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateTeam
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateTeam
     */
    readonly teamSlug: string

    /**
     * 
     * @type {TeamUpdate}
     * @memberof TeamsApiUpdateTeam
     */
    readonly teamUpdate: TeamUpdate
}

/**
 * Request parameters for upsertOrgTeamMember operation in TeamsApi.
 * @export
 * @interface TeamsApiUpsertOrgTeamMemberRequest
 */
export interface TeamsApiUpsertOrgTeamMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpsertOrgTeamMember
     */
    readonly orgName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpsertOrgTeamMember
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpsertOrgTeamMember
     */
    readonly username: string

    /**
     * 
     * @type {TeamRoleEnum}
     * @memberof TeamsApiUpsertOrgTeamMember
     */
    readonly role: TeamRoleEnum
}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * Create a new team (must be parent org member)
     * @summary Create a Team
     * @param {TeamsApiCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createTeam(requestParameters: TeamsApiCreateTeamRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createTeam(requestParameters.orgName, requestParameters.teamCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a member from the org (must have org `owner` role)
     * @summary Remove a team member
     * @param {TeamsApiDeleteOrgTeamMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteOrgTeamMember(requestParameters: TeamsApiDeleteOrgTeamMemberRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteOrgTeamMember(requestParameters.orgName, requestParameters.teamSlug, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a team (must have team or org `owner` role)
     * @summary Delete a Team
     * @param {TeamsApiDeleteTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteTeam(requestParameters: TeamsApiDeleteTeamRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteTeam(requestParameters.orgName, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a tean\'s members
     * @summary List team members
     * @param {TeamsApiGetOrgTeamMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getOrgTeamMembers(requestParameters: TeamsApiGetOrgTeamMembersRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getOrgTeamMembers(requestParameters.orgName, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a team by name
     * @summary Get a Team
     * @param {TeamsApiGetTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(requestParameters: TeamsApiGetTeamRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeam(requestParameters.orgName, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * search for orgs using query parameters
     * @summary List Teams
     * @param {TeamsApiListOrgTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listOrgTeams(requestParameters: TeamsApiListOrgTeamsRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listOrgTeams(requestParameters.orgName, requestParameters.search, requestParameters.name, requestParameters.member, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a team (must have team or org `owner` role)
     * @summary Update a Team
     * @param {TeamsApiUpdateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateTeam(requestParameters: TeamsApiUpdateTeamRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateTeam(requestParameters.orgName, requestParameters.teamSlug, requestParameters.teamUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upsert a member role to the team (must have org or team `owner` role)
     * @summary Add or update the role of an Team Member
     * @param {TeamsApiUpsertOrgTeamMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public upsertOrgTeamMember(requestParameters: TeamsApiUpsertOrgTeamMemberRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).upsertOrgTeamMember(requestParameters.orgName, requestParameters.teamSlug, requestParameters.username, requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }
}

