/* tslint:disable */
/* eslint-disable */
/**
 * Pollination Server
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: v0.9.1
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Accepted } from '../models';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { FileMeta } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SimulationList } from '../models';
// @ts-ignore
import { SimulationStatus } from '../models';
// @ts-ignore
import { SubmitSimulation } from '../models';
/**
 * SimulationsApi - axios parameter creator
 * @export
 */
export const SimulationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new simulation.
         * @summary Schedule a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {SubmitSimulation} submitSimulation 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimulation: async (owner: string, name: string, submitSimulation: SubmitSimulation, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createSimulation.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createSimulation.');
            }
            // verify required parameter 'submitSimulation' is not null or undefined
            if (submitSimulation === null || submitSimulation === undefined) {
                throw new RequiredError('submitSimulation','Required parameter submitSimulation was null or undefined when calling createSimulation.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof submitSimulation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(submitSimulation !== undefined ? submitSimulation : {}) : (submitSimulation || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a download link for an artifact in a simulation folder
         * @summary Download an artifact from the simulation folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSimulationArtifact: async (owner: string, name: string, simulationId: string, path?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling downloadSimulationArtifact.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling downloadSimulationArtifact.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling downloadSimulationArtifact.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/artifacts/download`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a simulation.
         * @summary Get a Simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulation: async (owner: string, name: string, simulationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getSimulation.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getSimulation.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling getSimulation.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * get simulation inputs
         * @summary Get simulation inputs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationInputs: async (owner: string, name: string, simulationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getSimulationInputs.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getSimulationInputs.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling getSimulationInputs.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/inputs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * get simulation logs
         * @summary Get simulation logs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationLogs: async (owner: string, name: string, simulationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getSimulationLogs.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getSimulationLogs.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling getSimulationLogs.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/logs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * get simulation output artifact
         * @summary Get simulation output artifact by name
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationOutputArtifact: async (owner: string, name: string, simulationId: string, artifactName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getSimulationOutputArtifact.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getSimulationOutputArtifact.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling getSimulationOutputArtifact.');
            }
            // verify required parameter 'artifactName' is not null or undefined
            if (artifactName === null || artifactName === undefined) {
                throw new RequiredError('artifactName','Required parameter artifactName was null or undefined when calling getSimulationOutputArtifact.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/outputs/artifacts/{artifact_name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)))
                .replace(`{${"artifact_name"}}`, encodeURIComponent(String(artifactName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * get simulation outputs
         * @summary Get simulation outputs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationOutputs: async (owner: string, name: string, simulationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getSimulationOutputs.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getSimulationOutputs.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling getSimulationOutputs.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/outputs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * get simulation task logs
         * @summary Get simulation logs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationTaskLogs: async (owner: string, name: string, simulationId: string, taskId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getSimulationTaskLogs.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getSimulationTaskLogs.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling getSimulationTaskLogs.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling getSimulationTaskLogs.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/task/{task_id}/logs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of artifacts in a simulation folder
         * @summary List artifacts in a simulation folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimulationArtifacts: async (owner: string, name: string, simulationId: string, page?: number, perPage?: number, path?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listSimulationArtifacts.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listSimulationArtifacts.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling listSimulationArtifacts.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/artifacts`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (path) {
                localVarQueryParameter['path'] = path;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of simulations.
         * @summary List simulations
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [id] The ID of a simulation to search for
         * @param {Array<string>} [status] The status of the simulation to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimulations: async (owner: string, name: string, page?: number, perPage?: number, id?: Array<string>, status?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listSimulations.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listSimulations.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * resume a simulation
         * @summary resume a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSimulation: async (owner: string, name: string, simulationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling resumeSimulation.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling resumeSimulation.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling resumeSimulation.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/resume`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Stop a simulation.
         * @summary Stop a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSimulation: async (owner: string, name: string, simulationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling stopSimulation.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling stopSimulation.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling stopSimulation.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/stop`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Suspend a simulation.
         * @summary Suspend a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendSimulation: async (owner: string, name: string, simulationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling suspendSimulation.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling suspendSimulation.');
            }
            // verify required parameter 'simulationId' is not null or undefined
            if (simulationId === null || simulationId === undefined) {
                throw new RequiredError('simulationId','Required parameter simulationId was null or undefined when calling suspendSimulation.');
            }
            const localVarPath = `/projects/{owner}/{name}/simulations/{simulation_id}/suspend`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CompulsoryAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SimulationsApi - functional programming interface
 * @export
 */
export const SimulationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new simulation.
         * @summary Schedule a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {SubmitSimulation} submitSimulation 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSimulation(owner: string, name: string, submitSimulation: SubmitSimulation, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).createSimulation(owner, name, submitSimulation, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a download link for an artifact in a simulation folder
         * @summary Download an artifact from the simulation folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadSimulationArtifact(owner: string, name: string, simulationId: string, path?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).downloadSimulationArtifact(owner, name, simulationId, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a simulation.
         * @summary Get a Simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimulation(owner: string, name: string, simulationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimulationStatus>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).getSimulation(owner, name, simulationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get simulation inputs
         * @summary Get simulation inputs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimulationInputs(owner: string, name: string, simulationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).getSimulationInputs(owner, name, simulationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get simulation logs
         * @summary Get simulation logs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimulationLogs(owner: string, name: string, simulationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).getSimulationLogs(owner, name, simulationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get simulation output artifact
         * @summary Get simulation output artifact by name
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimulationOutputArtifact(owner: string, name: string, simulationId: string, artifactName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).getSimulationOutputArtifact(owner, name, simulationId, artifactName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get simulation outputs
         * @summary Get simulation outputs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimulationOutputs(owner: string, name: string, simulationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).getSimulationOutputs(owner, name, simulationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get simulation task logs
         * @summary Get simulation logs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimulationTaskLogs(owner: string, name: string, simulationId: string, taskId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).getSimulationTaskLogs(owner, name, simulationId, taskId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of artifacts in a simulation folder
         * @summary List artifacts in a simulation folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSimulationArtifacts(owner: string, name: string, simulationId: string, page?: number, perPage?: number, path?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileMeta>>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).listSimulationArtifacts(owner, name, simulationId, page, perPage, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of simulations.
         * @summary List simulations
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [id] The ID of a simulation to search for
         * @param {Array<string>} [status] The status of the simulation to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSimulations(owner: string, name: string, page?: number, perPage?: number, id?: Array<string>, status?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimulationList>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).listSimulations(owner, name, page, perPage, id, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * resume a simulation
         * @summary resume a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeSimulation(owner: string, name: string, simulationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Accepted>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).resumeSimulation(owner, name, simulationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Stop a simulation.
         * @summary Stop a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopSimulation(owner: string, name: string, simulationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Accepted>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).stopSimulation(owner, name, simulationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Suspend a simulation.
         * @summary Suspend a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suspendSimulation(owner: string, name: string, simulationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Accepted>> {
            const localVarAxiosArgs = await SimulationsApiAxiosParamCreator(configuration).suspendSimulation(owner, name, simulationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SimulationsApi - factory interface
 * @export
 */
export const SimulationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new simulation.
         * @summary Schedule a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {SubmitSimulation} submitSimulation 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimulation(owner: string, name: string, submitSimulation: SubmitSimulation, authorization?: string, options?: any): AxiosPromise<CreatedContent> {
            return SimulationsApiFp(configuration).createSimulation(owner, name, submitSimulation, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a download link for an artifact in a simulation folder
         * @summary Download an artifact from the simulation folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSimulationArtifact(owner: string, name: string, simulationId: string, path?: string, options?: any): AxiosPromise<any> {
            return SimulationsApiFp(configuration).downloadSimulationArtifact(owner, name, simulationId, path, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a simulation.
         * @summary Get a Simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulation(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<SimulationStatus> {
            return SimulationsApiFp(configuration).getSimulation(owner, name, simulationId, options).then((request) => request(axios, basePath));
        },
        /**
         * get simulation inputs
         * @summary Get simulation inputs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationInputs(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<any> {
            return SimulationsApiFp(configuration).getSimulationInputs(owner, name, simulationId, options).then((request) => request(axios, basePath));
        },
        /**
         * get simulation logs
         * @summary Get simulation logs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationLogs(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<any> {
            return SimulationsApiFp(configuration).getSimulationLogs(owner, name, simulationId, options).then((request) => request(axios, basePath));
        },
        /**
         * get simulation output artifact
         * @summary Get simulation output artifact by name
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationOutputArtifact(owner: string, name: string, simulationId: string, artifactName: string, options?: any): AxiosPromise<any> {
            return SimulationsApiFp(configuration).getSimulationOutputArtifact(owner, name, simulationId, artifactName, options).then((request) => request(axios, basePath));
        },
        /**
         * get simulation outputs
         * @summary Get simulation outputs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationOutputs(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<any> {
            return SimulationsApiFp(configuration).getSimulationOutputs(owner, name, simulationId, options).then((request) => request(axios, basePath));
        },
        /**
         * get simulation task logs
         * @summary Get simulation logs
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationTaskLogs(owner: string, name: string, simulationId: string, taskId: string, options?: any): AxiosPromise<string> {
            return SimulationsApiFp(configuration).getSimulationTaskLogs(owner, name, simulationId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of artifacts in a simulation folder
         * @summary List artifacts in a simulation folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimulationArtifacts(owner: string, name: string, simulationId: string, page?: number, perPage?: number, path?: Array<string>, options?: any): AxiosPromise<Array<FileMeta>> {
            return SimulationsApiFp(configuration).listSimulationArtifacts(owner, name, simulationId, page, perPage, path, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of simulations.
         * @summary List simulations
         * @param {string} owner 
         * @param {string} name 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [id] The ID of a simulation to search for
         * @param {Array<string>} [status] The status of the simulation to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimulations(owner: string, name: string, page?: number, perPage?: number, id?: Array<string>, status?: Array<string>, options?: any): AxiosPromise<SimulationList> {
            return SimulationsApiFp(configuration).listSimulations(owner, name, page, perPage, id, status, options).then((request) => request(axios, basePath));
        },
        /**
         * resume a simulation
         * @summary resume a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSimulation(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<Accepted> {
            return SimulationsApiFp(configuration).resumeSimulation(owner, name, simulationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Stop a simulation.
         * @summary Stop a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSimulation(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<Accepted> {
            return SimulationsApiFp(configuration).stopSimulation(owner, name, simulationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Suspend a simulation.
         * @summary Suspend a simulation
         * @param {string} owner 
         * @param {string} name 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendSimulation(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<Accepted> {
            return SimulationsApiFp(configuration).suspendSimulation(owner, name, simulationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SimulationsApi - interface
 * @export
 * @interface SimulationsApi
 */
export interface SimulationsApiInterface {
    /**
     * Create a new simulation.
     * @summary Schedule a simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {SubmitSimulation} submitSimulation 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    createSimulation(owner: string, name: string, submitSimulation: SubmitSimulation, authorization?: string, options?: any): AxiosPromise<CreatedContent>;

    /**
     * Get a download link for an artifact in a simulation folder
     * @summary Download an artifact from the simulation folder
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {string} [path] The path to an file within a project folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    downloadSimulationArtifact(owner: string, name: string, simulationId: string, path?: string, options?: any): AxiosPromise<any>;

    /**
     * Retrieve a simulation.
     * @summary Get a Simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    getSimulation(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<SimulationStatus>;

    /**
     * get simulation inputs
     * @summary Get simulation inputs
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    getSimulationInputs(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<any>;

    /**
     * get simulation logs
     * @summary Get simulation logs
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    getSimulationLogs(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<any>;

    /**
     * get simulation output artifact
     * @summary Get simulation output artifact by name
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {string} artifactName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    getSimulationOutputArtifact(owner: string, name: string, simulationId: string, artifactName: string, options?: any): AxiosPromise<any>;

    /**
     * get simulation outputs
     * @summary Get simulation outputs
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    getSimulationOutputs(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<any>;

    /**
     * get simulation task logs
     * @summary Get simulation logs
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    getSimulationTaskLogs(owner: string, name: string, simulationId: string, taskId: string, options?: any): AxiosPromise<string>;

    /**
     * Retrieve a list of artifacts in a simulation folder
     * @summary List artifacts in a simulation folder
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [path] The path to an file within a project folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    listSimulationArtifacts(owner: string, name: string, simulationId: string, page?: number, perPage?: number, path?: Array<string>, options?: any): AxiosPromise<Array<FileMeta>>;

    /**
     * Retrieve a list of simulations.
     * @summary List simulations
     * @param {string} owner 
     * @param {string} name 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [id] The ID of a simulation to search for
     * @param {Array<string>} [status] The status of the simulation to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    listSimulations(owner: string, name: string, page?: number, perPage?: number, id?: Array<string>, status?: Array<string>, options?: any): AxiosPromise<SimulationList>;

    /**
     * resume a simulation
     * @summary resume a simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    resumeSimulation(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<Accepted>;

    /**
     * Stop a simulation.
     * @summary Stop a simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    stopSimulation(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<Accepted>;

    /**
     * Suspend a simulation.
     * @summary Suspend a simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApiInterface
     */
    suspendSimulation(owner: string, name: string, simulationId: string, options?: any): AxiosPromise<Accepted>;

}

/**
 * SimulationsApi - object-oriented interface
 * @export
 * @class SimulationsApi
 * @extends {BaseAPI}
 */
export class SimulationsApi extends BaseAPI implements SimulationsApiInterface {
    /**
     * Create a new simulation.
     * @summary Schedule a simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {SubmitSimulation} submitSimulation 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public createSimulation(owner: string, name: string, submitSimulation: SubmitSimulation, authorization?: string, options?: any) {
        return SimulationsApiFp(this.configuration).createSimulation(owner, name, submitSimulation, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a download link for an artifact in a simulation folder
     * @summary Download an artifact from the simulation folder
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {string} [path] The path to an file within a project folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public downloadSimulationArtifact(owner: string, name: string, simulationId: string, path?: string, options?: any) {
        return SimulationsApiFp(this.configuration).downloadSimulationArtifact(owner, name, simulationId, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a simulation.
     * @summary Get a Simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public getSimulation(owner: string, name: string, simulationId: string, options?: any) {
        return SimulationsApiFp(this.configuration).getSimulation(owner, name, simulationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get simulation inputs
     * @summary Get simulation inputs
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public getSimulationInputs(owner: string, name: string, simulationId: string, options?: any) {
        return SimulationsApiFp(this.configuration).getSimulationInputs(owner, name, simulationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get simulation logs
     * @summary Get simulation logs
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public getSimulationLogs(owner: string, name: string, simulationId: string, options?: any) {
        return SimulationsApiFp(this.configuration).getSimulationLogs(owner, name, simulationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get simulation output artifact
     * @summary Get simulation output artifact by name
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {string} artifactName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public getSimulationOutputArtifact(owner: string, name: string, simulationId: string, artifactName: string, options?: any) {
        return SimulationsApiFp(this.configuration).getSimulationOutputArtifact(owner, name, simulationId, artifactName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get simulation outputs
     * @summary Get simulation outputs
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public getSimulationOutputs(owner: string, name: string, simulationId: string, options?: any) {
        return SimulationsApiFp(this.configuration).getSimulationOutputs(owner, name, simulationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get simulation task logs
     * @summary Get simulation logs
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public getSimulationTaskLogs(owner: string, name: string, simulationId: string, taskId: string, options?: any) {
        return SimulationsApiFp(this.configuration).getSimulationTaskLogs(owner, name, simulationId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of artifacts in a simulation folder
     * @summary List artifacts in a simulation folder
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [path] The path to an file within a project folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public listSimulationArtifacts(owner: string, name: string, simulationId: string, page?: number, perPage?: number, path?: Array<string>, options?: any) {
        return SimulationsApiFp(this.configuration).listSimulationArtifacts(owner, name, simulationId, page, perPage, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of simulations.
     * @summary List simulations
     * @param {string} owner 
     * @param {string} name 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [id] The ID of a simulation to search for
     * @param {Array<string>} [status] The status of the simulation to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public listSimulations(owner: string, name: string, page?: number, perPage?: number, id?: Array<string>, status?: Array<string>, options?: any) {
        return SimulationsApiFp(this.configuration).listSimulations(owner, name, page, perPage, id, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * resume a simulation
     * @summary resume a simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public resumeSimulation(owner: string, name: string, simulationId: string, options?: any) {
        return SimulationsApiFp(this.configuration).resumeSimulation(owner, name, simulationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stop a simulation.
     * @summary Stop a simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public stopSimulation(owner: string, name: string, simulationId: string, options?: any) {
        return SimulationsApiFp(this.configuration).stopSimulation(owner, name, simulationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Suspend a simulation.
     * @summary Suspend a simulation
     * @param {string} owner 
     * @param {string} name 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationsApi
     */
    public suspendSimulation(owner: string, name: string, simulationId: string, options?: any) {
        return SimulationsApiFp(this.configuration).suspendSimulation(owner, name, simulationId, options).then((request) => request(this.axios, this.basePath));
    }
}
