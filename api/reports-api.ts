/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.7.1
 * Contact: info@pollination.solutions
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { ReportCADLicenseUsage } from '../models';
// @ts-ignore
import type { ReportComputeUsage } from '../models';
// @ts-ignore
import type { ReportOrganizationMemberUsage } from '../models';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get cad_license usage report for an account
         * @summary Get CAD license usage report for an account
         * @param {string} name 
         * @param {string} [fromDate] 
         * @param {string} [toDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCadLicenseUsageReport: async (name: string, fromDate?: string, toDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getCadLicenseUsageReport', 'name', name)
            const localVarPath = `/reports/{name}/cad-license-usage`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString().substring(0,10) :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString().substring(0,10) :
                    toDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get compute usage report for an account
         * @summary Get compute usage report for an account
         * @param {string} name 
         * @param {string} [fromDate] 
         * @param {string} [toDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComputeUsageReport: async (name: string, fromDate?: string, toDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getComputeUsageReport', 'name', name)
            const localVarPath = `/reports/{name}/compute-usage`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString().substring(0,10) :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString().substring(0,10) :
                    toDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get compute usage report for an account
         * @summary Get organization member usage report for an organization account
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgMemberUsageReport: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getOrgMemberUsageReport', 'name', name)
            const localVarPath = `/reports/{name}/organization-member-usage`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get cad_license usage report for an account
         * @summary Get CAD license usage report for an account
         * @param {string} name 
         * @param {string} [fromDate] 
         * @param {string} [toDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCadLicenseUsageReport(name: string, fromDate?: string, toDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportCADLicenseUsage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCadLicenseUsageReport(name, fromDate, toDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.getCadLicenseUsageReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get compute usage report for an account
         * @summary Get compute usage report for an account
         * @param {string} name 
         * @param {string} [fromDate] 
         * @param {string} [toDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComputeUsageReport(name: string, fromDate?: string, toDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportComputeUsage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComputeUsageReport(name, fromDate, toDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.getComputeUsageReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get compute usage report for an account
         * @summary Get organization member usage report for an organization account
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgMemberUsageReport(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOrganizationMemberUsage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgMemberUsageReport(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.getOrgMemberUsageReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Get cad_license usage report for an account
         * @summary Get CAD license usage report for an account
         * @param {ReportsApiGetCadLicenseUsageReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCadLicenseUsageReport(requestParameters: ReportsApiGetCadLicenseUsageReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReportCADLicenseUsage> {
            return localVarFp.getCadLicenseUsageReport(requestParameters.name, requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get compute usage report for an account
         * @summary Get compute usage report for an account
         * @param {ReportsApiGetComputeUsageReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComputeUsageReport(requestParameters: ReportsApiGetComputeUsageReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReportComputeUsage> {
            return localVarFp.getComputeUsageReport(requestParameters.name, requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get compute usage report for an account
         * @summary Get organization member usage report for an organization account
         * @param {ReportsApiGetOrgMemberUsageReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgMemberUsageReport(requestParameters: ReportsApiGetOrgMemberUsageReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReportOrganizationMemberUsage> {
            return localVarFp.getOrgMemberUsageReport(requestParameters.name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCadLicenseUsageReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetCadLicenseUsageReportRequest
 */
export interface ReportsApiGetCadLicenseUsageReportRequest {
    /**
     * 
     * @type {string}
     * @memberof ReportsApiGetCadLicenseUsageReport
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof ReportsApiGetCadLicenseUsageReport
     */
    readonly fromDate?: string

    /**
     * 
     * @type {string}
     * @memberof ReportsApiGetCadLicenseUsageReport
     */
    readonly toDate?: string
}

/**
 * Request parameters for getComputeUsageReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetComputeUsageReportRequest
 */
export interface ReportsApiGetComputeUsageReportRequest {
    /**
     * 
     * @type {string}
     * @memberof ReportsApiGetComputeUsageReport
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof ReportsApiGetComputeUsageReport
     */
    readonly fromDate?: string

    /**
     * 
     * @type {string}
     * @memberof ReportsApiGetComputeUsageReport
     */
    readonly toDate?: string
}

/**
 * Request parameters for getOrgMemberUsageReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetOrgMemberUsageReportRequest
 */
export interface ReportsApiGetOrgMemberUsageReportRequest {
    /**
     * 
     * @type {string}
     * @memberof ReportsApiGetOrgMemberUsageReport
     */
    readonly name: string
}

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * Get cad_license usage report for an account
     * @summary Get CAD license usage report for an account
     * @param {ReportsApiGetCadLicenseUsageReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getCadLicenseUsageReport(requestParameters: ReportsApiGetCadLicenseUsageReportRequest, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getCadLicenseUsageReport(requestParameters.name, requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get compute usage report for an account
     * @summary Get compute usage report for an account
     * @param {ReportsApiGetComputeUsageReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getComputeUsageReport(requestParameters: ReportsApiGetComputeUsageReportRequest, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getComputeUsageReport(requestParameters.name, requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get compute usage report for an account
     * @summary Get organization member usage report for an organization account
     * @param {ReportsApiGetOrgMemberUsageReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getOrgMemberUsageReport(requestParameters: ReportsApiGetOrgMemberUsageReportRequest, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getOrgMemberUsageReport(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}

