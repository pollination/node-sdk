/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.24.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Organization } from '../models';
// @ts-ignore
import { OrganizationCreate } from '../models';
// @ts-ignore
import { OrganizationList } from '../models';
// @ts-ignore
import { OrganizationMemberList } from '../models';
// @ts-ignore
import { OrganizationRoleEnum } from '../models';
// @ts-ignore
import { OrganizationUpdate } from '../models';
// @ts-ignore
import { UpdateAccepted } from '../models';
/**
 * OrgsApi - axios parameter creator
 * @export
 */
export const OrgsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new org.
         * @summary Create an Org
         * @param {OrganizationCreate} organizationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrg: async (organizationCreate: OrganizationCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationCreate' is not null or undefined
            if (organizationCreate === null || organizationCreate === undefined) {
                throw new RequiredError('organizationCreate','Required parameter organizationCreate was null or undefined when calling createOrg.');
            }
            const localVarPath = `/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof organizationCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(organizationCreate !== undefined ? organizationCreate : {}) : (organizationCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a org (must have `admin` permission)
         * @summary Delete an Org
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrg: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteOrg.');
            }
            const localVarPath = `/orgs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove an Org member
         * @param {string} name 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgMember: async (name: string, username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteOrgMember.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling deleteOrgMember.');
            }
            const localVarPath = `/orgs/{name}/members/{username}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a org by name
         * @summary Get an Org
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrg: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getOrg.');
            }
            const localVarPath = `/orgs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a org\'s members
         * @summary List organization members
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgMembers: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getOrgMembers.');
            }
            const localVarPath = `/orgs/{name}/members`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * search for orgs using query parameters
         * @summary List Orgs
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The username of a user
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgs: async (search?: Array<string>, name?: Array<string>, member?: Array<string>, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (search) {
                localVarQueryParameter['search'] = search;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (member) {
                localVarQueryParameter['member'] = member;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a org (must have org `owner` role)
         * @summary Update an Org
         * @param {string} name 
         * @param {OrganizationUpdate} organizationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrg: async (name: string, organizationUpdate: OrganizationUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateOrg.');
            }
            // verify required parameter 'organizationUpdate' is not null or undefined
            if (organizationUpdate === null || organizationUpdate === undefined) {
                throw new RequiredError('organizationUpdate','Required parameter organizationUpdate was null or undefined when calling updateOrg.');
            }
            const localVarPath = `/orgs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof organizationUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(organizationUpdate !== undefined ? organizationUpdate : {}) : (organizationUpdate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upsert a member role to the org (must have org `owner` role)
         * @summary Add or update the role of an Org Member
         * @param {string} name 
         * @param {string} username 
         * @param {OrganizationRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOrgMember: async (name: string, username: string, role: OrganizationRoleEnum, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling upsertOrgMember.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling upsertOrgMember.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling upsertOrgMember.');
            }
            const localVarPath = `/orgs/{name}/members/{username}/{role}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgsApi - functional programming interface
 * @export
 */
export const OrgsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new org.
         * @summary Create an Org
         * @param {OrganizationCreate} organizationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrg(organizationCreate: OrganizationCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await OrgsApiAxiosParamCreator(configuration).createOrg(organizationCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a org (must have `admin` permission)
         * @summary Delete an Org
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrg(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await OrgsApiAxiosParamCreator(configuration).deleteOrg(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove an Org member
         * @param {string} name 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrgMember(name: string, username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await OrgsApiAxiosParamCreator(configuration).deleteOrgMember(name, username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a org by name
         * @summary Get an Org
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrg(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await OrgsApiAxiosParamCreator(configuration).getOrg(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a org\'s members
         * @summary List organization members
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgMembers(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationMemberList>> {
            const localVarAxiosArgs = await OrgsApiAxiosParamCreator(configuration).getOrgMembers(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * search for orgs using query parameters
         * @summary List Orgs
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The username of a user
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrgs(search?: Array<string>, name?: Array<string>, member?: Array<string>, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {
            const localVarAxiosArgs = await OrgsApiAxiosParamCreator(configuration).listOrgs(search, name, member, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a org (must have org `owner` role)
         * @summary Update an Org
         * @param {string} name 
         * @param {OrganizationUpdate} organizationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrg(name: string, organizationUpdate: OrganizationUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await OrgsApiAxiosParamCreator(configuration).updateOrg(name, organizationUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upsert a member role to the org (must have org `owner` role)
         * @summary Add or update the role of an Org Member
         * @param {string} name 
         * @param {string} username 
         * @param {OrganizationRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertOrgMember(name: string, username: string, role: OrganizationRoleEnum, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await OrgsApiAxiosParamCreator(configuration).upsertOrgMember(name, username, role, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrgsApi - factory interface
 * @export
 */
export const OrgsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new org.
         * @summary Create an Org
         * @param {OrganizationCreate} organizationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrg(organizationCreate: OrganizationCreate, options?: any): AxiosPromise<CreatedContent> {
            return OrgsApiFp(configuration).createOrg(organizationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a org (must have `admin` permission)
         * @summary Delete an Org
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrg(name: string, options?: any): AxiosPromise<void> {
            return OrgsApiFp(configuration).deleteOrg(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a member from the org (must have org `owner` role)
         * @summary Remove an Org member
         * @param {string} name 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgMember(name: string, username: string, options?: any): AxiosPromise<void> {
            return OrgsApiFp(configuration).deleteOrgMember(name, username, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a org by name
         * @summary Get an Org
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrg(name: string, options?: any): AxiosPromise<Organization> {
            return OrgsApiFp(configuration).getOrg(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a org\'s members
         * @summary List organization members
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgMembers(name: string, options?: any): AxiosPromise<OrganizationMemberList> {
            return OrgsApiFp(configuration).getOrgMembers(name, options).then((request) => request(axios, basePath));
        },
        /**
         * search for orgs using query parameters
         * @summary List Orgs
         * @param {Array<string>} [search] You know, for search
         * @param {Array<string>} [name] The account name
         * @param {Array<string>} [member] The username of a user
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgs(search?: Array<string>, name?: Array<string>, member?: Array<string>, page?: number, perPage?: number, options?: any): AxiosPromise<OrganizationList> {
            return OrgsApiFp(configuration).listOrgs(search, name, member, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a org (must have org `owner` role)
         * @summary Update an Org
         * @param {string} name 
         * @param {OrganizationUpdate} organizationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrg(name: string, organizationUpdate: OrganizationUpdate, options?: any): AxiosPromise<UpdateAccepted> {
            return OrgsApiFp(configuration).updateOrg(name, organizationUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Upsert a member role to the org (must have org `owner` role)
         * @summary Add or update the role of an Org Member
         * @param {string} name 
         * @param {string} username 
         * @param {OrganizationRoleEnum} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertOrgMember(name: string, username: string, role: OrganizationRoleEnum, options?: any): AxiosPromise<UpdateAccepted> {
            return OrgsApiFp(configuration).upsertOrgMember(name, username, role, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOrg operation in OrgsApi.
 * @export
 * @interface OrgsApiCreateOrgRequest
 */
export interface OrgsApiCreateOrgRequest {
    /**
     * 
     * @type {OrganizationCreate}
     * @memberof OrgsApiCreateOrg
     */
    readonly organizationCreate: OrganizationCreate
}

/**
 * Request parameters for deleteOrg operation in OrgsApi.
 * @export
 * @interface OrgsApiDeleteOrgRequest
 */
export interface OrgsApiDeleteOrgRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiDeleteOrg
     */
    readonly name: string
}

/**
 * Request parameters for deleteOrgMember operation in OrgsApi.
 * @export
 * @interface OrgsApiDeleteOrgMemberRequest
 */
export interface OrgsApiDeleteOrgMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiDeleteOrgMember
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiDeleteOrgMember
     */
    readonly username: string
}

/**
 * Request parameters for getOrg operation in OrgsApi.
 * @export
 * @interface OrgsApiGetOrgRequest
 */
export interface OrgsApiGetOrgRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetOrg
     */
    readonly name: string
}

/**
 * Request parameters for getOrgMembers operation in OrgsApi.
 * @export
 * @interface OrgsApiGetOrgMembersRequest
 */
export interface OrgsApiGetOrgMembersRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetOrgMembers
     */
    readonly name: string
}

/**
 * Request parameters for listOrgs operation in OrgsApi.
 * @export
 * @interface OrgsApiListOrgsRequest
 */
export interface OrgsApiListOrgsRequest {
    /**
     * You know, for search
     * @type {Array<string>}
     * @memberof OrgsApiListOrgs
     */
    readonly search?: Array<string>

    /**
     * The account name
     * @type {Array<string>}
     * @memberof OrgsApiListOrgs
     */
    readonly name?: Array<string>

    /**
     * The username of a user
     * @type {Array<string>}
     * @memberof OrgsApiListOrgs
     */
    readonly member?: Array<string>

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof OrgsApiListOrgs
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof OrgsApiListOrgs
     */
    readonly perPage?: number
}

/**
 * Request parameters for updateOrg operation in OrgsApi.
 * @export
 * @interface OrgsApiUpdateOrgRequest
 */
export interface OrgsApiUpdateOrgRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiUpdateOrg
     */
    readonly name: string

    /**
     * 
     * @type {OrganizationUpdate}
     * @memberof OrgsApiUpdateOrg
     */
    readonly organizationUpdate: OrganizationUpdate
}

/**
 * Request parameters for upsertOrgMember operation in OrgsApi.
 * @export
 * @interface OrgsApiUpsertOrgMemberRequest
 */
export interface OrgsApiUpsertOrgMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiUpsertOrgMember
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiUpsertOrgMember
     */
    readonly username: string

    /**
     * 
     * @type {OrganizationRoleEnum}
     * @memberof OrgsApiUpsertOrgMember
     */
    readonly role: OrganizationRoleEnum
}

/**
 * OrgsApi - object-oriented interface
 * @export
 * @class OrgsApi
 * @extends {BaseAPI}
 */
export class OrgsApi extends BaseAPI {
    /**
     * Create a new org.
     * @summary Create an Org
     * @param {OrgsApiCreateOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public createOrg(requestParameters: OrgsApiCreateOrgRequest, options?: any) {
        return OrgsApiFp(this.configuration).createOrg(requestParameters.organizationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a org (must have `admin` permission)
     * @summary Delete an Org
     * @param {OrgsApiDeleteOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public deleteOrg(requestParameters: OrgsApiDeleteOrgRequest, options?: any) {
        return OrgsApiFp(this.configuration).deleteOrg(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a member from the org (must have org `owner` role)
     * @summary Remove an Org member
     * @param {OrgsApiDeleteOrgMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public deleteOrgMember(requestParameters: OrgsApiDeleteOrgMemberRequest, options?: any) {
        return OrgsApiFp(this.configuration).deleteOrgMember(requestParameters.name, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a org by name
     * @summary Get an Org
     * @param {OrgsApiGetOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getOrg(requestParameters: OrgsApiGetOrgRequest, options?: any) {
        return OrgsApiFp(this.configuration).getOrg(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a org\'s members
     * @summary List organization members
     * @param {OrgsApiGetOrgMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getOrgMembers(requestParameters: OrgsApiGetOrgMembersRequest, options?: any) {
        return OrgsApiFp(this.configuration).getOrgMembers(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * search for orgs using query parameters
     * @summary List Orgs
     * @param {OrgsApiListOrgsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public listOrgs(requestParameters: OrgsApiListOrgsRequest = {}, options?: any) {
        return OrgsApiFp(this.configuration).listOrgs(requestParameters.search, requestParameters.name, requestParameters.member, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a org (must have org `owner` role)
     * @summary Update an Org
     * @param {OrgsApiUpdateOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public updateOrg(requestParameters: OrgsApiUpdateOrgRequest, options?: any) {
        return OrgsApiFp(this.configuration).updateOrg(requestParameters.name, requestParameters.organizationUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upsert a member role to the org (must have org `owner` role)
     * @summary Add or update the role of an Org Member
     * @param {OrgsApiUpsertOrgMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public upsertOrgMember(requestParameters: OrgsApiUpsertOrgMemberRequest, options?: any) {
        return OrgsApiFp(this.configuration).upsertOrgMember(requestParameters.name, requestParameters.username, requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }
}
