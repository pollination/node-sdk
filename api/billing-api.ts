/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.8.1
 * Contact: info@pollination.solutions
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AppServerRestBillingDtoPayLink } from '../models';
// @ts-ignore
import type { BillingProduct } from '../models';
// @ts-ignore
import type { BillingSubscription } from '../models';
// @ts-ignore
import type { BillingSubscriptionCreate } from '../models';
// @ts-ignore
import type { BillingSubscriptionUpdate } from '../models';
// @ts-ignore
import type { BillingTransaction } from '../models';
// @ts-ignore
import type { BillingTransactionPreview } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * BillingApi - axios parameter creator
 * @export
 */
export const BillingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel a subscription directly via Paddle Billing API
         * @summary Cancel a Paddle Billing subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBillingSubscription: async (subscriptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('cancelBillingSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/billing/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a subscription directly via Paddle Billing API
         * @summary Create a Paddle Billing subscription directly
         * @param {BillingSubscriptionCreate} billingSubscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingSubscriptionDirect: async (billingSubscriptionCreate: BillingSubscriptionCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billingSubscriptionCreate' is not null or undefined
            assertParamExists('createBillingSubscriptionDirect', 'billingSubscriptionCreate', billingSubscriptionCreate)
            const localVarPath = `/billing/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billingSubscriptionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Paddle Billing subscription transaction
         * @summary Create a Paddle Billing subscription transaction
         * @param {BillingSubscriptionCreate} billingSubscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingSubscriptionTransaction: async (billingSubscriptionCreate: BillingSubscriptionCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billingSubscriptionCreate' is not null or undefined
            assertParamExists('createBillingSubscriptionTransaction', 'billingSubscriptionCreate', billingSubscriptionCreate)
            const localVarPath = `/billing/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billingSubscriptionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Paddle Billing subscription by its ID
         * @summary Get a Paddle Billing subscription by ID
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingSubscription: async (subscriptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getBillingSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/billing/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all available products from Paddle Billing API
         * @summary List available Paddle Billing products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingProducts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/billing/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Billing API transactions for a subscription
         * @summary List Paddle Billing transactions for a subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingSubscriptionTransactions: async (subscriptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('listBillingSubscriptionTransactions', 'subscriptionId', subscriptionId)
            const localVarPath = `/billing/transactions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Paddle Billing subscriptions
         * @summary List all Paddle Billing subscriptions
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingSubscriptions: async (account?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/billing/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Preview the cost and details of a Billing subscription before creation
         * @summary Preview a Paddle Billing subscription transaction
         * @param {string} subscriptionId 
         * @param {BillingSubscriptionUpdate} billingSubscriptionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewBillingSubscription: async (subscriptionId: string, billingSubscriptionUpdate: BillingSubscriptionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('previewBillingSubscription', 'subscriptionId', subscriptionId)
            // verify required parameter 'billingSubscriptionUpdate' is not null or undefined
            assertParamExists('previewBillingSubscription', 'billingSubscriptionUpdate', billingSubscriptionUpdate)
            const localVarPath = `/billing/subscriptions/{subscription_id}/preview`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billingSubscriptionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a subscription directly via Paddle Billing API
         * @summary Update a Paddle Billing subscription
         * @param {string} subscriptionId 
         * @param {BillingSubscriptionUpdate} billingSubscriptionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillingSubscription: async (subscriptionId: string, billingSubscriptionUpdate: BillingSubscriptionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('updateBillingSubscription', 'subscriptionId', subscriptionId)
            // verify required parameter 'billingSubscriptionUpdate' is not null or undefined
            assertParamExists('updateBillingSubscription', 'billingSubscriptionUpdate', billingSubscriptionUpdate)
            const localVarPath = `/billing/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billingSubscriptionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillingApi - functional programming interface
 * @export
 */
export const BillingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillingApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel a subscription directly via Paddle Billing API
         * @summary Cancel a Paddle Billing subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelBillingSubscription(subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelBillingSubscription(subscriptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingApi.cancelBillingSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a subscription directly via Paddle Billing API
         * @summary Create a Paddle Billing subscription directly
         * @param {BillingSubscriptionCreate} billingSubscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBillingSubscriptionDirect(billingSubscriptionCreate: BillingSubscriptionCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppServerRestBillingDtoPayLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBillingSubscriptionDirect(billingSubscriptionCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingApi.createBillingSubscriptionDirect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a Paddle Billing subscription transaction
         * @summary Create a Paddle Billing subscription transaction
         * @param {BillingSubscriptionCreate} billingSubscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBillingSubscriptionTransaction(billingSubscriptionCreate: BillingSubscriptionCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppServerRestBillingDtoPayLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBillingSubscriptionTransaction(billingSubscriptionCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingApi.createBillingSubscriptionTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a Paddle Billing subscription by its ID
         * @summary Get a Paddle Billing subscription by ID
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBillingSubscription(subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingSubscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBillingSubscription(subscriptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingApi.getBillingSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all available products from Paddle Billing API
         * @summary List available Paddle Billing products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBillingProducts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BillingProduct>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBillingProducts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingApi.listBillingProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all Billing API transactions for a subscription
         * @summary List Paddle Billing transactions for a subscription
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBillingSubscriptionTransactions(subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BillingTransaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBillingSubscriptionTransactions(subscriptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingApi.listBillingSubscriptionTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all Paddle Billing subscriptions
         * @summary List all Paddle Billing subscriptions
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBillingSubscriptions(account?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BillingSubscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBillingSubscriptions(account, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingApi.listBillingSubscriptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Preview the cost and details of a Billing subscription before creation
         * @summary Preview a Paddle Billing subscription transaction
         * @param {string} subscriptionId 
         * @param {BillingSubscriptionUpdate} billingSubscriptionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewBillingSubscription(subscriptionId: string, billingSubscriptionUpdate: BillingSubscriptionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingTransactionPreview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewBillingSubscription(subscriptionId, billingSubscriptionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingApi.previewBillingSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a subscription directly via Paddle Billing API
         * @summary Update a Paddle Billing subscription
         * @param {string} subscriptionId 
         * @param {BillingSubscriptionUpdate} billingSubscriptionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBillingSubscription(subscriptionId: string, billingSubscriptionUpdate: BillingSubscriptionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBillingSubscription(subscriptionId, billingSubscriptionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingApi.updateBillingSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BillingApi - factory interface
 * @export
 */
export const BillingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillingApiFp(configuration)
    return {
        /**
         * Cancel a subscription directly via Paddle Billing API
         * @summary Cancel a Paddle Billing subscription
         * @param {BillingApiCancelBillingSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBillingSubscription(requestParameters: BillingApiCancelBillingSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.cancelBillingSubscription(requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a subscription directly via Paddle Billing API
         * @summary Create a Paddle Billing subscription directly
         * @param {BillingApiCreateBillingSubscriptionDirectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingSubscriptionDirect(requestParameters: BillingApiCreateBillingSubscriptionDirectRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppServerRestBillingDtoPayLink> {
            return localVarFp.createBillingSubscriptionDirect(requestParameters.billingSubscriptionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Paddle Billing subscription transaction
         * @summary Create a Paddle Billing subscription transaction
         * @param {BillingApiCreateBillingSubscriptionTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingSubscriptionTransaction(requestParameters: BillingApiCreateBillingSubscriptionTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppServerRestBillingDtoPayLink> {
            return localVarFp.createBillingSubscriptionTransaction(requestParameters.billingSubscriptionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Paddle Billing subscription by its ID
         * @summary Get a Paddle Billing subscription by ID
         * @param {BillingApiGetBillingSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingSubscription(requestParameters: BillingApiGetBillingSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<BillingSubscription> {
            return localVarFp.getBillingSubscription(requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all available products from Paddle Billing API
         * @summary List available Paddle Billing products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingProducts(options?: RawAxiosRequestConfig): AxiosPromise<Array<BillingProduct>> {
            return localVarFp.listBillingProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * List all Billing API transactions for a subscription
         * @summary List Paddle Billing transactions for a subscription
         * @param {BillingApiListBillingSubscriptionTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingSubscriptionTransactions(requestParameters: BillingApiListBillingSubscriptionTransactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<BillingTransaction>> {
            return localVarFp.listBillingSubscriptionTransactions(requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Paddle Billing subscriptions
         * @summary List all Paddle Billing subscriptions
         * @param {BillingApiListBillingSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingSubscriptions(requestParameters: BillingApiListBillingSubscriptionsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<BillingSubscription>> {
            return localVarFp.listBillingSubscriptions(requestParameters.account, options).then((request) => request(axios, basePath));
        },
        /**
         * Preview the cost and details of a Billing subscription before creation
         * @summary Preview a Paddle Billing subscription transaction
         * @param {BillingApiPreviewBillingSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewBillingSubscription(requestParameters: BillingApiPreviewBillingSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<BillingTransactionPreview> {
            return localVarFp.previewBillingSubscription(requestParameters.subscriptionId, requestParameters.billingSubscriptionUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a subscription directly via Paddle Billing API
         * @summary Update a Paddle Billing subscription
         * @param {BillingApiUpdateBillingSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillingSubscription(requestParameters: BillingApiUpdateBillingSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<BillingTransaction> {
            return localVarFp.updateBillingSubscription(requestParameters.subscriptionId, requestParameters.billingSubscriptionUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelBillingSubscription operation in BillingApi.
 * @export
 * @interface BillingApiCancelBillingSubscriptionRequest
 */
export interface BillingApiCancelBillingSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof BillingApiCancelBillingSubscription
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for createBillingSubscriptionDirect operation in BillingApi.
 * @export
 * @interface BillingApiCreateBillingSubscriptionDirectRequest
 */
export interface BillingApiCreateBillingSubscriptionDirectRequest {
    /**
     * 
     * @type {BillingSubscriptionCreate}
     * @memberof BillingApiCreateBillingSubscriptionDirect
     */
    readonly billingSubscriptionCreate: BillingSubscriptionCreate
}

/**
 * Request parameters for createBillingSubscriptionTransaction operation in BillingApi.
 * @export
 * @interface BillingApiCreateBillingSubscriptionTransactionRequest
 */
export interface BillingApiCreateBillingSubscriptionTransactionRequest {
    /**
     * 
     * @type {BillingSubscriptionCreate}
     * @memberof BillingApiCreateBillingSubscriptionTransaction
     */
    readonly billingSubscriptionCreate: BillingSubscriptionCreate
}

/**
 * Request parameters for getBillingSubscription operation in BillingApi.
 * @export
 * @interface BillingApiGetBillingSubscriptionRequest
 */
export interface BillingApiGetBillingSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof BillingApiGetBillingSubscription
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for listBillingSubscriptionTransactions operation in BillingApi.
 * @export
 * @interface BillingApiListBillingSubscriptionTransactionsRequest
 */
export interface BillingApiListBillingSubscriptionTransactionsRequest {
    /**
     * 
     * @type {string}
     * @memberof BillingApiListBillingSubscriptionTransactions
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for listBillingSubscriptions operation in BillingApi.
 * @export
 * @interface BillingApiListBillingSubscriptionsRequest
 */
export interface BillingApiListBillingSubscriptionsRequest {
    /**
     * 
     * @type {string}
     * @memberof BillingApiListBillingSubscriptions
     */
    readonly account?: string
}

/**
 * Request parameters for previewBillingSubscription operation in BillingApi.
 * @export
 * @interface BillingApiPreviewBillingSubscriptionRequest
 */
export interface BillingApiPreviewBillingSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof BillingApiPreviewBillingSubscription
     */
    readonly subscriptionId: string

    /**
     * 
     * @type {BillingSubscriptionUpdate}
     * @memberof BillingApiPreviewBillingSubscription
     */
    readonly billingSubscriptionUpdate: BillingSubscriptionUpdate
}

/**
 * Request parameters for updateBillingSubscription operation in BillingApi.
 * @export
 * @interface BillingApiUpdateBillingSubscriptionRequest
 */
export interface BillingApiUpdateBillingSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof BillingApiUpdateBillingSubscription
     */
    readonly subscriptionId: string

    /**
     * 
     * @type {BillingSubscriptionUpdate}
     * @memberof BillingApiUpdateBillingSubscription
     */
    readonly billingSubscriptionUpdate: BillingSubscriptionUpdate
}

/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
export class BillingApi extends BaseAPI {
    /**
     * Cancel a subscription directly via Paddle Billing API
     * @summary Cancel a Paddle Billing subscription
     * @param {BillingApiCancelBillingSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public cancelBillingSubscription(requestParameters: BillingApiCancelBillingSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return BillingApiFp(this.configuration).cancelBillingSubscription(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a subscription directly via Paddle Billing API
     * @summary Create a Paddle Billing subscription directly
     * @param {BillingApiCreateBillingSubscriptionDirectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public createBillingSubscriptionDirect(requestParameters: BillingApiCreateBillingSubscriptionDirectRequest, options?: RawAxiosRequestConfig) {
        return BillingApiFp(this.configuration).createBillingSubscriptionDirect(requestParameters.billingSubscriptionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Paddle Billing subscription transaction
     * @summary Create a Paddle Billing subscription transaction
     * @param {BillingApiCreateBillingSubscriptionTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public createBillingSubscriptionTransaction(requestParameters: BillingApiCreateBillingSubscriptionTransactionRequest, options?: RawAxiosRequestConfig) {
        return BillingApiFp(this.configuration).createBillingSubscriptionTransaction(requestParameters.billingSubscriptionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Paddle Billing subscription by its ID
     * @summary Get a Paddle Billing subscription by ID
     * @param {BillingApiGetBillingSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public getBillingSubscription(requestParameters: BillingApiGetBillingSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return BillingApiFp(this.configuration).getBillingSubscription(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all available products from Paddle Billing API
     * @summary List available Paddle Billing products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public listBillingProducts(options?: RawAxiosRequestConfig) {
        return BillingApiFp(this.configuration).listBillingProducts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all Billing API transactions for a subscription
     * @summary List Paddle Billing transactions for a subscription
     * @param {BillingApiListBillingSubscriptionTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public listBillingSubscriptionTransactions(requestParameters: BillingApiListBillingSubscriptionTransactionsRequest, options?: RawAxiosRequestConfig) {
        return BillingApiFp(this.configuration).listBillingSubscriptionTransactions(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all Paddle Billing subscriptions
     * @summary List all Paddle Billing subscriptions
     * @param {BillingApiListBillingSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public listBillingSubscriptions(requestParameters: BillingApiListBillingSubscriptionsRequest = {}, options?: RawAxiosRequestConfig) {
        return BillingApiFp(this.configuration).listBillingSubscriptions(requestParameters.account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Preview the cost and details of a Billing subscription before creation
     * @summary Preview a Paddle Billing subscription transaction
     * @param {BillingApiPreviewBillingSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public previewBillingSubscription(requestParameters: BillingApiPreviewBillingSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return BillingApiFp(this.configuration).previewBillingSubscription(requestParameters.subscriptionId, requestParameters.billingSubscriptionUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a subscription directly via Paddle Billing API
     * @summary Update a Paddle Billing subscription
     * @param {BillingApiUpdateBillingSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public updateBillingSubscription(requestParameters: BillingApiUpdateBillingSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return BillingApiFp(this.configuration).updateBillingSubscription(requestParameters.subscriptionId, requestParameters.billingSubscriptionUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

