/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CloudJob } from '../models';
// @ts-ignore
import type { CloudJobList } from '../models';
// @ts-ignore
import type { CreatedContent } from '../models';
// @ts-ignore
import type { FileMetaList } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { Job } from '../models';
// @ts-ignore
import type { JobStatusEnum } from '../models';
// @ts-ignore
import type { RetryConfig } from '../models';
/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a job.
         * @summary Cancel a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelJob: async (owner: string, name: string, jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('cancelJob', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('cancelJob', 'name', name)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('cancelJob', 'jobId', jobId)
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/cancel`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new job.
         * @summary Schedule a job
         * @param {string} owner 
         * @param {string} name 
         * @param {Job} job 
         * @param {string} [authorization] 
         * @param {string} [xPollinationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob: async (owner: string, name: string, job: Job, authorization?: string, xPollinationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('createJob', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createJob', 'name', name)
            // verify required parameter 'job' is not null or undefined
            assertParamExists('createJob', 'job', job)
            const localVarPath = `/projects/{owner}/{name}/jobs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (xPollinationToken != null) {
                localVarHeaderParameter['x-pollination-token'] = String(xPollinationToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(job, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a job.
         * @summary Delete a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJob: async (owner: string, name: string, jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('deleteJob', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteJob', 'name', name)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('deleteJob', 'jobId', jobId)
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a download link for an artifact in a job folder
         * @summary Download an artifact from the job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadJobArtifact: async (owner: string, name: string, jobId: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('downloadJobArtifact', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('downloadJobArtifact', 'name', name)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('downloadJobArtifact', 'jobId', jobId)
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/artifacts/download`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a job.
         * @summary Get a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob: async (owner: string, name: string, jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getJob', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getJob', 'name', name)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getJob', 'jobId', jobId)
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of jobs.
         * @summary List Jobs
         * @param {string} owner 
         * @param {string} name 
         * @param {Array<string>} [ids] 
         * @param {JobStatusEnum} [status] 
         * @param {string} [createdAfter] 
         * @param {string} [createdBefore] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs: async (owner: string, name: string, ids?: Array<string>, status?: JobStatusEnum, createdAfter?: string, createdBefore?: string, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('listJobs', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('listJobs', 'name', name)
            const localVarPath = `/projects/{owner}/{name}/jobs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['created_after'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['created_before'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retry failed runs for a job.
         * @summary Retry failed runs for a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {RetryConfig} retryConfig 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryJob: async (owner: string, name: string, jobId: string, retryConfig: RetryConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('retryJob', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('retryJob', 'name', name)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('retryJob', 'jobId', jobId)
            // verify required parameter 'retryConfig' is not null or undefined
            assertParamExists('retryJob', 'retryConfig', retryConfig)
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/retry`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(retryConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of artifacts in a job folder
         * @summary List files/folders in a job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchJobFolder: async (owner: string, name: string, jobId: string, path?: Array<string>, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('searchJobFolder', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('searchJobFolder', 'name', name)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('searchJobFolder', 'jobId', jobId)
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/artifacts`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (path) {
                localVarQueryParameter['path'] = path;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a job.
         * @summary Cancel a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelJob(owner: string, name: string, jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudJob>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelJob(owner, name, jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.cancelJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new job.
         * @summary Schedule a job
         * @param {string} owner 
         * @param {string} name 
         * @param {Job} job 
         * @param {string} [authorization] 
         * @param {string} [xPollinationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJob(owner: string, name: string, job: Job, authorization?: string, xPollinationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJob(owner, name, job, authorization, xPollinationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.createJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a job.
         * @summary Delete a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJob(owner: string, name: string, jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJob(owner, name, jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.deleteJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a download link for an artifact in a job folder
         * @summary Download an artifact from the job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadJobArtifact(owner: string, name: string, jobId: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadJobArtifact(owner, name, jobId, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.downloadJobArtifact']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a job.
         * @summary Get a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJob(owner: string, name: string, jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudJob>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJob(owner, name, jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.getJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of jobs.
         * @summary List Jobs
         * @param {string} owner 
         * @param {string} name 
         * @param {Array<string>} [ids] 
         * @param {JobStatusEnum} [status] 
         * @param {string} [createdAfter] 
         * @param {string} [createdBefore] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJobs(owner: string, name: string, ids?: Array<string>, status?: JobStatusEnum, createdAfter?: string, createdBefore?: string, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudJobList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJobs(owner, name, ids, status, createdAfter, createdBefore, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.listJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retry failed runs for a job.
         * @summary Retry failed runs for a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {RetryConfig} retryConfig 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retryJob(owner: string, name: string, jobId: string, retryConfig: RetryConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudJob>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retryJob(owner, name, jobId, retryConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.retryJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of artifacts in a job folder
         * @summary List files/folders in a job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchJobFolder(owner: string, name: string, jobId: string, path?: Array<string>, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileMetaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchJobFolder(owner, name, jobId, path, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.searchJobFolder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * Retrieve a job.
         * @summary Cancel a Job
         * @param {JobsApiCancelJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelJob(requestParameters: JobsApiCancelJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<CloudJob> {
            return localVarFp.cancelJob(requestParameters.owner, requestParameters.name, requestParameters.jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new job.
         * @summary Schedule a job
         * @param {JobsApiCreateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob(requestParameters: JobsApiCreateJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedContent> {
            return localVarFp.createJob(requestParameters.owner, requestParameters.name, requestParameters.job, requestParameters.authorization, requestParameters.xPollinationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a job.
         * @summary Delete a Job
         * @param {JobsApiDeleteJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJob(requestParameters: JobsApiDeleteJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteJob(requestParameters.owner, requestParameters.name, requestParameters.jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a download link for an artifact in a job folder
         * @summary Download an artifact from the job folder
         * @param {JobsApiDownloadJobArtifactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadJobArtifact(requestParameters: JobsApiDownloadJobArtifactRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadJobArtifact(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a job.
         * @summary Get a Job
         * @param {JobsApiGetJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob(requestParameters: JobsApiGetJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<CloudJob> {
            return localVarFp.getJob(requestParameters.owner, requestParameters.name, requestParameters.jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of jobs.
         * @summary List Jobs
         * @param {JobsApiListJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs(requestParameters: JobsApiListJobsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CloudJobList> {
            return localVarFp.listJobs(requestParameters.owner, requestParameters.name, requestParameters.ids, requestParameters.status, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retry failed runs for a job.
         * @summary Retry failed runs for a Job
         * @param {JobsApiRetryJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryJob(requestParameters: JobsApiRetryJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<CloudJob> {
            return localVarFp.retryJob(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.retryConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of artifacts in a job folder
         * @summary List files/folders in a job folder
         * @param {JobsApiSearchJobFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchJobFolder(requestParameters: JobsApiSearchJobFolderRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileMetaList> {
            return localVarFp.searchJobFolder(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.path, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelJob operation in JobsApi.
 * @export
 * @interface JobsApiCancelJobRequest
 */
export interface JobsApiCancelJobRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiCancelJob
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiCancelJob
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiCancelJob
     */
    readonly jobId: string
}

/**
 * Request parameters for createJob operation in JobsApi.
 * @export
 * @interface JobsApiCreateJobRequest
 */
export interface JobsApiCreateJobRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiCreateJob
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiCreateJob
     */
    readonly name: string

    /**
     * 
     * @type {Job}
     * @memberof JobsApiCreateJob
     */
    readonly job: Job

    /**
     * 
     * @type {string}
     * @memberof JobsApiCreateJob
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiCreateJob
     */
    readonly xPollinationToken?: string
}

/**
 * Request parameters for deleteJob operation in JobsApi.
 * @export
 * @interface JobsApiDeleteJobRequest
 */
export interface JobsApiDeleteJobRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiDeleteJob
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiDeleteJob
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiDeleteJob
     */
    readonly jobId: string
}

/**
 * Request parameters for downloadJobArtifact operation in JobsApi.
 * @export
 * @interface JobsApiDownloadJobArtifactRequest
 */
export interface JobsApiDownloadJobArtifactRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiDownloadJobArtifact
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiDownloadJobArtifact
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiDownloadJobArtifact
     */
    readonly jobId: string

    /**
     * The path to an file within a project folder
     * @type {string}
     * @memberof JobsApiDownloadJobArtifact
     */
    readonly path?: string
}

/**
 * Request parameters for getJob operation in JobsApi.
 * @export
 * @interface JobsApiGetJobRequest
 */
export interface JobsApiGetJobRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiGetJob
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiGetJob
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiGetJob
     */
    readonly jobId: string
}

/**
 * Request parameters for listJobs operation in JobsApi.
 * @export
 * @interface JobsApiListJobsRequest
 */
export interface JobsApiListJobsRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiListJobs
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiListJobs
     */
    readonly name: string

    /**
     * 
     * @type {Array<string>}
     * @memberof JobsApiListJobs
     */
    readonly ids?: Array<string>

    /**
     * 
     * @type {JobStatusEnum}
     * @memberof JobsApiListJobs
     */
    readonly status?: JobStatusEnum

    /**
     * 
     * @type {string}
     * @memberof JobsApiListJobs
     */
    readonly createdAfter?: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiListJobs
     */
    readonly createdBefore?: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof JobsApiListJobs
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof JobsApiListJobs
     */
    readonly perPage?: number
}

/**
 * Request parameters for retryJob operation in JobsApi.
 * @export
 * @interface JobsApiRetryJobRequest
 */
export interface JobsApiRetryJobRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiRetryJob
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiRetryJob
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiRetryJob
     */
    readonly jobId: string

    /**
     * 
     * @type {RetryConfig}
     * @memberof JobsApiRetryJob
     */
    readonly retryConfig: RetryConfig
}

/**
 * Request parameters for searchJobFolder operation in JobsApi.
 * @export
 * @interface JobsApiSearchJobFolderRequest
 */
export interface JobsApiSearchJobFolderRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiSearchJobFolder
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiSearchJobFolder
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof JobsApiSearchJobFolder
     */
    readonly jobId: string

    /**
     * The path to an file within a project folder
     * @type {Array<string>}
     * @memberof JobsApiSearchJobFolder
     */
    readonly path?: Array<string>

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof JobsApiSearchJobFolder
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof JobsApiSearchJobFolder
     */
    readonly perPage?: number
}

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * Retrieve a job.
     * @summary Cancel a Job
     * @param {JobsApiCancelJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public cancelJob(requestParameters: JobsApiCancelJobRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).cancelJob(requestParameters.owner, requestParameters.name, requestParameters.jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new job.
     * @summary Schedule a job
     * @param {JobsApiCreateJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public createJob(requestParameters: JobsApiCreateJobRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).createJob(requestParameters.owner, requestParameters.name, requestParameters.job, requestParameters.authorization, requestParameters.xPollinationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a job.
     * @summary Delete a Job
     * @param {JobsApiDeleteJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public deleteJob(requestParameters: JobsApiDeleteJobRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).deleteJob(requestParameters.owner, requestParameters.name, requestParameters.jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a download link for an artifact in a job folder
     * @summary Download an artifact from the job folder
     * @param {JobsApiDownloadJobArtifactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public downloadJobArtifact(requestParameters: JobsApiDownloadJobArtifactRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).downloadJobArtifact(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a job.
     * @summary Get a Job
     * @param {JobsApiGetJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJob(requestParameters: JobsApiGetJobRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJob(requestParameters.owner, requestParameters.name, requestParameters.jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of jobs.
     * @summary List Jobs
     * @param {JobsApiListJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public listJobs(requestParameters: JobsApiListJobsRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).listJobs(requestParameters.owner, requestParameters.name, requestParameters.ids, requestParameters.status, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retry failed runs for a job.
     * @summary Retry failed runs for a Job
     * @param {JobsApiRetryJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public retryJob(requestParameters: JobsApiRetryJobRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).retryJob(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.retryConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of artifacts in a job folder
     * @summary List files/folders in a job folder
     * @param {JobsApiSearchJobFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public searchJobFolder(requestParameters: JobsApiSearchJobFolderRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).searchJobFolder(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.path, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }
}

