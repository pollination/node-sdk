/* tslint:disable */
/* eslint-disable */
/**
 * Pollination Server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.10.13
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Accepted } from '../models';
// @ts-ignore
import { CreatedContent } from '../models';
// @ts-ignore
import { FileMeta } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Job } from '../models';
// @ts-ignore
import { JobList } from '../models';
// @ts-ignore
import { Run } from '../models';
// @ts-ignore
import { StepList } from '../models';
/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new job.
         * @summary Schedule a job
         * @param {string} owner 
         * @param {string} name 
         * @param {Job} job 
         * @param {string} [authorization] 
         * @param {string} [xPollinationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob: async (owner: string, name: string, job: Job, authorization?: string, xPollinationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createJob.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createJob.');
            }
            // verify required parameter 'job' is not null or undefined
            if (job === null || job === undefined) {
                throw new RequiredError('job','Required parameter job was null or undefined when calling createJob.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (xPollinationToken !== undefined && xPollinationToken !== null) {
                localVarHeaderParameter['x-pollination-token'] = String(xPollinationToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof job !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(job !== undefined ? job : {}) : (job || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a download link for an artifact in a job folder
         * @summary Download an artifact from the job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadJobArtifact: async (owner: string, name: string, jobId: string, path?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling downloadJobArtifact.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling downloadJobArtifact.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling downloadJobArtifact.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/artifacts/download`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a job.
         * @summary Get a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob: async (owner: string, name: string, jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getJob.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getJob.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling getJob.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * get job output by name
         * @summary Get job output by name
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} outputName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobOutput: async (owner: string, name: string, jobId: string, outputName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getJobOutput.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getJobOutput.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling getJobOutput.');
            }
            // verify required parameter 'outputName' is not null or undefined
            if (outputName === null || outputName === undefined) {
                throw new RequiredError('outputName','Required parameter outputName was null or undefined when calling getJobOutput.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/outputs/{output_name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)))
                .replace(`{${"output_name"}}`, encodeURIComponent(String(outputName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * get job step logs
         * @summary Get the logs of a specific step of the job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} stepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobStepLogs: async (owner: string, name: string, jobId: string, stepId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getJobStepLogs.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getJobStepLogs.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling getJobStepLogs.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling getJobStepLogs.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/steps/{step_id}/logs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)))
                .replace(`{${"step_id"}}`, encodeURIComponent(String(stepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * list job steps
         * @summary Query the steps of a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} [status] 
         * @param {Array<string>} [stepId] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobSteps: async (owner: string, name: string, jobId: string, status?: string, stepId?: Array<string>, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getJobSteps.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getJobSteps.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling getJobSteps.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/steps`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (stepId) {
                localVarQueryParameter['step_id'] = stepId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of artifacts in a job folder
         * @summary List artifacts in a job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobArtifacts: async (owner: string, name: string, jobId: string, page?: number, perPage?: number, path?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listJobArtifacts.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listJobArtifacts.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling listJobArtifacts.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/artifacts`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (path) {
                localVarQueryParameter['path'] = path;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of jobs.
         * @summary List jobs
         * @param {string} owner 
         * @param {string} name 
         * @param {Array<string>} [ids] 
         * @param {string} [status] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs: async (owner: string, name: string, ids?: Array<string>, status?: string, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listJobs.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listJobs.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * resume a job
         * @summary resume a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeJob: async (owner: string, name: string, jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling resumeJob.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling resumeJob.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling resumeJob.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/resume`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Stop a job.
         * @summary Stop a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopJob: async (owner: string, name: string, jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling stopJob.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling stopJob.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling stopJob.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/stop`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Stop a job.
         * @summary Suspend a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendJob: async (owner: string, name: string, jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling suspendJob.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling suspendJob.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling suspendJob.');
            }
            const localVarPath = `/projects/{owner}/{name}/jobs/{job_id}/suspend`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new job.
         * @summary Schedule a job
         * @param {string} owner 
         * @param {string} name 
         * @param {Job} job 
         * @param {string} [authorization] 
         * @param {string} [xPollinationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJob(owner: string, name: string, job: Job, authorization?: string, xPollinationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedContent>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).createJob(owner, name, job, authorization, xPollinationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a download link for an artifact in a job folder
         * @summary Download an artifact from the job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadJobArtifact(owner: string, name: string, jobId: string, path?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).downloadJobArtifact(owner, name, jobId, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a job.
         * @summary Get a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJob(owner: string, name: string, jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Run>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).getJob(owner, name, jobId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get job output by name
         * @summary Get job output by name
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} outputName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobOutput(owner: string, name: string, jobId: string, outputName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).getJobOutput(owner, name, jobId, outputName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get job step logs
         * @summary Get the logs of a specific step of the job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} stepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobStepLogs(owner: string, name: string, jobId: string, stepId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).getJobStepLogs(owner, name, jobId, stepId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * list job steps
         * @summary Query the steps of a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} [status] 
         * @param {Array<string>} [stepId] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobSteps(owner: string, name: string, jobId: string, status?: string, stepId?: Array<string>, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StepList>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).getJobSteps(owner, name, jobId, status, stepId, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of artifacts in a job folder
         * @summary List artifacts in a job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJobArtifacts(owner: string, name: string, jobId: string, page?: number, perPage?: number, path?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileMeta>>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).listJobArtifacts(owner, name, jobId, page, perPage, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of jobs.
         * @summary List jobs
         * @param {string} owner 
         * @param {string} name 
         * @param {Array<string>} [ids] 
         * @param {string} [status] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJobs(owner: string, name: string, ids?: Array<string>, status?: string, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobList>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).listJobs(owner, name, ids, status, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * resume a job
         * @summary resume a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeJob(owner: string, name: string, jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Accepted>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).resumeJob(owner, name, jobId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Stop a job.
         * @summary Stop a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopJob(owner: string, name: string, jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Accepted>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).stopJob(owner, name, jobId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Stop a job.
         * @summary Suspend a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suspendJob(owner: string, name: string, jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Accepted>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).suspendJob(owner, name, jobId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new job.
         * @summary Schedule a job
         * @param {string} owner 
         * @param {string} name 
         * @param {Job} job 
         * @param {string} [authorization] 
         * @param {string} [xPollinationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob(owner: string, name: string, job: Job, authorization?: string, xPollinationToken?: string, options?: any): AxiosPromise<CreatedContent> {
            return JobsApiFp(configuration).createJob(owner, name, job, authorization, xPollinationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a download link for an artifact in a job folder
         * @summary Download an artifact from the job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadJobArtifact(owner: string, name: string, jobId: string, path?: string, options?: any): AxiosPromise<any> {
            return JobsApiFp(configuration).downloadJobArtifact(owner, name, jobId, path, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a job.
         * @summary Get a Job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob(owner: string, name: string, jobId: string, options?: any): AxiosPromise<Run> {
            return JobsApiFp(configuration).getJob(owner, name, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * get job output by name
         * @summary Get job output by name
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} outputName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobOutput(owner: string, name: string, jobId: string, outputName: string, options?: any): AxiosPromise<any> {
            return JobsApiFp(configuration).getJobOutput(owner, name, jobId, outputName, options).then((request) => request(axios, basePath));
        },
        /**
         * get job step logs
         * @summary Get the logs of a specific step of the job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} stepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobStepLogs(owner: string, name: string, jobId: string, stepId: string, options?: any): AxiosPromise<string> {
            return JobsApiFp(configuration).getJobStepLogs(owner, name, jobId, stepId, options).then((request) => request(axios, basePath));
        },
        /**
         * list job steps
         * @summary Query the steps of a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {string} [status] 
         * @param {Array<string>} [stepId] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobSteps(owner: string, name: string, jobId: string, status?: string, stepId?: Array<string>, page?: number, perPage?: number, options?: any): AxiosPromise<StepList> {
            return JobsApiFp(configuration).getJobSteps(owner, name, jobId, status, stepId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of artifacts in a job folder
         * @summary List artifacts in a job folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobArtifacts(owner: string, name: string, jobId: string, page?: number, perPage?: number, path?: Array<string>, options?: any): AxiosPromise<Array<FileMeta>> {
            return JobsApiFp(configuration).listJobArtifacts(owner, name, jobId, page, perPage, path, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of jobs.
         * @summary List jobs
         * @param {string} owner 
         * @param {string} name 
         * @param {Array<string>} [ids] 
         * @param {string} [status] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs(owner: string, name: string, ids?: Array<string>, status?: string, page?: number, perPage?: number, options?: any): AxiosPromise<JobList> {
            return JobsApiFp(configuration).listJobs(owner, name, ids, status, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * resume a job
         * @summary resume a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeJob(owner: string, name: string, jobId: string, options?: any): AxiosPromise<Accepted> {
            return JobsApiFp(configuration).resumeJob(owner, name, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Stop a job.
         * @summary Stop a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopJob(owner: string, name: string, jobId: string, options?: any): AxiosPromise<Accepted> {
            return JobsApiFp(configuration).stopJob(owner, name, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Stop a job.
         * @summary Suspend a job
         * @param {string} owner 
         * @param {string} name 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendJob(owner: string, name: string, jobId: string, options?: any): AxiosPromise<Accepted> {
            return JobsApiFp(configuration).suspendJob(owner, name, jobId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - interface
 * @export
 * @interface JobsApi
 */
export interface JobsApiInterface {
    /**
     * Create a new job.
     * @summary Schedule a job
     * @param {string} owner 
     * @param {string} name 
     * @param {Job} job 
     * @param {string} [authorization] 
     * @param {string} [xPollinationToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    createJob(owner: string, name: string, job: Job, authorization?: string, xPollinationToken?: string, options?: any): AxiosPromise<CreatedContent>;

    /**
     * Get a download link for an artifact in a job folder
     * @summary Download an artifact from the job folder
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {string} [path] The path to an file within a project folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    downloadJobArtifact(owner: string, name: string, jobId: string, path?: string, options?: any): AxiosPromise<any>;

    /**
     * Retrieve a job.
     * @summary Get a Job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJob(owner: string, name: string, jobId: string, options?: any): AxiosPromise<Run>;

    /**
     * get job output by name
     * @summary Get job output by name
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {string} outputName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobOutput(owner: string, name: string, jobId: string, outputName: string, options?: any): AxiosPromise<any>;

    /**
     * get job step logs
     * @summary Get the logs of a specific step of the job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {string} stepId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobStepLogs(owner: string, name: string, jobId: string, stepId: string, options?: any): AxiosPromise<string>;

    /**
     * list job steps
     * @summary Query the steps of a job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {string} [status] 
     * @param {Array<string>} [stepId] 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobSteps(owner: string, name: string, jobId: string, status?: string, stepId?: Array<string>, page?: number, perPage?: number, options?: any): AxiosPromise<StepList>;

    /**
     * Retrieve a list of artifacts in a job folder
     * @summary List artifacts in a job folder
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [path] The path to an file within a project folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    listJobArtifacts(owner: string, name: string, jobId: string, page?: number, perPage?: number, path?: Array<string>, options?: any): AxiosPromise<Array<FileMeta>>;

    /**
     * Retrieve a list of jobs.
     * @summary List jobs
     * @param {string} owner 
     * @param {string} name 
     * @param {Array<string>} [ids] 
     * @param {string} [status] 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    listJobs(owner: string, name: string, ids?: Array<string>, status?: string, page?: number, perPage?: number, options?: any): AxiosPromise<JobList>;

    /**
     * resume a job
     * @summary resume a job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    resumeJob(owner: string, name: string, jobId: string, options?: any): AxiosPromise<Accepted>;

    /**
     * Stop a job.
     * @summary Stop a job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    stopJob(owner: string, name: string, jobId: string, options?: any): AxiosPromise<Accepted>;

    /**
     * Stop a job.
     * @summary Suspend a job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    suspendJob(owner: string, name: string, jobId: string, options?: any): AxiosPromise<Accepted>;

}

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI implements JobsApiInterface {
    /**
     * Create a new job.
     * @summary Schedule a job
     * @param {string} owner 
     * @param {string} name 
     * @param {Job} job 
     * @param {string} [authorization] 
     * @param {string} [xPollinationToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public createJob(owner: string, name: string, job: Job, authorization?: string, xPollinationToken?: string, options?: any) {
        return JobsApiFp(this.configuration).createJob(owner, name, job, authorization, xPollinationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a download link for an artifact in a job folder
     * @summary Download an artifact from the job folder
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {string} [path] The path to an file within a project folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public downloadJobArtifact(owner: string, name: string, jobId: string, path?: string, options?: any) {
        return JobsApiFp(this.configuration).downloadJobArtifact(owner, name, jobId, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a job.
     * @summary Get a Job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJob(owner: string, name: string, jobId: string, options?: any) {
        return JobsApiFp(this.configuration).getJob(owner, name, jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get job output by name
     * @summary Get job output by name
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {string} outputName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobOutput(owner: string, name: string, jobId: string, outputName: string, options?: any) {
        return JobsApiFp(this.configuration).getJobOutput(owner, name, jobId, outputName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get job step logs
     * @summary Get the logs of a specific step of the job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {string} stepId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobStepLogs(owner: string, name: string, jobId: string, stepId: string, options?: any) {
        return JobsApiFp(this.configuration).getJobStepLogs(owner, name, jobId, stepId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list job steps
     * @summary Query the steps of a job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {string} [status] 
     * @param {Array<string>} [stepId] 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobSteps(owner: string, name: string, jobId: string, status?: string, stepId?: Array<string>, page?: number, perPage?: number, options?: any) {
        return JobsApiFp(this.configuration).getJobSteps(owner, name, jobId, status, stepId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of artifacts in a job folder
     * @summary List artifacts in a job folder
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [path] The path to an file within a project folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public listJobArtifacts(owner: string, name: string, jobId: string, page?: number, perPage?: number, path?: Array<string>, options?: any) {
        return JobsApiFp(this.configuration).listJobArtifacts(owner, name, jobId, page, perPage, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of jobs.
     * @summary List jobs
     * @param {string} owner 
     * @param {string} name 
     * @param {Array<string>} [ids] 
     * @param {string} [status] 
     * @param {number} [page] Page number starting from 1
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public listJobs(owner: string, name: string, ids?: Array<string>, status?: string, page?: number, perPage?: number, options?: any) {
        return JobsApiFp(this.configuration).listJobs(owner, name, ids, status, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * resume a job
     * @summary resume a job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public resumeJob(owner: string, name: string, jobId: string, options?: any) {
        return JobsApiFp(this.configuration).resumeJob(owner, name, jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stop a job.
     * @summary Stop a job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public stopJob(owner: string, name: string, jobId: string, options?: any) {
        return JobsApiFp(this.configuration).stopJob(owner, name, jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stop a job.
     * @summary Suspend a job
     * @param {string} owner 
     * @param {string} name 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public suspendJob(owner: string, name: string, jobId: string, options?: any) {
        return JobsApiFp(this.configuration).suspendJob(owner, name, jobId, options).then((request) => request(this.axios, this.basePath));
    }
}
