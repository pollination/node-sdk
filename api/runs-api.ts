/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.8.8
 * Contact: info@pollination.solutions
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FileMetaList } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { RetryConfig } from '../models';
// @ts-ignore
import type { Run } from '../models';
// @ts-ignore
import type { RunList } from '../models';
// @ts-ignore
import type { RunResultList } from '../models';
// @ts-ignore
import type { RunStatusEnum } from '../models';
// @ts-ignore
import type { StepList } from '../models';
// @ts-ignore
import type { StepStatus } from '../models';
// @ts-ignore
import type { StepStatusEnum } from '../models';
/**
 * RunsApi - axios parameter creator
 * @export
 */
export const RunsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Stop a run.
         * @summary Cancel a run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelRun: async (owner: string, name: string, runId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('cancelRun', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('cancelRun', 'name', name)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('cancelRun', 'runId', runId)
            const localVarPath = `/projects/{owner}/{name}/runs/{run_id}/cancel`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a download link for an artifact in a run folder
         * @summary Download an artifact from the run folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        downloadRunArtifact: async (owner: string, name: string, runId: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('downloadRunArtifact', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('downloadRunArtifact', 'name', name)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('downloadRunArtifact', 'runId', runId)
            const localVarPath = `/projects/{owner}/{name}/runs/{run_id}/artifacts/download`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list all run steps
         * @summary Query the steps of a run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRunSteps: async (owner: string, name: string, runId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getAllRunSteps', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getAllRunSteps', 'name', name)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getAllRunSteps', 'runId', runId)
            const localVarPath = `/projects/{owner}/{name}/runs/{run_id}/all-steps`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a run.
         * @summary Get a Run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRun: async (owner: string, name: string, runId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getRun', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRun', 'name', name)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getRun', 'runId', runId)
            const localVarPath = `/projects/{owner}/{name}/runs/{run_id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get run output by name
         * @summary Get run output by name
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {string} outputName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunOutput: async (owner: string, name: string, runId: string, outputName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getRunOutput', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRunOutput', 'name', name)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getRunOutput', 'runId', runId)
            // verify required parameter 'outputName' is not null or undefined
            assertParamExists('getRunOutput', 'outputName', outputName)
            const localVarPath = `/projects/{owner}/{name}/runs/{run_id}/outputs/{output_name}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)))
                .replace(`{${"output_name"}}`, encodeURIComponent(String(outputName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get run step logs
         * @summary Get the logs of a specific step of the run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {string} stepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunStepLogs: async (owner: string, name: string, runId: string, stepId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getRunStepLogs', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRunStepLogs', 'name', name)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getRunStepLogs', 'runId', runId)
            // verify required parameter 'stepId' is not null or undefined
            assertParamExists('getRunStepLogs', 'stepId', stepId)
            const localVarPath = `/projects/{owner}/{name}/runs/{run_id}/steps/{step_id}/logs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)))
                .replace(`{${"step_id"}}`, encodeURIComponent(String(stepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list run steps
         * @summary Query the steps of a run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {StepStatusEnum} [status] 
         * @param {Array<string>} [stepId] 
         * @param {string} [untilGeneration] 
         * @param {string} [sinceGeneration] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRunSteps: async (owner: string, name: string, runId: string, status?: StepStatusEnum, stepId?: Array<string>, untilGeneration?: string, sinceGeneration?: string, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getRunSteps', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRunSteps', 'name', name)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getRunSteps', 'runId', runId)
            const localVarPath = `/projects/{owner}/{name}/runs/{run_id}/steps`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (stepId) {
                localVarQueryParameter['step_id'] = stepId;
            }

            if (untilGeneration !== undefined) {
                localVarQueryParameter['until_generation'] = untilGeneration;
            }

            if (sinceGeneration !== undefined) {
                localVarQueryParameter['since_generation'] = sinceGeneration;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of artifacts in a run folder
         * @summary List artifacts in a run folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listRunArtifacts: async (owner: string, name: string, runId: string, path?: Array<string>, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('listRunArtifacts', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('listRunArtifacts', 'name', name)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('listRunArtifacts', 'runId', runId)
            const localVarPath = `/projects/{owner}/{name}/runs/{run_id}/artifacts`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (path) {
                localVarQueryParameter['path'] = path;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of runs.
         * @summary List runs
         * @param {string} owner 
         * @param {string} name 
         * @param {Array<string>} [jobId] 
         * @param {RunStatusEnum} [status] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuns: async (owner: string, name: string, jobId?: Array<string>, status?: RunStatusEnum, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('listRuns', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('listRuns', 'name', name)
            const localVarPath = `/projects/{owner}/{name}/runs`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (jobId) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of run results.
         * @summary Query run results
         * @param {string} owner 
         * @param {string} name 
         * @param {Array<string>} [jobId] 
         * @param {RunStatusEnum} [status] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryResults: async (owner: string, name: string, jobId?: Array<string>, status?: RunStatusEnum, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('queryResults', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('queryResults', 'name', name)
            const localVarPath = `/projects/{owner}/{name}/results`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (jobId) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retry a run.
         * @summary Retry a run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {RetryConfig} retryConfig 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryRun: async (owner: string, name: string, runId: string, retryConfig: RetryConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('retryRun', 'owner', owner)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('retryRun', 'name', name)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('retryRun', 'runId', runId)
            // verify required parameter 'retryConfig' is not null or undefined
            assertParamExists('retryRun', 'retryConfig', retryConfig)
            const localVarPath = `/projects/{owner}/{name}/runs/{run_id}/retry`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(retryConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RunsApi - functional programming interface
 * @export
 */
export const RunsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RunsApiAxiosParamCreator(configuration)
    return {
        /**
         * Stop a run.
         * @summary Cancel a run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelRun(owner: string, name: string, runId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelRun(owner, name, runId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.cancelRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a download link for an artifact in a run folder
         * @summary Download an artifact from the run folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {string} [path] The path to an file within a project folder
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async downloadRunArtifact(owner: string, name: string, runId: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadRunArtifact(owner, name, runId, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.downloadRunArtifact']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * list all run steps
         * @summary Query the steps of a run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRunSteps(owner: string, name: string, runId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StepStatus>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRunSteps(owner, name, runId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.getAllRunSteps']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a run.
         * @summary Get a Run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRun(owner: string, name: string, runId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRun(owner, name, runId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.getRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get run output by name
         * @summary Get run output by name
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {string} outputName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRunOutput(owner: string, name: string, runId: string, outputName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunOutput(owner, name, runId, outputName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.getRunOutput']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get run step logs
         * @summary Get the logs of a specific step of the run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {string} stepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRunStepLogs(owner: string, name: string, runId: string, stepId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunStepLogs(owner, name, runId, stepId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.getRunStepLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * list run steps
         * @summary Query the steps of a run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {StepStatusEnum} [status] 
         * @param {Array<string>} [stepId] 
         * @param {string} [untilGeneration] 
         * @param {string} [sinceGeneration] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getRunSteps(owner: string, name: string, runId: string, status?: StepStatusEnum, stepId?: Array<string>, untilGeneration?: string, sinceGeneration?: string, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StepList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunSteps(owner, name, runId, status, stepId, untilGeneration, sinceGeneration, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.getRunSteps']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of artifacts in a run folder
         * @summary List artifacts in a run folder
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {Array<string>} [path] The path to an file within a project folder
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listRunArtifacts(owner: string, name: string, runId: string, path?: Array<string>, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileMetaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRunArtifacts(owner, name, runId, path, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.listRunArtifacts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of runs.
         * @summary List runs
         * @param {string} owner 
         * @param {string} name 
         * @param {Array<string>} [jobId] 
         * @param {RunStatusEnum} [status] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRuns(owner: string, name: string, jobId?: Array<string>, status?: RunStatusEnum, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRuns(owner, name, jobId, status, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.listRuns']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of run results.
         * @summary Query run results
         * @param {string} owner 
         * @param {string} name 
         * @param {Array<string>} [jobId] 
         * @param {RunStatusEnum} [status] 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryResults(owner: string, name: string, jobId?: Array<string>, status?: RunStatusEnum, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunResultList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryResults(owner, name, jobId, status, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.queryResults']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retry a run.
         * @summary Retry a run
         * @param {string} owner 
         * @param {string} name 
         * @param {string} runId 
         * @param {RetryConfig} retryConfig 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retryRun(owner: string, name: string, runId: string, retryConfig: RetryConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retryRun(owner, name, runId, retryConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RunsApi.retryRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RunsApi - factory interface
 * @export
 */
export const RunsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RunsApiFp(configuration)
    return {
        /**
         * Stop a run.
         * @summary Cancel a run
         * @param {RunsApiCancelRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelRun(requestParameters: RunsApiCancelRunRequest, options?: RawAxiosRequestConfig): AxiosPromise<Run> {
            return localVarFp.cancelRun(requestParameters.owner, requestParameters.name, requestParameters.runId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a download link for an artifact in a run folder
         * @summary Download an artifact from the run folder
         * @param {RunsApiDownloadRunArtifactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        downloadRunArtifact(requestParameters: RunsApiDownloadRunArtifactRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadRunArtifact(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * list all run steps
         * @summary Query the steps of a run
         * @param {RunsApiGetAllRunStepsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRunSteps(requestParameters: RunsApiGetAllRunStepsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<StepStatus>> {
            return localVarFp.getAllRunSteps(requestParameters.owner, requestParameters.name, requestParameters.runId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a run.
         * @summary Get a Run
         * @param {RunsApiGetRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRun(requestParameters: RunsApiGetRunRequest, options?: RawAxiosRequestConfig): AxiosPromise<Run> {
            return localVarFp.getRun(requestParameters.owner, requestParameters.name, requestParameters.runId, options).then((request) => request(axios, basePath));
        },
        /**
         * get run output by name
         * @summary Get run output by name
         * @param {RunsApiGetRunOutputRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunOutput(requestParameters: RunsApiGetRunOutputRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getRunOutput(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.outputName, options).then((request) => request(axios, basePath));
        },
        /**
         * get run step logs
         * @summary Get the logs of a specific step of the run
         * @param {RunsApiGetRunStepLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunStepLogs(requestParameters: RunsApiGetRunStepLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getRunStepLogs(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.stepId, options).then((request) => request(axios, basePath));
        },
        /**
         * list run steps
         * @summary Query the steps of a run
         * @param {RunsApiGetRunStepsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRunSteps(requestParameters: RunsApiGetRunStepsRequest, options?: RawAxiosRequestConfig): AxiosPromise<StepList> {
            return localVarFp.getRunSteps(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.status, requestParameters.stepId, requestParameters.untilGeneration, requestParameters.sinceGeneration, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of artifacts in a run folder
         * @summary List artifacts in a run folder
         * @param {RunsApiListRunArtifactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listRunArtifacts(requestParameters: RunsApiListRunArtifactsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileMetaList> {
            return localVarFp.listRunArtifacts(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.path, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of runs.
         * @summary List runs
         * @param {RunsApiListRunsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuns(requestParameters: RunsApiListRunsRequest, options?: RawAxiosRequestConfig): AxiosPromise<RunList> {
            return localVarFp.listRuns(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.status, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of run results.
         * @summary Query run results
         * @param {RunsApiQueryResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryResults(requestParameters: RunsApiQueryResultsRequest, options?: RawAxiosRequestConfig): AxiosPromise<RunResultList> {
            return localVarFp.queryResults(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.status, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retry a run.
         * @summary Retry a run
         * @param {RunsApiRetryRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryRun(requestParameters: RunsApiRetryRunRequest, options?: RawAxiosRequestConfig): AxiosPromise<Run> {
            return localVarFp.retryRun(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.retryConfig, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelRun operation in RunsApi.
 * @export
 * @interface RunsApiCancelRunRequest
 */
export interface RunsApiCancelRunRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiCancelRun
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiCancelRun
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiCancelRun
     */
    readonly runId: string
}

/**
 * Request parameters for downloadRunArtifact operation in RunsApi.
 * @export
 * @interface RunsApiDownloadRunArtifactRequest
 */
export interface RunsApiDownloadRunArtifactRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiDownloadRunArtifact
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiDownloadRunArtifact
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiDownloadRunArtifact
     */
    readonly runId: string

    /**
     * The path to an file within a project folder
     * @type {string}
     * @memberof RunsApiDownloadRunArtifact
     */
    readonly path?: string
}

/**
 * Request parameters for getAllRunSteps operation in RunsApi.
 * @export
 * @interface RunsApiGetAllRunStepsRequest
 */
export interface RunsApiGetAllRunStepsRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiGetAllRunSteps
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetAllRunSteps
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetAllRunSteps
     */
    readonly runId: string
}

/**
 * Request parameters for getRun operation in RunsApi.
 * @export
 * @interface RunsApiGetRunRequest
 */
export interface RunsApiGetRunRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRun
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRun
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRun
     */
    readonly runId: string
}

/**
 * Request parameters for getRunOutput operation in RunsApi.
 * @export
 * @interface RunsApiGetRunOutputRequest
 */
export interface RunsApiGetRunOutputRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunOutput
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunOutput
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunOutput
     */
    readonly runId: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunOutput
     */
    readonly outputName: string
}

/**
 * Request parameters for getRunStepLogs operation in RunsApi.
 * @export
 * @interface RunsApiGetRunStepLogsRequest
 */
export interface RunsApiGetRunStepLogsRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunStepLogs
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunStepLogs
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunStepLogs
     */
    readonly runId: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunStepLogs
     */
    readonly stepId: string
}

/**
 * Request parameters for getRunSteps operation in RunsApi.
 * @export
 * @interface RunsApiGetRunStepsRequest
 */
export interface RunsApiGetRunStepsRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunSteps
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunSteps
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunSteps
     */
    readonly runId: string

    /**
     * 
     * @type {StepStatusEnum}
     * @memberof RunsApiGetRunSteps
     */
    readonly status?: StepStatusEnum

    /**
     * 
     * @type {Array<string>}
     * @memberof RunsApiGetRunSteps
     */
    readonly stepId?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunSteps
     */
    readonly untilGeneration?: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiGetRunSteps
     */
    readonly sinceGeneration?: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof RunsApiGetRunSteps
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof RunsApiGetRunSteps
     */
    readonly perPage?: number
}

/**
 * Request parameters for listRunArtifacts operation in RunsApi.
 * @export
 * @interface RunsApiListRunArtifactsRequest
 */
export interface RunsApiListRunArtifactsRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiListRunArtifacts
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiListRunArtifacts
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiListRunArtifacts
     */
    readonly runId: string

    /**
     * The path to an file within a project folder
     * @type {Array<string>}
     * @memberof RunsApiListRunArtifacts
     */
    readonly path?: Array<string>

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof RunsApiListRunArtifacts
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof RunsApiListRunArtifacts
     */
    readonly perPage?: number
}

/**
 * Request parameters for listRuns operation in RunsApi.
 * @export
 * @interface RunsApiListRunsRequest
 */
export interface RunsApiListRunsRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiListRuns
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiListRuns
     */
    readonly name: string

    /**
     * 
     * @type {Array<string>}
     * @memberof RunsApiListRuns
     */
    readonly jobId?: Array<string>

    /**
     * 
     * @type {RunStatusEnum}
     * @memberof RunsApiListRuns
     */
    readonly status?: RunStatusEnum

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof RunsApiListRuns
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof RunsApiListRuns
     */
    readonly perPage?: number
}

/**
 * Request parameters for queryResults operation in RunsApi.
 * @export
 * @interface RunsApiQueryResultsRequest
 */
export interface RunsApiQueryResultsRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiQueryResults
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiQueryResults
     */
    readonly name: string

    /**
     * 
     * @type {Array<string>}
     * @memberof RunsApiQueryResults
     */
    readonly jobId?: Array<string>

    /**
     * 
     * @type {RunStatusEnum}
     * @memberof RunsApiQueryResults
     */
    readonly status?: RunStatusEnum

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof RunsApiQueryResults
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof RunsApiQueryResults
     */
    readonly perPage?: number
}

/**
 * Request parameters for retryRun operation in RunsApi.
 * @export
 * @interface RunsApiRetryRunRequest
 */
export interface RunsApiRetryRunRequest {
    /**
     * 
     * @type {string}
     * @memberof RunsApiRetryRun
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiRetryRun
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof RunsApiRetryRun
     */
    readonly runId: string

    /**
     * 
     * @type {RetryConfig}
     * @memberof RunsApiRetryRun
     */
    readonly retryConfig: RetryConfig
}

/**
 * RunsApi - object-oriented interface
 * @export
 * @class RunsApi
 * @extends {BaseAPI}
 */
export class RunsApi extends BaseAPI {
    /**
     * Stop a run.
     * @summary Cancel a run
     * @param {RunsApiCancelRunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public cancelRun(requestParameters: RunsApiCancelRunRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).cancelRun(requestParameters.owner, requestParameters.name, requestParameters.runId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a download link for an artifact in a run folder
     * @summary Download an artifact from the run folder
     * @param {RunsApiDownloadRunArtifactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public downloadRunArtifact(requestParameters: RunsApiDownloadRunArtifactRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).downloadRunArtifact(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list all run steps
     * @summary Query the steps of a run
     * @param {RunsApiGetAllRunStepsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public getAllRunSteps(requestParameters: RunsApiGetAllRunStepsRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).getAllRunSteps(requestParameters.owner, requestParameters.name, requestParameters.runId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a run.
     * @summary Get a Run
     * @param {RunsApiGetRunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public getRun(requestParameters: RunsApiGetRunRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).getRun(requestParameters.owner, requestParameters.name, requestParameters.runId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get run output by name
     * @summary Get run output by name
     * @param {RunsApiGetRunOutputRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public getRunOutput(requestParameters: RunsApiGetRunOutputRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).getRunOutput(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.outputName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get run step logs
     * @summary Get the logs of a specific step of the run
     * @param {RunsApiGetRunStepLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public getRunStepLogs(requestParameters: RunsApiGetRunStepLogsRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).getRunStepLogs(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.stepId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list run steps
     * @summary Query the steps of a run
     * @param {RunsApiGetRunStepsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public getRunSteps(requestParameters: RunsApiGetRunStepsRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).getRunSteps(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.status, requestParameters.stepId, requestParameters.untilGeneration, requestParameters.sinceGeneration, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of artifacts in a run folder
     * @summary List artifacts in a run folder
     * @param {RunsApiListRunArtifactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public listRunArtifacts(requestParameters: RunsApiListRunArtifactsRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).listRunArtifacts(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.path, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of runs.
     * @summary List runs
     * @param {RunsApiListRunsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public listRuns(requestParameters: RunsApiListRunsRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).listRuns(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.status, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of run results.
     * @summary Query run results
     * @param {RunsApiQueryResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public queryResults(requestParameters: RunsApiQueryResultsRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).queryResults(requestParameters.owner, requestParameters.name, requestParameters.jobId, requestParameters.status, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retry a run.
     * @summary Retry a run
     * @param {RunsApiRetryRunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public retryRun(requestParameters: RunsApiRetryRunRequest, options?: RawAxiosRequestConfig) {
        return RunsApiFp(this.configuration).retryRun(requestParameters.owner, requestParameters.name, requestParameters.runId, requestParameters.retryConfig, options).then((request) => request(this.axios, this.basePath));
    }
}

