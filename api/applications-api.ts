/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 1.8.5
 * Contact: info@pollination.solutions
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Application } from '../models';
// @ts-ignore
import type { ApplicationAccessPolicy } from '../models';
// @ts-ignore
import type { ApplicationAccessPolicyList } from '../models';
// @ts-ignore
import type { ApplicationCreate } from '../models';
// @ts-ignore
import type { ApplicationDeployment } from '../models';
// @ts-ignore
import type { ApplicationList } from '../models';
// @ts-ignore
import type { ApplicationPolicySubject } from '../models';
// @ts-ignore
import type { ApplicationSortKey } from '../models';
// @ts-ignore
import type { ApplicationUpdate } from '../models';
// @ts-ignore
import type { ApplicationVersionList } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { NewApplicationVersion } from '../models';
// @ts-ignore
import type { S3UploadRequest } from '../models';
// @ts-ignore
import type { SortEnum } from '../models';
// @ts-ignore
import type { UpdateAccepted } from '../models';
/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an Application
         * @param {string} owner 
         * @param {ApplicationCreate} applicationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication: async (owner: string, applicationCreate: ApplicationCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('createApplication', 'owner', owner)
            // verify required parameter 'applicationCreate' is not null or undefined
            assertParamExists('createApplication', 'applicationCreate', applicationCreate)
            const localVarPath = `/applications/{owner}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication: async (owner: string, slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('deleteApplication', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('deleteApplication', 'slug', slug)
            const localVarPath = `/applications/{owner}/{slug}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a Application permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationPolicySubject} applicationPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationOrgPermission: async (owner: string, slug: string, applicationPolicySubject: ApplicationPolicySubject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('deleteApplicationOrgPermission', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('deleteApplicationOrgPermission', 'slug', slug)
            // verify required parameter 'applicationPolicySubject' is not null or undefined
            assertParamExists('deleteApplicationOrgPermission', 'applicationPolicySubject', applicationPolicySubject)
            const localVarPath = `/applications/{owner}/{slug}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationPolicySubject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a Application version
         * @param {string} owner 
         * @param {string} slug 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationVersion: async (owner: string, slug: string, tag: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('deleteApplicationVersion', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('deleteApplicationVersion', 'slug', slug)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('deleteApplicationVersion', 'tag', tag)
            const localVarPath = `/applications/{owner}/{slug}/versions/{tag}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication: async (owner: string, slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getApplication', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getApplication', 'slug', slug)
            const localVarPath = `/applications/{owner}/{slug}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get application access permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationAccessPermissions: async (owner: string, slug: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getApplicationAccessPermissions', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getApplicationAccessPermissions', 'slug', slug)
            const localVarPath = `/applications/{owner}/{slug}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (subjectType) {
                localVarQueryParameter['subject_type'] = subjectType;
            }

            if (permission) {
                localVarQueryParameter['permission'] = permission;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get application deployment
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationDeployment: async (owner: string, slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getApplicationDeployment', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getApplicationDeployment', 'slug', slug)
            const localVarPath = `/applications/{owner}/{slug}/deployment`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get application versions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationVersions: async (owner: string, slug: string, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getApplicationVersions', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getApplicationVersions', 'slug', slug)
            const localVarPath = `/applications/{owner}/{slug}/versions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Applications
         * @param {string} [search] Search string to find applications
         * @param {Array<string>} [ids] The ID of a application to search for
         * @param {Array<string>} [names] The name of the application
         * @param {Array<string>} [owner] Owner of the application
         * @param {boolean} [_public] Boolean check for public/private applications
         * @param {boolean} [deployed] Filter by deployed applications
         * @param {Array<string>} [permissions] Filter by permission on given resource
         * @param {Array<string>} [keywords] Filter by keywords on given resource
         * @param {ApplicationSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications: async (search?: string, ids?: Array<string>, names?: Array<string>, owner?: Array<string>, _public?: boolean, deployed?: boolean, permissions?: Array<string>, keywords?: Array<string>, sortBy?: ApplicationSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (names) {
                localVarQueryParameter['names'] = names;
            }

            if (owner) {
                localVarQueryParameter['owner'] = owner;
            }

            if (_public !== undefined) {
                localVarQueryParameter['public'] = _public;
            }

            if (deployed !== undefined) {
                localVarQueryParameter['deployed'] = deployed;
            }

            if (permissions) {
                localVarQueryParameter['permissions'] = permissions;
            }

            if (keywords) {
                localVarQueryParameter['keywords'] = keywords;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restart application deployment
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartApplicationDeployment: async (owner: string, slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('restartApplicationDeployment', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('restartApplicationDeployment', 'slug', slug)
            const localVarPath = `/applications/{owner}/{slug}/deployment`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationUpdate} applicationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication: async (owner: string, slug: string, applicationUpdate: ApplicationUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('updateApplication', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('updateApplication', 'slug', slug)
            // verify required parameter 'applicationUpdate' is not null or undefined
            assertParamExists('updateApplication', 'applicationUpdate', applicationUpdate)
            const localVarPath = `/applications/{owner}/{slug}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload the build package for the application version
         * @param {string} owner 
         * @param {string} slug 
         * @param {string} tag 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVersionPackage: async (owner: string, slug: string, tag: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('uploadVersionPackage', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('uploadVersionPackage', 'slug', slug)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('uploadVersionPackage', 'tag', tag)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadVersionPackage', 'file', file)
            const localVarPath = `/applications/{owner}/{slug}/versions/{tag}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert a new permission to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationAccessPolicy} applicationAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertApplicationPermission: async (owner: string, slug: string, applicationAccessPolicy: ApplicationAccessPolicy, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('upsertApplicationPermission', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('upsertApplicationPermission', 'slug', slug)
            // verify required parameter 'applicationAccessPolicy' is not null or undefined
            assertParamExists('upsertApplicationPermission', 'applicationAccessPolicy', applicationAccessPolicy)
            const localVarPath = `/applications/{owner}/{slug}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationAccessPolicy, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert a new version to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {NewApplicationVersion} newApplicationVersion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertApplicationVersion: async (owner: string, slug: string, newApplicationVersion: NewApplicationVersion, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('upsertApplicationVersion', 'owner', owner)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('upsertApplicationVersion', 'slug', slug)
            // verify required parameter 'newApplicationVersion' is not null or undefined
            assertParamExists('upsertApplicationVersion', 'newApplicationVersion', newApplicationVersion)
            const localVarPath = `/applications/{owner}/{slug}/versions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-pollination-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newApplicationVersion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create an Application
         * @param {string} owner 
         * @param {ApplicationCreate} applicationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApplication(owner: string, applicationCreate: ApplicationCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApplication(owner, applicationCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.createApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplication(owner: string, slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApplication(owner, slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.deleteApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a Application permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationPolicySubject} applicationPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplicationOrgPermission(owner: string, slug: string, applicationPolicySubject: ApplicationPolicySubject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApplicationOrgPermission(owner, slug, applicationPolicySubject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.deleteApplicationOrgPermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a Application version
         * @param {string} owner 
         * @param {string} slug 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplicationVersion(owner: string, slug: string, tag: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApplicationVersion(owner, slug, tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.deleteApplicationVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get an application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplication(owner: string, slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplication(owner, slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.getApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get application access permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationAccessPermissions(owner: string, slug: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationAccessPolicyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationAccessPermissions(owner, slug, page, perPage, subjectType, permission, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.getApplicationAccessPermissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get application deployment
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationDeployment(owner: string, slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDeployment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationDeployment(owner, slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.getApplicationDeployment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get application versions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationVersions(owner: string, slug: string, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationVersionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationVersions(owner, slug, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.getApplicationVersions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Applications
         * @param {string} [search] Search string to find applications
         * @param {Array<string>} [ids] The ID of a application to search for
         * @param {Array<string>} [names] The name of the application
         * @param {Array<string>} [owner] Owner of the application
         * @param {boolean} [_public] Boolean check for public/private applications
         * @param {boolean} [deployed] Filter by deployed applications
         * @param {Array<string>} [permissions] Filter by permission on given resource
         * @param {Array<string>} [keywords] Filter by keywords on given resource
         * @param {ApplicationSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplications(search?: string, ids?: Array<string>, names?: Array<string>, owner?: Array<string>, _public?: boolean, deployed?: boolean, permissions?: Array<string>, keywords?: Array<string>, sortBy?: ApplicationSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApplications(search, ids, names, owner, _public, deployed, permissions, keywords, sortBy, sortOrder, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.listApplications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restart application deployment
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restartApplicationDeployment(owner: string, slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restartApplicationDeployment(owner, slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.restartApplicationDeployment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationUpdate} applicationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApplication(owner: string, slug: string, applicationUpdate: ApplicationUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateApplication(owner, slug, applicationUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.updateApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload the build package for the application version
         * @param {string} owner 
         * @param {string} slug 
         * @param {string} tag 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadVersionPackage(owner: string, slug: string, tag: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadVersionPackage(owner, slug, tag, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.uploadVersionPackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upsert a new permission to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationAccessPolicy} applicationAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertApplicationPermission(owner: string, slug: string, applicationAccessPolicy: ApplicationAccessPolicy, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertApplicationPermission(owner, slug, applicationAccessPolicy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.upsertApplicationPermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upsert a new version to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {NewApplicationVersion} newApplicationVersion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertApplicationVersion(owner: string, slug: string, newApplicationVersion: NewApplicationVersion, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3UploadRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertApplicationVersion(owner, slug, newApplicationVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.upsertApplicationVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create an Application
         * @param {ApplicationsApiCreateApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication(requestParameters: ApplicationsApiCreateApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Application> {
            return localVarFp.createApplication(requestParameters.owner, requestParameters.applicationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Application
         * @param {ApplicationsApiDeleteApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication(requestParameters: ApplicationsApiDeleteApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteApplication(requestParameters.owner, requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a Application permissions
         * @param {ApplicationsApiDeleteApplicationOrgPermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationOrgPermission(requestParameters: ApplicationsApiDeleteApplicationOrgPermissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteApplicationOrgPermission(requestParameters.owner, requestParameters.slug, requestParameters.applicationPolicySubject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a Application version
         * @param {ApplicationsApiDeleteApplicationVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationVersion(requestParameters: ApplicationsApiDeleteApplicationVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteApplicationVersion(requestParameters.owner, requestParameters.slug, requestParameters.tag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an application
         * @param {ApplicationsApiGetApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication(requestParameters: ApplicationsApiGetApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Application> {
            return localVarFp.getApplication(requestParameters.owner, requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get application access permissions
         * @param {ApplicationsApiGetApplicationAccessPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationAccessPermissions(requestParameters: ApplicationsApiGetApplicationAccessPermissionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationAccessPolicyList> {
            return localVarFp.getApplicationAccessPermissions(requestParameters.owner, requestParameters.slug, requestParameters.page, requestParameters.perPage, requestParameters.subjectType, requestParameters.permission, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get application deployment
         * @param {ApplicationsApiGetApplicationDeploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationDeployment(requestParameters: ApplicationsApiGetApplicationDeploymentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationDeployment> {
            return localVarFp.getApplicationDeployment(requestParameters.owner, requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get application versions
         * @param {ApplicationsApiGetApplicationVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationVersions(requestParameters: ApplicationsApiGetApplicationVersionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationVersionList> {
            return localVarFp.getApplicationVersions(requestParameters.owner, requestParameters.slug, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Applications
         * @param {ApplicationsApiListApplicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications(requestParameters: ApplicationsApiListApplicationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationList> {
            return localVarFp.listApplications(requestParameters.search, requestParameters.ids, requestParameters.names, requestParameters.owner, requestParameters._public, requestParameters.deployed, requestParameters.permissions, requestParameters.keywords, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restart application deployment
         * @param {ApplicationsApiRestartApplicationDeploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartApplicationDeployment(requestParameters: ApplicationsApiRestartApplicationDeploymentRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.restartApplicationDeployment(requestParameters.owner, requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Application
         * @param {ApplicationsApiUpdateApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication(requestParameters: ApplicationsApiUpdateApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAccepted> {
            return localVarFp.updateApplication(requestParameters.owner, requestParameters.slug, requestParameters.applicationUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload the build package for the application version
         * @param {ApplicationsApiUploadVersionPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVersionPackage(requestParameters: ApplicationsApiUploadVersionPackageRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.uploadVersionPackage(requestParameters.owner, requestParameters.slug, requestParameters.tag, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert a new permission to a application
         * @param {ApplicationsApiUpsertApplicationPermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertApplicationPermission(requestParameters: ApplicationsApiUpsertApplicationPermissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAccepted> {
            return localVarFp.upsertApplicationPermission(requestParameters.owner, requestParameters.slug, requestParameters.applicationAccessPolicy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert a new version to a application
         * @param {ApplicationsApiUpsertApplicationVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertApplicationVersion(requestParameters: ApplicationsApiUpsertApplicationVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<S3UploadRequest> {
            return localVarFp.upsertApplicationVersion(requestParameters.owner, requestParameters.slug, requestParameters.newApplicationVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiCreateApplicationRequest
 */
export interface ApplicationsApiCreateApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiCreateApplication
     */
    readonly owner: string

    /**
     * 
     * @type {ApplicationCreate}
     * @memberof ApplicationsApiCreateApplication
     */
    readonly applicationCreate: ApplicationCreate
}

/**
 * Request parameters for deleteApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiDeleteApplicationRequest
 */
export interface ApplicationsApiDeleteApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplication
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplication
     */
    readonly slug: string
}

/**
 * Request parameters for deleteApplicationOrgPermission operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiDeleteApplicationOrgPermissionRequest
 */
export interface ApplicationsApiDeleteApplicationOrgPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationOrgPermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationOrgPermission
     */
    readonly slug: string

    /**
     * 
     * @type {ApplicationPolicySubject}
     * @memberof ApplicationsApiDeleteApplicationOrgPermission
     */
    readonly applicationPolicySubject: ApplicationPolicySubject
}

/**
 * Request parameters for deleteApplicationVersion operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiDeleteApplicationVersionRequest
 */
export interface ApplicationsApiDeleteApplicationVersionRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationVersion
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationVersion
     */
    readonly slug: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationVersion
     */
    readonly tag: string
}

/**
 * Request parameters for getApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGetApplicationRequest
 */
export interface ApplicationsApiGetApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplication
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplication
     */
    readonly slug: string
}

/**
 * Request parameters for getApplicationAccessPermissions operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGetApplicationAccessPermissionsRequest
 */
export interface ApplicationsApiGetApplicationAccessPermissionsRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly slug: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly perPage?: number

    /**
     * The type of access policy subject
     * @type {Array<string>}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly subjectType?: Array<string>

    /**
     * An access policy permission string
     * @type {Array<string>}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly permission?: Array<string>
}

/**
 * Request parameters for getApplicationDeployment operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGetApplicationDeploymentRequest
 */
export interface ApplicationsApiGetApplicationDeploymentRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationDeployment
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationDeployment
     */
    readonly slug: string
}

/**
 * Request parameters for getApplicationVersions operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGetApplicationVersionsRequest
 */
export interface ApplicationsApiGetApplicationVersionsRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationVersions
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationVersions
     */
    readonly slug: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ApplicationsApiGetApplicationVersions
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ApplicationsApiGetApplicationVersions
     */
    readonly perPage?: number
}

/**
 * Request parameters for listApplications operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiListApplicationsRequest
 */
export interface ApplicationsApiListApplicationsRequest {
    /**
     * Search string to find applications
     * @type {string}
     * @memberof ApplicationsApiListApplications
     */
    readonly search?: string

    /**
     * The ID of a application to search for
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly ids?: Array<string>

    /**
     * The name of the application
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly names?: Array<string>

    /**
     * Owner of the application
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly owner?: Array<string>

    /**
     * Boolean check for public/private applications
     * @type {boolean}
     * @memberof ApplicationsApiListApplications
     */
    readonly _public?: boolean

    /**
     * Filter by deployed applications
     * @type {boolean}
     * @memberof ApplicationsApiListApplications
     */
    readonly deployed?: boolean

    /**
     * Filter by permission on given resource
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly permissions?: Array<string>

    /**
     * Filter by keywords on given resource
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly keywords?: Array<string>

    /**
     * Key to sort the list by
     * @type {ApplicationSortKey}
     * @memberof ApplicationsApiListApplications
     */
    readonly sortBy?: ApplicationSortKey

    /**
     * The order to sort the list
     * @type {SortEnum}
     * @memberof ApplicationsApiListApplications
     */
    readonly sortOrder?: SortEnum

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ApplicationsApiListApplications
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ApplicationsApiListApplications
     */
    readonly perPage?: number
}

/**
 * Request parameters for restartApplicationDeployment operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiRestartApplicationDeploymentRequest
 */
export interface ApplicationsApiRestartApplicationDeploymentRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiRestartApplicationDeployment
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiRestartApplicationDeployment
     */
    readonly slug: string
}

/**
 * Request parameters for updateApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiUpdateApplicationRequest
 */
export interface ApplicationsApiUpdateApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly slug: string

    /**
     * 
     * @type {ApplicationUpdate}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly applicationUpdate: ApplicationUpdate
}

/**
 * Request parameters for uploadVersionPackage operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiUploadVersionPackageRequest
 */
export interface ApplicationsApiUploadVersionPackageRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUploadVersionPackage
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUploadVersionPackage
     */
    readonly slug: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUploadVersionPackage
     */
    readonly tag: string

    /**
     * 
     * @type {File}
     * @memberof ApplicationsApiUploadVersionPackage
     */
    readonly file: File
}

/**
 * Request parameters for upsertApplicationPermission operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiUpsertApplicationPermissionRequest
 */
export interface ApplicationsApiUpsertApplicationPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpsertApplicationPermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpsertApplicationPermission
     */
    readonly slug: string

    /**
     * 
     * @type {ApplicationAccessPolicy}
     * @memberof ApplicationsApiUpsertApplicationPermission
     */
    readonly applicationAccessPolicy: ApplicationAccessPolicy
}

/**
 * Request parameters for upsertApplicationVersion operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiUpsertApplicationVersionRequest
 */
export interface ApplicationsApiUpsertApplicationVersionRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpsertApplicationVersion
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpsertApplicationVersion
     */
    readonly slug: string

    /**
     * 
     * @type {NewApplicationVersion}
     * @memberof ApplicationsApiUpsertApplicationVersion
     */
    readonly newApplicationVersion: NewApplicationVersion
}

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary Create an Application
     * @param {ApplicationsApiCreateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public createApplication(requestParameters: ApplicationsApiCreateApplicationRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).createApplication(requestParameters.owner, requestParameters.applicationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Application
     * @param {ApplicationsApiDeleteApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public deleteApplication(requestParameters: ApplicationsApiDeleteApplicationRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).deleteApplication(requestParameters.owner, requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a Application permissions
     * @param {ApplicationsApiDeleteApplicationOrgPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public deleteApplicationOrgPermission(requestParameters: ApplicationsApiDeleteApplicationOrgPermissionRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).deleteApplicationOrgPermission(requestParameters.owner, requestParameters.slug, requestParameters.applicationPolicySubject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a Application version
     * @param {ApplicationsApiDeleteApplicationVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public deleteApplicationVersion(requestParameters: ApplicationsApiDeleteApplicationVersionRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).deleteApplicationVersion(requestParameters.owner, requestParameters.slug, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an application
     * @param {ApplicationsApiGetApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplication(requestParameters: ApplicationsApiGetApplicationRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).getApplication(requestParameters.owner, requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get application access permissions
     * @param {ApplicationsApiGetApplicationAccessPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplicationAccessPermissions(requestParameters: ApplicationsApiGetApplicationAccessPermissionsRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).getApplicationAccessPermissions(requestParameters.owner, requestParameters.slug, requestParameters.page, requestParameters.perPage, requestParameters.subjectType, requestParameters.permission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get application deployment
     * @param {ApplicationsApiGetApplicationDeploymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplicationDeployment(requestParameters: ApplicationsApiGetApplicationDeploymentRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).getApplicationDeployment(requestParameters.owner, requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get application versions
     * @param {ApplicationsApiGetApplicationVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplicationVersions(requestParameters: ApplicationsApiGetApplicationVersionsRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).getApplicationVersions(requestParameters.owner, requestParameters.slug, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Applications
     * @param {ApplicationsApiListApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public listApplications(requestParameters: ApplicationsApiListApplicationsRequest = {}, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).listApplications(requestParameters.search, requestParameters.ids, requestParameters.names, requestParameters.owner, requestParameters._public, requestParameters.deployed, requestParameters.permissions, requestParameters.keywords, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restart application deployment
     * @param {ApplicationsApiRestartApplicationDeploymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public restartApplicationDeployment(requestParameters: ApplicationsApiRestartApplicationDeploymentRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).restartApplicationDeployment(requestParameters.owner, requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Application
     * @param {ApplicationsApiUpdateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public updateApplication(requestParameters: ApplicationsApiUpdateApplicationRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).updateApplication(requestParameters.owner, requestParameters.slug, requestParameters.applicationUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload the build package for the application version
     * @param {ApplicationsApiUploadVersionPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public uploadVersionPackage(requestParameters: ApplicationsApiUploadVersionPackageRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).uploadVersionPackage(requestParameters.owner, requestParameters.slug, requestParameters.tag, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert a new permission to a application
     * @param {ApplicationsApiUpsertApplicationPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public upsertApplicationPermission(requestParameters: ApplicationsApiUpsertApplicationPermissionRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).upsertApplicationPermission(requestParameters.owner, requestParameters.slug, requestParameters.applicationAccessPolicy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert a new version to a application
     * @param {ApplicationsApiUpsertApplicationVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public upsertApplicationVersion(requestParameters: ApplicationsApiUpsertApplicationVersionRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).upsertApplicationVersion(requestParameters.owner, requestParameters.slug, requestParameters.newApplicationVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

