/* tslint:disable */
/* eslint-disable */
/**
 * pollination-server
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.46.0
 * Contact: info@pollination.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Application } from '../models';
// @ts-ignore
import { ApplicationAccessPolicy } from '../models';
// @ts-ignore
import { ApplicationAccessPolicyList } from '../models';
// @ts-ignore
import { ApplicationCreate } from '../models';
// @ts-ignore
import { ApplicationDeployment } from '../models';
// @ts-ignore
import { ApplicationList } from '../models';
// @ts-ignore
import { ApplicationPolicySubject } from '../models';
// @ts-ignore
import { ApplicationSortKey } from '../models';
// @ts-ignore
import { ApplicationUpdate } from '../models';
// @ts-ignore
import { ApplicationVersionList } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { NewApplicationVersion } from '../models';
// @ts-ignore
import { S3UploadRequest } from '../models';
// @ts-ignore
import { SortEnum } from '../models';
// @ts-ignore
import { UpdateAccepted } from '../models';
/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an Application
         * @param {string} owner 
         * @param {ApplicationCreate} applicationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication: async (owner: string, applicationCreate: ApplicationCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createApplication.');
            }
            // verify required parameter 'applicationCreate' is not null or undefined
            if (applicationCreate === null || applicationCreate === undefined) {
                throw new RequiredError('applicationCreate','Required parameter applicationCreate was null or undefined when calling createApplication.');
            }
            const localVarPath = `/applications/{owner}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof applicationCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(applicationCreate !== undefined ? applicationCreate : {}) : (applicationCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication: async (owner: string, slug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteApplication.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling deleteApplication.');
            }
            const localVarPath = `/applications/{owner}/{slug}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a Application permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationPolicySubject} applicationPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationOrgPermission: async (owner: string, slug: string, applicationPolicySubject: ApplicationPolicySubject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteApplicationOrgPermission.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling deleteApplicationOrgPermission.');
            }
            // verify required parameter 'applicationPolicySubject' is not null or undefined
            if (applicationPolicySubject === null || applicationPolicySubject === undefined) {
                throw new RequiredError('applicationPolicySubject','Required parameter applicationPolicySubject was null or undefined when calling deleteApplicationOrgPermission.');
            }
            const localVarPath = `/applications/{owner}/{slug}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof applicationPolicySubject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(applicationPolicySubject !== undefined ? applicationPolicySubject : {}) : (applicationPolicySubject || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a Application version
         * @param {string} owner 
         * @param {string} slug 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationVersion: async (owner: string, slug: string, tag: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteApplicationVersion.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling deleteApplicationVersion.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag','Required parameter tag was null or undefined when calling deleteApplicationVersion.');
            }
            const localVarPath = `/applications/{owner}/{slug}/versions/{tag}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication: async (owner: string, slug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getApplication.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling getApplication.');
            }
            const localVarPath = `/applications/{owner}/{slug}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get application access permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationAccessPermissions: async (owner: string, slug: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getApplicationAccessPermissions.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling getApplicationAccessPermissions.');
            }
            const localVarPath = `/applications/{owner}/{slug}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }

            if (subjectType) {
                localVarQueryParameter['subject_type'] = subjectType;
            }

            if (permission) {
                localVarQueryParameter['permission'] = permission;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get application deployment
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationDeployment: async (owner: string, slug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getApplicationDeployment.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling getApplicationDeployment.');
            }
            const localVarPath = `/applications/{owner}/{slug}/deployment`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get application versions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationVersions: async (owner: string, slug: string, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getApplicationVersions.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling getApplicationVersions.');
            }
            const localVarPath = `/applications/{owner}/{slug}/versions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Applications
         * @param {string} [search] Search string to find applications
         * @param {Array<string>} [ids] The ID of a application to search for
         * @param {Array<string>} [names] The name of the application
         * @param {Array<string>} [owner] Owner of the application
         * @param {boolean} [_public] Boolean check for public/private applications
         * @param {boolean} [deployed] Filter by deployed applications
         * @param {Array<string>} [permissions] Filter by permission on given resource
         * @param {Array<string>} [keywords] Filter by keywords on given resource
         * @param {ApplicationSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications: async (search?: string, ids?: Array<string>, names?: Array<string>, owner?: Array<string>, _public?: boolean, deployed?: boolean, permissions?: Array<string>, keywords?: Array<string>, sortBy?: ApplicationSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (names) {
                localVarQueryParameter['names'] = names;
            }

            if (owner) {
                localVarQueryParameter['owner'] = owner;
            }

            if (_public !== undefined) {
                localVarQueryParameter['public'] = _public;
            }

            if (deployed !== undefined) {
                localVarQueryParameter['deployed'] = deployed;
            }

            if (permissions) {
                localVarQueryParameter['permissions'] = permissions;
            }

            if (keywords) {
                localVarQueryParameter['keywords'] = keywords;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationUpdate} applicationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication: async (owner: string, slug: string, applicationUpdate: ApplicationUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateApplication.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling updateApplication.');
            }
            // verify required parameter 'applicationUpdate' is not null or undefined
            if (applicationUpdate === null || applicationUpdate === undefined) {
                throw new RequiredError('applicationUpdate','Required parameter applicationUpdate was null or undefined when calling updateApplication.');
            }
            const localVarPath = `/applications/{owner}/{slug}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof applicationUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(applicationUpdate !== undefined ? applicationUpdate : {}) : (applicationUpdate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert a new permission to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationAccessPolicy} applicationAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertApplicationPermission: async (owner: string, slug: string, applicationAccessPolicy: ApplicationAccessPolicy, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling upsertApplicationPermission.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling upsertApplicationPermission.');
            }
            // verify required parameter 'applicationAccessPolicy' is not null or undefined
            if (applicationAccessPolicy === null || applicationAccessPolicy === undefined) {
                throw new RequiredError('applicationAccessPolicy','Required parameter applicationAccessPolicy was null or undefined when calling upsertApplicationPermission.');
            }
            const localVarPath = `/applications/{owner}/{slug}/permissions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof applicationAccessPolicy !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(applicationAccessPolicy !== undefined ? applicationAccessPolicy : {}) : (applicationAccessPolicy || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert a new version to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {NewApplicationVersion} newApplicationVersion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertApplicationVersion: async (owner: string, slug: string, newApplicationVersion: NewApplicationVersion, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling upsertApplicationVersion.');
            }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling upsertApplicationVersion.');
            }
            // verify required parameter 'newApplicationVersion' is not null or undefined
            if (newApplicationVersion === null || newApplicationVersion === undefined) {
                throw new RequiredError('newApplicationVersion','Required parameter newApplicationVersion was null or undefined when calling upsertApplicationVersion.');
            }
            const localVarPath = `/applications/{owner}/{slug}/versions`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-pollination-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-pollination-token"] = localVarApiKeyValue;
            }

            // authentication JWTAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newApplicationVersion !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newApplicationVersion !== undefined ? newApplicationVersion : {}) : (newApplicationVersion || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an Application
         * @param {string} owner 
         * @param {ApplicationCreate} applicationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApplication(owner: string, applicationCreate: ApplicationCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).createApplication(owner, applicationCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplication(owner: string, slug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).deleteApplication(owner, slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove a Application permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationPolicySubject} applicationPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplicationOrgPermission(owner: string, slug: string, applicationPolicySubject: ApplicationPolicySubject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).deleteApplicationOrgPermission(owner, slug, applicationPolicySubject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove a Application version
         * @param {string} owner 
         * @param {string} slug 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplicationVersion(owner: string, slug: string, tag: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).deleteApplicationVersion(owner, slug, tag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get an application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplication(owner: string, slug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).getApplication(owner, slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get application access permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationAccessPermissions(owner: string, slug: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationAccessPolicyList>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).getApplicationAccessPermissions(owner, slug, page, perPage, subjectType, permission, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get application deployment
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationDeployment(owner: string, slug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDeployment>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).getApplicationDeployment(owner, slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get application versions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationVersions(owner: string, slug: string, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationVersionList>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).getApplicationVersions(owner, slug, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List Applications
         * @param {string} [search] Search string to find applications
         * @param {Array<string>} [ids] The ID of a application to search for
         * @param {Array<string>} [names] The name of the application
         * @param {Array<string>} [owner] Owner of the application
         * @param {boolean} [_public] Boolean check for public/private applications
         * @param {boolean} [deployed] Filter by deployed applications
         * @param {Array<string>} [permissions] Filter by permission on given resource
         * @param {Array<string>} [keywords] Filter by keywords on given resource
         * @param {ApplicationSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplications(search?: string, ids?: Array<string>, names?: Array<string>, owner?: Array<string>, _public?: boolean, deployed?: boolean, permissions?: Array<string>, keywords?: Array<string>, sortBy?: ApplicationSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationList>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).listApplications(search, ids, names, owner, _public, deployed, permissions, keywords, sortBy, sortOrder, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationUpdate} applicationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApplication(owner: string, slug: string, applicationUpdate: ApplicationUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).updateApplication(owner, slug, applicationUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upsert a new permission to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationAccessPolicy} applicationAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertApplicationPermission(owner: string, slug: string, applicationAccessPolicy: ApplicationAccessPolicy, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccepted>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).upsertApplicationPermission(owner, slug, applicationAccessPolicy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upsert a new version to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {NewApplicationVersion} newApplicationVersion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertApplicationVersion(owner: string, slug: string, newApplicationVersion: NewApplicationVersion, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3UploadRequest>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).upsertApplicationVersion(owner, slug, newApplicationVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create an Application
         * @param {string} owner 
         * @param {ApplicationCreate} applicationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication(owner: string, applicationCreate: ApplicationCreate, options?: any): AxiosPromise<Application> {
            return ApplicationsApiFp(configuration).createApplication(owner, applicationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication(owner: string, slug: string, options?: any): AxiosPromise<void> {
            return ApplicationsApiFp(configuration).deleteApplication(owner, slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a Application permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationPolicySubject} applicationPolicySubject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationOrgPermission(owner: string, slug: string, applicationPolicySubject: ApplicationPolicySubject, options?: any): AxiosPromise<void> {
            return ApplicationsApiFp(configuration).deleteApplicationOrgPermission(owner, slug, applicationPolicySubject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a Application version
         * @param {string} owner 
         * @param {string} slug 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationVersion(owner: string, slug: string, tag: string, options?: any): AxiosPromise<void> {
            return ApplicationsApiFp(configuration).deleteApplicationVersion(owner, slug, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an application
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication(owner: string, slug: string, options?: any): AxiosPromise<Application> {
            return ApplicationsApiFp(configuration).getApplication(owner, slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get application access permissions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {Array<string>} [subjectType] The type of access policy subject
         * @param {Array<string>} [permission] An access policy permission string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationAccessPermissions(owner: string, slug: string, page?: number, perPage?: number, subjectType?: Array<string>, permission?: Array<string>, options?: any): AxiosPromise<ApplicationAccessPolicyList> {
            return ApplicationsApiFp(configuration).getApplicationAccessPermissions(owner, slug, page, perPage, subjectType, permission, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get application deployment
         * @param {string} owner 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationDeployment(owner: string, slug: string, options?: any): AxiosPromise<ApplicationDeployment> {
            return ApplicationsApiFp(configuration).getApplicationDeployment(owner, slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get application versions
         * @param {string} owner 
         * @param {string} slug 
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationVersions(owner: string, slug: string, page?: number, perPage?: number, options?: any): AxiosPromise<ApplicationVersionList> {
            return ApplicationsApiFp(configuration).getApplicationVersions(owner, slug, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Applications
         * @param {string} [search] Search string to find applications
         * @param {Array<string>} [ids] The ID of a application to search for
         * @param {Array<string>} [names] The name of the application
         * @param {Array<string>} [owner] Owner of the application
         * @param {boolean} [_public] Boolean check for public/private applications
         * @param {boolean} [deployed] Filter by deployed applications
         * @param {Array<string>} [permissions] Filter by permission on given resource
         * @param {Array<string>} [keywords] Filter by keywords on given resource
         * @param {ApplicationSortKey} [sortBy] Key to sort the list by
         * @param {SortEnum} [sortOrder] The order to sort the list
         * @param {number} [page] Page number starting from 1
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications(search?: string, ids?: Array<string>, names?: Array<string>, owner?: Array<string>, _public?: boolean, deployed?: boolean, permissions?: Array<string>, keywords?: Array<string>, sortBy?: ApplicationSortKey, sortOrder?: SortEnum, page?: number, perPage?: number, options?: any): AxiosPromise<ApplicationList> {
            return ApplicationsApiFp(configuration).listApplications(search, ids, names, owner, _public, deployed, permissions, keywords, sortBy, sortOrder, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationUpdate} applicationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication(owner: string, slug: string, applicationUpdate: ApplicationUpdate, options?: any): AxiosPromise<UpdateAccepted> {
            return ApplicationsApiFp(configuration).updateApplication(owner, slug, applicationUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert a new permission to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {ApplicationAccessPolicy} applicationAccessPolicy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertApplicationPermission(owner: string, slug: string, applicationAccessPolicy: ApplicationAccessPolicy, options?: any): AxiosPromise<UpdateAccepted> {
            return ApplicationsApiFp(configuration).upsertApplicationPermission(owner, slug, applicationAccessPolicy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert a new version to a application
         * @param {string} owner 
         * @param {string} slug 
         * @param {NewApplicationVersion} newApplicationVersion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertApplicationVersion(owner: string, slug: string, newApplicationVersion: NewApplicationVersion, options?: any): AxiosPromise<S3UploadRequest> {
            return ApplicationsApiFp(configuration).upsertApplicationVersion(owner, slug, newApplicationVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiCreateApplicationRequest
 */
export interface ApplicationsApiCreateApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiCreateApplication
     */
    readonly owner: string

    /**
     * 
     * @type {ApplicationCreate}
     * @memberof ApplicationsApiCreateApplication
     */
    readonly applicationCreate: ApplicationCreate
}

/**
 * Request parameters for deleteApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiDeleteApplicationRequest
 */
export interface ApplicationsApiDeleteApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplication
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplication
     */
    readonly slug: string
}

/**
 * Request parameters for deleteApplicationOrgPermission operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiDeleteApplicationOrgPermissionRequest
 */
export interface ApplicationsApiDeleteApplicationOrgPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationOrgPermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationOrgPermission
     */
    readonly slug: string

    /**
     * 
     * @type {ApplicationPolicySubject}
     * @memberof ApplicationsApiDeleteApplicationOrgPermission
     */
    readonly applicationPolicySubject: ApplicationPolicySubject
}

/**
 * Request parameters for deleteApplicationVersion operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiDeleteApplicationVersionRequest
 */
export interface ApplicationsApiDeleteApplicationVersionRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationVersion
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationVersion
     */
    readonly slug: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiDeleteApplicationVersion
     */
    readonly tag: string
}

/**
 * Request parameters for getApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGetApplicationRequest
 */
export interface ApplicationsApiGetApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplication
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplication
     */
    readonly slug: string
}

/**
 * Request parameters for getApplicationAccessPermissions operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGetApplicationAccessPermissionsRequest
 */
export interface ApplicationsApiGetApplicationAccessPermissionsRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly slug: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly perPage?: number

    /**
     * The type of access policy subject
     * @type {Array<string>}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly subjectType?: Array<string>

    /**
     * An access policy permission string
     * @type {Array<string>}
     * @memberof ApplicationsApiGetApplicationAccessPermissions
     */
    readonly permission?: Array<string>
}

/**
 * Request parameters for getApplicationDeployment operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGetApplicationDeploymentRequest
 */
export interface ApplicationsApiGetApplicationDeploymentRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationDeployment
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationDeployment
     */
    readonly slug: string
}

/**
 * Request parameters for getApplicationVersions operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGetApplicationVersionsRequest
 */
export interface ApplicationsApiGetApplicationVersionsRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationVersions
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiGetApplicationVersions
     */
    readonly slug: string

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ApplicationsApiGetApplicationVersions
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ApplicationsApiGetApplicationVersions
     */
    readonly perPage?: number
}

/**
 * Request parameters for listApplications operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiListApplicationsRequest
 */
export interface ApplicationsApiListApplicationsRequest {
    /**
     * Search string to find applications
     * @type {string}
     * @memberof ApplicationsApiListApplications
     */
    readonly search?: string

    /**
     * The ID of a application to search for
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly ids?: Array<string>

    /**
     * The name of the application
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly names?: Array<string>

    /**
     * Owner of the application
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly owner?: Array<string>

    /**
     * Boolean check for public/private applications
     * @type {boolean}
     * @memberof ApplicationsApiListApplications
     */
    readonly _public?: boolean

    /**
     * Filter by deployed applications
     * @type {boolean}
     * @memberof ApplicationsApiListApplications
     */
    readonly deployed?: boolean

    /**
     * Filter by permission on given resource
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly permissions?: Array<string>

    /**
     * Filter by keywords on given resource
     * @type {Array<string>}
     * @memberof ApplicationsApiListApplications
     */
    readonly keywords?: Array<string>

    /**
     * Key to sort the list by
     * @type {ApplicationSortKey}
     * @memberof ApplicationsApiListApplications
     */
    readonly sortBy?: ApplicationSortKey

    /**
     * The order to sort the list
     * @type {SortEnum}
     * @memberof ApplicationsApiListApplications
     */
    readonly sortOrder?: SortEnum

    /**
     * Page number starting from 1
     * @type {number}
     * @memberof ApplicationsApiListApplications
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof ApplicationsApiListApplications
     */
    readonly perPage?: number
}

/**
 * Request parameters for updateApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiUpdateApplicationRequest
 */
export interface ApplicationsApiUpdateApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly slug: string

    /**
     * 
     * @type {ApplicationUpdate}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly applicationUpdate: ApplicationUpdate
}

/**
 * Request parameters for upsertApplicationPermission operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiUpsertApplicationPermissionRequest
 */
export interface ApplicationsApiUpsertApplicationPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpsertApplicationPermission
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpsertApplicationPermission
     */
    readonly slug: string

    /**
     * 
     * @type {ApplicationAccessPolicy}
     * @memberof ApplicationsApiUpsertApplicationPermission
     */
    readonly applicationAccessPolicy: ApplicationAccessPolicy
}

/**
 * Request parameters for upsertApplicationVersion operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiUpsertApplicationVersionRequest
 */
export interface ApplicationsApiUpsertApplicationVersionRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpsertApplicationVersion
     */
    readonly owner: string

    /**
     * 
     * @type {string}
     * @memberof ApplicationsApiUpsertApplicationVersion
     */
    readonly slug: string

    /**
     * 
     * @type {NewApplicationVersion}
     * @memberof ApplicationsApiUpsertApplicationVersion
     */
    readonly newApplicationVersion: NewApplicationVersion
}

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary Create an Application
     * @param {ApplicationsApiCreateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public createApplication(requestParameters: ApplicationsApiCreateApplicationRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).createApplication(requestParameters.owner, requestParameters.applicationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Application
     * @param {ApplicationsApiDeleteApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public deleteApplication(requestParameters: ApplicationsApiDeleteApplicationRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).deleteApplication(requestParameters.owner, requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a Application permissions
     * @param {ApplicationsApiDeleteApplicationOrgPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public deleteApplicationOrgPermission(requestParameters: ApplicationsApiDeleteApplicationOrgPermissionRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).deleteApplicationOrgPermission(requestParameters.owner, requestParameters.slug, requestParameters.applicationPolicySubject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a Application version
     * @param {ApplicationsApiDeleteApplicationVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public deleteApplicationVersion(requestParameters: ApplicationsApiDeleteApplicationVersionRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).deleteApplicationVersion(requestParameters.owner, requestParameters.slug, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an application
     * @param {ApplicationsApiGetApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplication(requestParameters: ApplicationsApiGetApplicationRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).getApplication(requestParameters.owner, requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get application access permissions
     * @param {ApplicationsApiGetApplicationAccessPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplicationAccessPermissions(requestParameters: ApplicationsApiGetApplicationAccessPermissionsRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).getApplicationAccessPermissions(requestParameters.owner, requestParameters.slug, requestParameters.page, requestParameters.perPage, requestParameters.subjectType, requestParameters.permission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get application deployment
     * @param {ApplicationsApiGetApplicationDeploymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplicationDeployment(requestParameters: ApplicationsApiGetApplicationDeploymentRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).getApplicationDeployment(requestParameters.owner, requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get application versions
     * @param {ApplicationsApiGetApplicationVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplicationVersions(requestParameters: ApplicationsApiGetApplicationVersionsRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).getApplicationVersions(requestParameters.owner, requestParameters.slug, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Applications
     * @param {ApplicationsApiListApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public listApplications(requestParameters: ApplicationsApiListApplicationsRequest = {}, options?: any) {
        return ApplicationsApiFp(this.configuration).listApplications(requestParameters.search, requestParameters.ids, requestParameters.names, requestParameters.owner, requestParameters._public, requestParameters.deployed, requestParameters.permissions, requestParameters.keywords, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Application
     * @param {ApplicationsApiUpdateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public updateApplication(requestParameters: ApplicationsApiUpdateApplicationRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).updateApplication(requestParameters.owner, requestParameters.slug, requestParameters.applicationUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert a new permission to a application
     * @param {ApplicationsApiUpsertApplicationPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public upsertApplicationPermission(requestParameters: ApplicationsApiUpsertApplicationPermissionRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).upsertApplicationPermission(requestParameters.owner, requestParameters.slug, requestParameters.applicationAccessPolicy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert a new version to a application
     * @param {ApplicationsApiUpsertApplicationVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public upsertApplicationVersion(requestParameters: ApplicationsApiUpsertApplicationVersionRequest, options?: any) {
        return ApplicationsApiFp(this.configuration).upsertApplicationVersion(requestParameters.owner, requestParameters.slug, requestParameters.newApplicationVersion, options).then((request) => request(this.axios, this.basePath));
    }
}
